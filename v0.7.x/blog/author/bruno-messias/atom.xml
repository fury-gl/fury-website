<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Blog - Posts by Bruno Messias</title>
  <id>https://fury.gl/blog/author/bruno-messias/atom.xml</id>
  <updated>2021-07-26T00:00:00Z</updated>
  <link href="https://fury.gl/" />
  <link href="https://fury.gl/blog/author/bruno-messias/atom.xml" rel="self" />
  <generator uri="https://ablog.readthedocs.org" version="0.10.5">ABlog</generator>
  <entry xml:base="https://fury.gl/blog/author/bruno-messias/atom.xml">
    <title type="text">Weekly Check-In #8</title>
    <id>https://fury.gl/posts/2021/2021-07-26-gsoc-devmessias-8.html</id>
    <updated>2021-07-26T00:00:00Z</updated>
    <published>2021-07-26T00:00:00Z</published>
    <link href="https://fury.gl/posts/2021/2021-07-26-gsoc-devmessias-8.html" />
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;weekly-check-in-8&quot;&gt;

&lt;div class=&quot;section&quot; id=&quot;what-did-i-do-this-week&quot;&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/18&quot;&gt;PR fury-gl/helios#18 (merged):&lt;/a&gt; Helios Documentation&lt;/p&gt;
&lt;p&gt;I’ve been working on Helios documentation. Now it’s available
online at &lt;a class=&quot;reference external&quot; href=&quot;https://fury-gl.github.io/helios-website&quot;&gt;https://fury-gl.github.io/helios-website&lt;/a&gt; &lt;img alt=&quot;image1&quot; src=&quot;https://fury-gl.github.io/helios-website/_images/logo.png&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/17&quot;&gt;PR fury-gl/helios#17 (merged):&lt;/a&gt; Helios CI for tests and code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;system-message&quot;&gt;
&lt;p class=&quot;system-message-title&quot;&gt;System Message: WARNING/2 (&lt;span class=&quot;docutils literal&quot;&gt;/Users/koudoro/Software/fury/docs/source/posts/2021/2021-07-26-gsoc-devmessias-8.rst&lt;/span&gt;, line 19)&lt;/p&gt;
&lt;p&gt;Bullet list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;coverage&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;did-i-get-stuck-anywhere&quot;&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;I did not get stuck this week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-coming-up-next&quot;&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I’ll discuss that with my mentors tomorrow.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://fury.gl/blog/author/bruno-messias/atom.xml">
    <title type="text">Weekly Check-In #7</title>
    <id>https://fury.gl/posts/2021/2021-07-19-gsoc-devmessias-7.html</id>
    <updated>2021-07-19T00:00:00Z</updated>
    <published>2021-07-19T00:00:00Z</published>
    <link href="https://fury.gl/posts/2021/2021-07-19-gsoc-devmessias-7.html" />
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;weekly-check-in-7&quot;&gt;

&lt;div class=&quot;section&quot; id=&quot;what-did-i-do-this-week&quot;&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/16&quot;&gt;PR fury-gl/helios#16
(merged):&lt;/a&gt; Helios IPC
network layout support for MacOs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/17&quot;&gt;PR fury-gl/helios#17
(merged):&lt;/a&gt; Smooth
animations for IPC network layout algorithms&lt;/p&gt;
&lt;p&gt;Before this commit was not possible to record the positions to have a
smooth animations with IPCLayout approach. See the animation below&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;image1&quot; src=&quot;https://user-images.githubusercontent.com/6979335/126175596-e6e2b415-bd79-4d99-82e7-53e10548be8c.gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After this PR now it’s possible to tell Helios to store the evolution
of the network positions using the record_positions parameter. This
parameter should be passed on the start method. Notice in the image
below how this gives to us a better visualization&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;image2&quot; src=&quot;https://user-images.githubusercontent.com/6979335/126175583-c7d85f0a-3d0c-400e-bbdd-4cbcd2a36fed.gif&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/13&quot;&gt;PR fury-gl/helios#13
(merged)&lt;/a&gt; Merged the
forceatlas2 cugraph layout algorithm&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;did-i-get-stuck-anywhere&quot;&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;I did not get stuck this week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-coming-up-next&quot;&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;Probably, I’ll work more on Helios. Specifically I want to improve the
memory management system. It seems that some shared memory resources are
not been released when using the IPCLayout approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://fury.gl/blog/author/bruno-messias/atom.xml">
    <title type="text">Network layout algorithms using IPC</title>
    <id>https://fury.gl/posts/2021/2021-07-12-gsoc-devmessias-6.html</id>
    <updated>2021-07-12T00:00:00Z</updated>
    <published>2021-07-12T00:00:00Z</published>
    <link href="https://fury.gl/posts/2021/2021-07-12-gsoc-devmessias-6.html" />
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;network-layout-algorithms-using-ipc&quot;&gt;

&lt;p&gt;Hi all. In the past weeks, I’ve been focusing on developing Helios; the
network visualization library for FURY. I improved the visual aspects of
the network rendering as well as implemented the most relevant network
layout methods.&lt;/p&gt;
&lt;p&gt;In this post I will discuss the most challenging task that I faced to
implement those new network layout methods and how I solved it.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-problem-network-layout-algorithm-implementations-with-a-blocking-behavior&quot;&gt;
&lt;h2&gt;The problem: network layout algorithm implementations with a blocking behavior&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Case 1:&lt;/strong&gt; Suppose that you need to monitor a hashtag and build a
social graph. You want to interact with the graph and at the same time
get insights about the structure of the user interactions. To get those
insights you can perform a node embedding using any kind of network
layout algorithm, such as force-directed or minimum distortion
embeddings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 2:&lt;/strong&gt; Suppose that you are modelling a network dynamic such as an
epidemic spreading or a Kuramoto model. In some of those network
dynamics a node can change the state and the edges related to the node
must be deleted. For example, in an epidemic model a node can represent
a person who died due to a disease. Consequently, the layout of the
network must be recomputed to give better insights.&lt;/p&gt;
&lt;p&gt;In described cases if we want a better (UX) and at the same time a more
practical and insightful application of Helios layouts algorithms
shouldn’t block any kind of computation in the main thread.&lt;/p&gt;
&lt;p&gt;In Helios we already have a lib written in C (with a python wrapper)
which performs the force-directed layout algorithm using separated
threads avoiding the GIL problem and consequently avoiding the blocking.
But and the other open-source network layout libs available on the
internet? Unfortunately, most of those libs have not been implemented
like Helios force-directed methods and consequently, if we want to
update the network layout the python interpreter will block the
computation and user interaction in your network visualization. How to
solve this problem?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;why-is-using-the-python-threading-is-not-a-good-solution&quot;&gt;
&lt;h2&gt;Why is using the python threading is not a good solution?&lt;/h2&gt;
&lt;p&gt;One solution to remove the blocking behavior of the network layout libs
like PyMDE is to use the threading module from python. However, remember
the GIL problem: only one thread can execute python code at once.
Therefore, this solution will be unfeasible for networks with more than
some hundreds of nodes or even less! Ok, then how to solve it well?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;ipc-using-python&quot;&gt;
&lt;h2&gt;IPC using python&lt;/h2&gt;
&lt;p&gt;As I said in my previous posts I’ve created a streaming system for data
visualization for FURY using webrtc. The streaming system is already
working and an important piece in this system was implemented using the
python SharedMemory from multiprocessing. We can get the same ideas from
the streaming system to remove the blocking behavior of the network
layout libs.&lt;/p&gt;
&lt;p&gt;My solution to have PyMDE and CuGraph-ForceAtlas without blocking was to
break the network layout method into two different types of processes: A
and B. The list below describes the most important behaviors and
responsibilities for each process&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Process A:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Where the visualization (NetworkDraw) will happen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create the shared memory resources: edges, weights, positions, info..&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check if the process B has updated the shared memory resource which
stores the positions using the timestamp stored in the info_buffer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the positions inside of NetworkDraw instance&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Process B:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Read the network information stored in the shared memory resources:
edges , weights, positions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute the network layout algorithm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the positions values inside of the shared memory resource&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the timestamp inside of the shared memory resource&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used the timestamp information to avoid unnecessary updates in the
FURY/VTK window instance, which can consume a lot of computational
resources.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;how-have-i-implemented-the-code-for-a-and-b&quot;&gt;
&lt;h3&gt;How have I implemented the code for A and B?&lt;/h3&gt;
&lt;p&gt;Because we need to deal with a lot of different data and share them
between different processes I’ve created a set of tools to deal with
that, take a look for example in the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/blob/main/helios/layouts/ipc_tools.py#L111&quot;&gt;ShmManagerMultiArrays
Object&lt;/a&gt;
, which makes the memory management less painful.&lt;/p&gt;
&lt;p&gt;I’m breaking the layout method into two different processes. Thus I’ve
created two abstract objects to deal with any kind of network layout
algorithm which must be performed using inter-process-communication
(IPC). Those objects are:
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/helios/blob/a0a24525697ec932a398db6413899495fb5633dd/helios/layouts/base.py#L65&quot;&gt;NetworkLayoutIPCServerCalc&lt;/a&gt;
; used by processes of type B and
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/helios/blob/a0a24525697ec932a398db6413899495fb5633dd/helios/layouts/base.py#L135&quot;&gt;NetworkLayoutIPCRender&lt;/a&gt;
; which should be used by processes of type A.&lt;/p&gt;
&lt;p&gt;I’ll not bore you with the details of the implementation. But let’s take
a look into some important points. As I’ve said saving the timestamp
after each step of the network layout algorithm. Take a look into the
method _check_and_sync from NetworkLayoutIPCRender
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/blob/a0a24525697ec932a398db6413899495fb5633dd/helios/layouts/base.py#L266&quot;&gt;here&lt;/a&gt;.
Notice that the update happens only if the stored timestamp has been
changed. Also, look at this line
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/blob/a0a24525697ec932a398db6413899495fb5633dd/helios/layouts/mde.py#L180&quot;&gt;helios/layouts/mde.py#L180&lt;/a&gt;,
the IPC-PyMDE implementation This line writes a value 1 into the second
element of the info_buffer. This value is used to inform the process A
that everything worked well. I used that info for example in the tests
for the network layout method, see the link
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/blob/a0a24525697ec932a398db6413899495fb5633dd/helios/tests/test_mde_layouts.py#L43&quot;&gt;helios/tests/test_mde_layouts.py#L43&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;results&quot;&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;Until now Helios has three network layout methods implemented: Force
Directed , Minimum Distortion Embeddings and Force Atlas 2. Here
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/blob/a0a24525697ec932a398db6413899495fb5633dd/docs/examples/viz_helios_mde.ipynb&quot;&gt;docs/examples/viz_helios_mde.ipynb&lt;/a&gt;
you can get a jupyter notebook that I’ve a created showing how to use
MDE with IPC in Helios.&lt;/p&gt;
&lt;p&gt;In the animation below we can see the result of the Helios-MDE
application into a network with a set of anchored nodes.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;image1&quot; src=&quot;https://user-images.githubusercontent.com/6979335/125310065-a3a9f480-e308-11eb-98d9-0ff5406a0e96.gif&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;next-steps&quot;&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;I’ll probably focus on the Helios network visualization system.
Improving the documentation and testing the ForceAtlas2 in a computer
with cuda installed. See the list of opened
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/issues&quot;&gt;issues&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;summary-of-most-important-pull-requests&quot;&gt;
&lt;h2&gt;Summary of most important pull-requests:&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;IPC tools for network layout methods (helios issue #7)
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/6&quot;&gt;fury-gl/helios/pull/6&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New network layout methods for fury (helios issue #7)
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/9&quot;&gt;fury-gl/helios/pull/9&lt;/a&gt;
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/14&quot;&gt;fury-gl/helios/pull/14&lt;/a&gt;
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/13&quot;&gt;fury-gl/helios/pull/13&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved the visual aspects and configurations of the network
rendering(helios issue #12)
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/helios/tree/fury_network_actors_improvements&quot;&gt;https://github.com/devmessias/helios/tree/fury_network_actors_improvements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tests, examples and documentation for Helios (helios issues #3 and
#4)
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/5&quot;&gt;fury-gl/helios/pull/5&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduced the flickering effect on the FURY/Helios streaming system
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/10&quot;&gt;fury-gl/helios/pull/10&lt;/a&gt;
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437/commits/a94e22dbc2854ec87b8c934f6cabdf48931dc279&quot;&gt;fury-gl/fury/pull/437/commits/a94e22dbc2854ec87b8c934f6cabdf48931dc279&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://fury.gl/blog/author/bruno-messias/atom.xml">
    <title type="text">Weekly Check-In #5</title>
    <id>https://fury.gl/posts/2021/2021-07-05-gsoc-devmessias-5.html</id>
    <updated>2021-07-05T00:00:00Z</updated>
    <published>2021-07-05T00:00:00Z</published>
    <link href="https://fury.gl/posts/2021/2021-07-05-gsoc-devmessias-5.html" />
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;weekly-check-in-5&quot;&gt;

&lt;div class=&quot;section&quot; id=&quot;what-did-you-do-this-week&quot;&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;fury-gl-fury-pr-437-webrtc-streaming-system-for-fury&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/427&quot;&gt;fury-gl/fury PR#437: WebRTC streaming system for FURY&lt;/a&gt;&lt;/h3&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Before the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437/commits/8c670c284368029cdb5b54c178a792ec615e4d4d&quot;&gt;8c670c2&lt;/a&gt; commit, for some versions of MacOs the
streaming system was falling in a silent bug. I’ve spent a lot of
time researching to found a cause for this. Fortunately, I could found
the cause and the solution. This troublesome MacOs was falling in a
silent bug because the SharedMemory Object was creating a memory
resource with at least 4086 bytes indepedent if I’ve requested less
than that. If we look into the MultiDimensionalBuffer Object
(stream/tools.py) before the 8c670c2 commit we can see that Object
has max_size parameter which needs to be updated if the SharedMemory
was created with a “wrong” size.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;fury-gl-helios-pr-1-network-layout-and-superactors&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/1&quot;&gt;fury-gl/helios PR 1: Network Layout and SuperActors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the past week I’ve made a lot of improvements in this PR, from
performance improvements to visual effects. Bellow are the list of the
tasks related with this PR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Code refactoring.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Visual improvements: Using the UniformTools from my pull request&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;system-message&quot;&gt;
&lt;p class=&quot;system-message-title&quot;&gt;System Message: WARNING/2 (&lt;span class=&quot;docutils literal&quot;&gt;/Users/koudoro/Software/fury/docs/source/posts/2021/2021-07-05-gsoc-devmessias-5.rst&lt;/span&gt;, line 35)&lt;/p&gt;
&lt;p&gt;Bullet list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/424&quot;&gt;#424&lt;/a&gt; now is possible to control all the visual characteristics at
runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;2D Layout: Meanwhile 3d network representations are very usefully&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;system-message&quot;&gt;
&lt;p class=&quot;system-message-title&quot;&gt;System Message: WARNING/2 (&lt;span class=&quot;docutils literal&quot;&gt;/Users/koudoro/Software/fury/docs/source/posts/2021/2021-07-05-gsoc-devmessias-5.rst&lt;/span&gt;, line 38)&lt;/p&gt;
&lt;p&gt;Bullet list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;for exploring a dataset is hard to convice a group of network
scientists to use a visualization system which dosen’t allow 2d
representations. Because of that I started to coding the 2d behavior
in the network visualization system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Minimum Distortion Embeddings examples: I’ve created some examples&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;system-message&quot;&gt;
&lt;p class=&quot;system-message-title&quot;&gt;System Message: WARNING/2 (&lt;span class=&quot;docutils literal&quot;&gt;/Users/koudoro/Software/fury/docs/source/posts/2021/2021-07-05-gsoc-devmessias-5.rst&lt;/span&gt;, line 43)&lt;/p&gt;
&lt;p&gt;Bullet list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;which shows how integrate pymde (Python Minimum Distortion
Embeddings) with fury/helios. The image below shows the result of
this integration: a “perfect” graph embedding&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt=&quot;https://user-images.githubusercontent.com/6979335/124524052-da937e00-ddcf-11eb-83ca-9b58ca692c2e.png&quot; src=&quot;https://user-images.githubusercontent.com/6979335/124524052-da937e00-ddcf-11eb-83ca-9b58ca692c2e.png&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-coming-up-next-week&quot;&gt;
&lt;h2&gt;What is coming up next week?&lt;/h2&gt;
&lt;p&gt;I’ll probably focus on the &lt;a class=&quot;reference internal&quot; href=&quot;#heliospr-1&quot;&gt;heliosPR#1&lt;/a&gt;. Specifically, writing tests
and improving the minimum distortion embedding layout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;did-you-get-stuck-anywhere&quot;&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;I did not get stuck this week.&lt;/p&gt;
&lt;div class=&quot;system-message&quot;&gt;
&lt;p class=&quot;system-message-title&quot;&gt;System Message: INFO/1 (&lt;span class=&quot;docutils literal&quot;&gt;/Users/koudoro/Software/fury/docs/source/posts/2021/2021-07-05-gsoc-devmessias-5.rst&lt;/span&gt;, line 60); &lt;em&gt;&lt;a href=&quot;#id1&quot;&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “fury-gl/fury pr#437: webrtc streaming system for fury”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;system-message&quot;&gt;
&lt;p class=&quot;system-message-title&quot;&gt;System Message: INFO/1 (&lt;span class=&quot;docutils literal&quot;&gt;/Users/koudoro/Software/fury/docs/source/posts/2021/2021-07-05-gsoc-devmessias-5.rst&lt;/span&gt;, line 62); &lt;em&gt;&lt;a href=&quot;#id2&quot;&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “fury-gl/helios pr 1: network layout and superactors”.&lt;/p&gt;
&lt;/div&gt;
&lt;span class=&quot;target&quot; id=&quot;heliospr-1&quot;&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://fury.gl/blog/author/bruno-messias/atom.xml">
    <title type="text">SOLID, monkey patching  a python issue and  network vizualization through WebRTC</title>
    <id>https://fury.gl/posts/2021/2021-06-28-gsoc-devmessias-4.html</id>
    <updated>2021-07-05T00:00:00Z</updated>
    <published>2021-07-05T00:00:00Z</published>
    <link href="https://fury.gl/posts/2021/2021-06-28-gsoc-devmessias-4.html" />
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;solid-monkey-patching-a-python-issue-and-network-vizualization-through-webrtc&quot;&gt;

&lt;p&gt;These past two weeks I’ve spent most of my time in the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437&quot;&gt;Streaming System
PR&lt;/a&gt; and the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/1/&quot;&gt;Network Layout
PR&lt;/a&gt; . In this post I’ll
focus on the most relevant things I’ve made for those PRs.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;streaming-system&quot;&gt;
&lt;h2&gt;Streaming System&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Pull
request&lt;/strong&gt; : &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437/&quot;&gt;fury-gl/fury/pull/437&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;code-refactoring&quot;&gt;
&lt;h3&gt;Code Refactoring&lt;/h3&gt;
&lt;div class=&quot;section&quot; id=&quot;abstract-class-and-solid&quot;&gt;
&lt;h4&gt;Abstract class and SOLID&lt;/h4&gt;
&lt;p&gt;The past weeks I’ve spent some time refactoring the code to see what
I’ve done let’ s take a look into this
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/b1e985bd6a0088acb4a116684577c4733395c9b3/fury/stream/client.py#L20&quot;&gt;fury/blob/b1e985…/fury/stream/client.py#L20&lt;/a&gt;,
the FuryStreamClient Object before the refactoring.&lt;/p&gt;
&lt;p&gt;The code is a mess. To see why this code is not good according to SOLID
principles let’s just list all the responsibilities of FuryStreamClient:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Creates a RawArray or SharedMemory to store the n-buffers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creates a RawArray or SharedMemory to store the information about
each buffer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cleanup the shared memory resources if the SharedMemory was used&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write the vtk buffer into the shared memory resource&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creates the vtk callbacks to update the vtk-buffer&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s a lot and those responsibilities are not even related to each
other. How can we be more SOLID[1]? An obvious solution is to create a
specific object to deal with the shared memory resources. But it’s not
good enough because we still have a poor generalization since this new
object still needs to deal with different memory management systems:
rawarray or shared memory (maybe sockets in the future). Fortunately, we
can use the python Abstract Classes[2] to organize the code.&lt;/p&gt;
&lt;p&gt;To use the ABC from python I first listed all the behaviors that should
be mandatory in the new abstract class. If we are using SharedMemory or
RawArrays we need first to create the memory resource in a proper way.
Therefore, the GenericImageBufferManager must have a abstract method
create_mem_resource. Now take a look into the ImageBufferManager inside
of
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/c196cf43c0135dada4e2c5d59d68bcc009542a6c/fury/stream/server/server.py#L40&quot;&gt;stream/server/server.py&lt;/a&gt;,
sometimes it is necessary to load the memory resource in a proper way.
Because of that, the GenericImageBufferManager needs to have a
load_mem_resource abstract method. Finally, each type of
ImageBufferManager should have a different cleanup method. The code
below presents the sketch of the abstract class&lt;/p&gt;
&lt;div class=&quot;system-message&quot;&gt;
&lt;p class=&quot;system-message-title&quot;&gt;System Message: ERROR/3 (&lt;span class=&quot;docutils literal&quot;&gt;/Users/koudoro/Software/fury/docs/source/posts/2021/2021-06-28-gsoc-devmessias-4.rst&lt;/span&gt;, line 65)&lt;/p&gt;
&lt;p&gt;Error in “code-block” directive:
maximum 1 argument(s) allowed, 6 supplied.&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstractmethod&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;GenericImageBufferManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
               &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_window_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_buffers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_shared_mem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_mem_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
       &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_mem_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
       &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we can look for those behaviors inside of FuryStreamClient.py and
ImageBufferManger.py that does not depend if we are using the
SharedMemory or RawArrays. These behaviors should be methods inside of
the new GenericImageBufferManager.&lt;/p&gt;
&lt;div class=&quot;highlight-python notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# code at: https://github.com/devmessias/fury/blob/440a39d427822096679ba384c7d1d9a362dab061/fury/stream/tools.py#L491&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericImageBufferManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_window_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_buffers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_shared_mem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_window_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_window_size&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_buffers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_buffers&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_buffers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_use_shared_mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_shared_mem&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;# omitted code&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_buffer_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_buffer_repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_buffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buffer_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_buffer_repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;next_buffer_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_buffer_index&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;# omitted code&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_use_shared_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# omitted code&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_buffer_repr&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_jpeg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_current_frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_use_shared_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# omitted code&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tobytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;async_get_jpeg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;# omitted code&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_mem_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_mem_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;With the
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/440a39d427822096679ba384c7d1d9a362dab061/fury/stream/tools.py#L491&quot;&gt;GenericImageBufferManager&lt;/a&gt;
the
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/440a39d427822096679ba384c7d1d9a362dab061/fury/stream/tools.py#L609&quot;&gt;RawArrayImageBufferManager&lt;/a&gt;
and
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/440a39d427822096679ba384c7d1d9a362dab061/fury/stream/tools.py#L681&quot;&gt;SharedMemImageBufferManager&lt;/a&gt;
is now implemented with less duplication of code (DRY principle). This
makes the code more readable and easier to find bugs. In addition, later
we can implement other memory management systems in the streaming system
without modifying the behavior of FuryStreamClient or the code inside of
server.py.&lt;/p&gt;
&lt;p&gt;I’ve also applied the same SOLID principles to improve the CircularQueue
object. Although the CircularQueue and FuryStreamInteraction were not
violating the S from SOLID, the head-tail buffer from the CircularQueue
must have a way to lock the write/read if the memory resource is busy.
Meanwhile the
&lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Array&quot;&gt;multiprocessing.Arrays&lt;/a&gt;
already has a context which allows lock (.get_lock()) SharedMemory
dosen’t[2]. The use of abstract class allowed me to deal with those
peculiarities. &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437/commits/358402ea2f06833f66f45f3818ccc3448b2da9cd&quot;&gt;commit
358402e&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;using-namedtuples-to-grant-immutability-and-to-avoid-silent-bugs&quot;&gt;
&lt;h4&gt;Using namedtuples to grant immutability and to avoid silent bugs&lt;/h4&gt;
&lt;p&gt;The circular queue and the user interaction are implemented in the
streaming system using numbers to identify the type of event (mouse
click, mouse weel, …) and where to store the specific values
associated with the event , for example if the ctrl key is pressed or
not. Therefore, those numbers appear in different files and locations:
tests/test_stream.py, stream/client.py, steam/server/app_async.py. This
can be problematic because a typo can create a silent bug. One
possibility to mitigate this is to use a python dictionary to store the
constant values, for example&lt;/p&gt;
&lt;div class=&quot;highlight-python notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT_IDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&amp;quot;mouse_move&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mouse_weel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But this solution has another issue, anywhere in the code we can change
the values of EVENT_IDS and this will produce a new silent bug. To avoid
this I chose to use
&lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/collections.html#collections.namedtuple&quot;&gt;namedtuples&lt;/a&gt;
to create an immutable object which holds all the constant values
associated with the user interactions.
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/b1e985bd6a0088acb4a116684577c4733395c9b3/fury/stream/constants.py#L59&quot;&gt;stream/constants.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The namedtuple has several advantages when compared to dictionaries for
this specific situation. In addition, it has a better performance. A
good tutorial about namedtuples it’s available here
&lt;a class=&quot;reference external&quot; href=&quot;https://realpython.com/python-namedtuple/&quot;&gt;https://realpython.com/python-namedtuple/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;testing&quot;&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;My mentors asked me to write tests for this PR. Therefore, this past
week I’ve implemented the most important tests for the streaming system:
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/440a39d427822096679ba384c7d1d9a362dab061/fury/tests/test_stream.py&quot;&gt;/fury/tests/test_stream.py&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;most-relevant-bugs&quot;&gt;
&lt;h3&gt;Most relevant bugs&lt;/h3&gt;
&lt;p&gt;As I discussed in my &lt;a class=&quot;reference external&quot; href=&quot;https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-3-15/&quot;&gt;third
week&lt;/a&gt;
check-in there is an open issue related to SharedMemory in python.
This”bug” happens in the streaming system through the following scenario&lt;/p&gt;
&lt;div class=&quot;highlight-bash notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;-Process A creates a shared memory X
&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;-Process A creates a subprocess B using popen &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;False&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;-Process B reads X
&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;-Process B closes X
&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;-Process A kills B
&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;-Process A closes  X
&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;-Process A unlink&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; the shared memory resource
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In python, this scenario translates to&lt;/p&gt;
&lt;div class=&quot;highlight-python notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;multiprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared_memory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;shm_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SharedMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;command_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;from multiprocessing import shared_memory as sh;import time;shm_b = sh.SharedMemory(&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shm_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;);shm_b.close();&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;STDOUT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;=======&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;STDERR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;=======&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;========&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shm_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shm_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Fortunately, I could use a monkey-patching[3] solution to fix that;
meanwhile we’re waiting for the python-core team to fix the
resource_tracker (38119) issue [4].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;network-layout-helios-fury&quot;&gt;
&lt;h2&gt;Network Layout (Helios-FURY)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Pull
request&lt;/strong&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/1/&quot;&gt;fury-gl/helios/pull/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, the first version of FURY network layout is working as you can
see in the video below.&lt;/p&gt;
&lt;p&gt;In addition, this already can be used with the streaming system allowing
user interactions across the internet with WebRTC protocol.&lt;/p&gt;
&lt;p&gt;One of the issues that I had to solve to achieve the result presented in
the video above was to find a way to update the positions of the vtk
objects without blocking the main thread and at the same time allowing
the vtk events calls. My solution was to define an interval timer using
the python threading module:
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/440a39d427822096679ba384c7d1d9a362dab061/fury/stream/tools.py#L776&quot;&gt;/fury/stream/tools.py#L776&lt;/a&gt;,
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/440a39d427822096679ba384c7d1d9a362dab061/fury/stream/client.py#L112&quot;&gt;/fury/stream/client.py#L112&lt;/a&gt;
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/440a39d427822096679ba384c7d1d9a362dab061/fury/stream/client.py#L296&quot;&gt;/fury/stream/client.py#L296&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;refs&quot;&gt;
&lt;h2&gt;Refs:&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;[1] A. Souly,”5 Principles to write SOLID Code (examples in Python),”
Medium, Apr. 26, 2021.
&lt;a class=&quot;reference external&quot; href=&quot;https://towardsdatascience.com/5-principles-to-write-solid-code-examples-in-python-9062272e6bdc&quot;&gt;https://towardsdatascience.com/5-principles-to-write-solid-code-examples-in-python-9062272e6bdc&lt;/a&gt;
(accessed Jun. 28, 2021).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[2]”[Python-ideas] Re: How to prevent shared memory from being
corrupted ?”
&lt;a class=&quot;reference external&quot; href=&quot;https://www.mail-archive.com/python-ideas&amp;#64;python.org/msg22935.html&quot;&gt;https://www.mail-archive.com/python-ideas&amp;#64;python.org/msg22935.html&lt;/a&gt;
(accessed Jun. 28, 2021).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[3]“Message 388287 - Python tracker.”
&lt;a class=&quot;reference external&quot; href=&quot;https://bugs.python.org/msg388287&quot;&gt;https://bugs.python.org/msg388287&lt;/a&gt; (accessed Jun. 28, 2021).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[4]“bpo-38119: Fix shmem resource tracking by vinay0410 · Pull
Request #21516 · python/cpython,” GitHub.
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python/cpython/pull/21516&quot;&gt;https://github.com/python/cpython/pull/21516&lt;/a&gt; (accessed Jun. 28,
2021).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://fury.gl/blog/author/bruno-messias/atom.xml">
    <title type="text">Weekly Check-In #3</title>
    <id>https://fury.gl/posts/2021/2021-06-21-gsoc-devmessias-3.html</id>
    <updated>2021-06-21T00:00:00Z</updated>
    <published>2021-06-21T00:00:00Z</published>
    <link href="https://fury.gl/posts/2021/2021-06-21-gsoc-devmessias-3.html" />
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;weekly-check-in-3&quot;&gt;

&lt;div class=&quot;section&quot; id=&quot;what-did-you-do-this-week&quot;&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/422/commits/8a0012b66b95987bafdb71367a64897b25c89368&quot;&gt;PR fury-gl/fury#422
(merged):&lt;/a&gt;
Integrated the 3d impostor spheres with the marker actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/422&quot;&gt;PR fury-gl/fury#422
(merged):&lt;/a&gt; Fixed some
issues with my maker PR which now it’s merged on fury.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/432&quot;&gt;PR fury-gl/fury#432&lt;/a&gt;
I’ve made some improvements in my PR which can be used to fine tune
the opengl state on VTK.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437&quot;&gt;PR fury-gl/fury#437&lt;/a&gt;
I’ve made several improvements in my streamer proposal for FURY related to memory management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/1&quot;&gt;PR fury-gl/helios#1&lt;/a&gt;
First version of async network layout using force-directed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;did-i-get-stuck-anywhere&quot;&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;a-python-core-issue&quot;&gt;
&lt;h3&gt;A python-core issue&lt;/h3&gt;
&lt;p&gt;I’ve spent some hours trying to discover this issue. But now it’s solved
through the commit
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/commit/071dab85a86ec4f97eba36721b247ca9233fd59e&quot;&gt;devmessias/fury/commit/071dab85&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/multiprocessing.shared_memory.html&quot;&gt;SharedMemory&lt;/a&gt;
from python&amp;gt;=3.8 offers a new a way to share memory resources between
unrelated process. One of the advantages of using the SharedMemory
instead of the RawArray from multiprocessing is that the SharedMemory
allows to share memory blocks without those processes be related with a
fork or spawm method. The SharedMemory behavior allowed to achieve our
jupyter integration and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437/files#diff-7680a28c3a88a93b8dae7b777c5db5805e1157365805eeaf2e58fd12a00df046&quot;&gt;simplifies the use of the streaming
system&lt;/a&gt;.
However, I saw a issue in the shared memory implementation.&lt;/p&gt;
&lt;p&gt;Let’s see the following scenario:&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creates&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creates&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;popen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reads&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kills&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closes&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The above scenario should work flawless. Calling unlink() in X is the right way as
discussed in the python official documentation. However, there is a open
issue  related the unlink method&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bugs.python.org/issue38119&quot;&gt;Issue:
https://bugs.python.org/issue38119&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/python/cpython/pull/21516&quot;&gt;PR
python/cpython/pull/21516&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, I could use a
&lt;a class=&quot;reference external&quot; href=&quot;https://bugs.python.org/msg388287&quot;&gt;monkey-patching&lt;/a&gt; solution to fix
that meanwhile we wait to the python-core team to fix the
resource_tracker (38119) issue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-coming-up-next&quot;&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I’m planning to work in the
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/432&quot;&gt;fury-gl/fury#432&lt;/a&gt; and
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/helios/pull/1&quot;&gt;fury-gl/helios#1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://fury.gl/blog/author/bruno-messias/atom.xml">
    <title type="text">A Stadia-like system for data visualization</title>
    <id>https://fury.gl/posts/2021/2021-06-12-gsoc-devmessias-2.html</id>
    <updated>2021-06-13T00:00:00Z</updated>
    <published>2021-06-13T00:00:00Z</published>
    <link href="https://fury.gl/posts/2021/2021-06-12-gsoc-devmessias-2.html" />
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;a-stadia-like-system-for-data-visualization&quot;&gt;

&lt;p&gt;Hi all! In this post I’ll talk about the PR
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437&quot;&gt;#437&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are several reasons to have a streaming system for data
visualization. Because I’m doing a PhD in a developing country I always
need to think of the cheapest way to use the computational resources
available. For example, with the GPUs prices increasing, it’s necessary
to share a machine with a GPU with different users in different
locations. Therefore, to convince my Brazilian friends to use FURY I
need to code thinking inside of the (a) low-budget scenario.&lt;/p&gt;
&lt;p&gt;To construct the streaming system for my project I’m thinking about the
following properties and behaviors:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;p&gt;I want to avoid blocking the code execution in the main thread (where
the vtk/fury instance resides).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The streaming should work inside of a low bandwidth environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I need an easy way to share the rendering result. For example, using
the free version of ngrok.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To achieve the property &lt;strong&gt;1.&lt;/strong&gt; we need to circumvent the GIL problem.
Using the threading module alone it’s not good enough because we can’t
use the python-threading for parallel CPU computation. In addition, to
achieve a better organization it’s better to define the server system as
an uncoupled module. Therefore, I believe that multiprocessing-lib in
python will fit very well for our proposes.&lt;/p&gt;
&lt;p&gt;For the streaming system to work smoothly in a low-bandwidth scenario we
need to choose the protocol wisely. In the recent years the WebRTC
protocol has been used in a myriad of applications like google hangouts
and Google Stadia aiming low latency behavior. Therefore, I choose the
webrtc as my first protocol to be available in the streaming system
proposal.&lt;/p&gt;
&lt;p&gt;To achieve the third property, we must be economical in adding
requirements and dependencies.&lt;/p&gt;
&lt;p&gt;Currently, the system has some issues, but it’s already working. You can
see some tutorials about how to use this streaming system
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/tree/feature_fury_stream_client/docs/tutorials/04_stream&quot;&gt;here&lt;/a&gt;.
After running one of these examples you can easily share the results and
interact with other users. For example, using the ngrok For example,
using the ngrok&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngrok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;how-does-it-works&quot;&gt;
&lt;h2&gt;How does it works?&lt;/h2&gt;
&lt;p&gt;The image below it’s a simple representation of the streaming system.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;image1&quot; src=&quot;https://user-images.githubusercontent.com/6979335/121934889-33ff1480-cd1e-11eb-89a4-562fbb953ba4.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the streaming system is made up of different processes
that share some memory blocks with each other. One of the hardest part
of this PR was to code this sharing between different objects like VTK,
numpy and the webserver. I’ll discuss next some of technical issues that
I had to learn/circumvent.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;sharing-data-between-process&quot;&gt;
&lt;h3&gt;Sharing data between process&lt;/h3&gt;
&lt;p&gt;We want to avoid any kind of unnecessary duplication of data or
expensive copy/write actions. We can achieve this economy of
computational resources using the multiprocessing module from python.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;multiprocessing-rawarray&quot;&gt;
&lt;h4&gt;multiprocessing RawArray&lt;/h4&gt;
&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;The
&lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.RawArray&quot;&gt;RawArray&lt;/a&gt;
from multiprocessing allows to share resources between different
processes. However, there are some tricks to get a better performance
when we are dealing with RawArray’s. For example, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/tree/6ae82fd239dbde6a577f9cccaa001275dcb58229&quot;&gt;take a look at my
PR in a older
stage.&lt;/a&gt;
In this older stage my streaming system was working well. However, one
of my mentors (Filipi Nascimento) saw a huge latency for
high-resolutions examples. My first thought was that latency was
caused by the GPU-CPU copy from the opengl context. However, I
discovered that I’ve been using RawArray’s wrong in my entire life!&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;See for example this line of code
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/blob/6ae82fd239dbde6a577f9cccaa001275dcb58229/fury/stream/client.py#L101&quot;&gt;fury/stream/client.py#L101&lt;/a&gt;
The code below shows how I’ve been updating the raw arrays&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_arr_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This works fine for small and medium sized arrays, but for large ones it
takes a large amount of time, more than GPU-CPU copy. The explanation
for this bad performance is available here : &lt;a class=&quot;reference external&quot; href=&quot;https://stackoverflow.com/questions/33853543/demystifying-sharedctypes-performance&quot;&gt;Demystifying sharedctypes
performance.&lt;/a&gt;
The solution which gives a stupendous performance improvement is quite
simple. RawArrays implements the buffer protocol. Therefore, we just
need to use the memoryview:&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The memview is really good, but there it’s a litle issue when we are
dealing with uint8 RawArrays. The following code will cause an exception:&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr_buffer_uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_data_uint8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There is a solution for uint8 rawarrays using just memview and cast
methods. However, numpy comes to rescue and offers a simple and a
generic solution. You just need to convert the rawarray to a np
representation in the following way:&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr_uint8_repr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctypeslib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr_buffer_uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr_uint8_repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_data_uint8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can navigate to my repository in this specific &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/devmessias/fury/commit/b1b0caf30db762cc018fc99dd4e77ba0390b2f9e&quot;&gt;commit
position&lt;/a&gt;
and test the streaming examples to see how this little modification
improves the performance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;multiprocessing-inside-of-different-operating-systems&quot;&gt;
&lt;h3&gt;Multiprocessing inside of different Operating Systems&lt;/h3&gt;
&lt;p&gt;Serge Koudoro, who is one of my mentors, has pointed out an issue of the
streaming system running in MacOs. I don’t know many things about MacOs,
and as pointed out by Filipi the way that MacOs deals with
multiprocessing is very different than the Linux approach. Although we
solved the issue discovered by Serge, I need to be more careful to
assume that different operating systems will behave in the same way. If
you want to know more,I recommend that you read this post &lt;a class=&quot;reference external&quot; href=&quot;https://britishgeologicalsurvey.github.io/science/python-forking-vs-spawn/&quot;&gt;Python:
Forking vs
Spawm&lt;/a&gt;.
And it’s also important to read the official documentation from python.
It can save you a lot of time. Take a look what the
official python documentation says about the multiprocessing method&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;image2&quot; src=&quot;https://user-images.githubusercontent.com/6979335/121958121-b0ebb780-cd39-11eb-862a-37244f7f635b.png&quot; /&gt; Source:&lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/multiprocessing.html&quot;&gt;https://docs.python.org/3/library/multiprocessing.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://fury.gl/blog/author/bruno-messias/atom.xml">
    <title type="text">Weekly Check-In #1</title>
    <id>https://fury.gl/posts/2021/2021-06-08-gsoc-devmessias-1.html</id>
    <updated>2021-06-08T00:00:00Z</updated>
    <published>2021-06-08T00:00:00Z</published>
    <link href="https://fury.gl/posts/2021/2021-06-08-gsoc-devmessias-1.html" />
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;weekly-check-in-1&quot;&gt;

&lt;p&gt;Hi everyone! My name is Bruno Messias currently I’m a Ph.D student at
USP/Brazil. In this summer I’ll develop new tools and features for
FURY-GL. Specifically, I’ll focus into developing a system for
collaborative visualization of large network layouts using FURY and VTK.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;what-did-i-do-this-week&quot;&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;In my first meeting the mentors explained the rules and the code of
conduct inside the FURY organization. We also made some modifications in
the timeline and discussed the next steps of my project. I started
coding during the community bonding period. The next paragraph shows my
contributions in the past weeks&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437&quot;&gt;A FURY/VTK webrtc stream system proposal:&lt;/a&gt; to the second part of my
GSoC project I need to have a efficiently and easy to use streaming
system to send the graph visualizations across the Internet. In
addition, I also need this to my Ph.D. Therefore, I’ve been working a
lot in this PR. This PR it’s also help me to achieve the first part
of my project. Because I don’t have a computer with good specs in my
house and I need to access a external computer to test the examples
for large graphs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Minor improvements into the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/422&quot;&gt;shader markers PR&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/432/&quot;&gt;fine tunning
open-gl state PR&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;did-i-get-stuck-anywhere&quot;&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;I’ve been stuck into a performance issue (copying the opengl framebuffer
to a python rawarray) which caused a lot of lag in the webrtc streamer.
Fortunately, I discovered that I’ve been using rawarrays in the wrong
way. My &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fury-gl/fury/pull/437/commits/b1b0caf30db762cc018fc99dd4e77ba0390b2f9e%20&quot;&gt;commit&lt;/a&gt; solved this performance issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-coming-up-next&quot;&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;In this week I’ll focus on finish the #432 and #422 pull-requests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
