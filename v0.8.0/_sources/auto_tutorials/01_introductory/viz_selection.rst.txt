
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/01_introductory/viz_selection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_01_introductory_viz_selection.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_01_introductory_viz_selection.py:


==========================
Selecting multiple objects
==========================

Here we show how to select objects in the
3D world. In this example all objects to be picked are part of
a single actor.

FURY likes to bundle objects in a few actors to reduce code and
increase speed. Nonetheless the method works for multiple actors too.

The difference with the picking tutorial is that here we will
be able to select more than one object. In addition we can
select interactively many vertices or faces.

In summary, we will create an actor with thousands of cubes and
then interactively we will be moving a rectangular box by
hovering the mouse and making transparent everything that is
behind that box.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: default


    import numpy as np
    from fury import actor, window, utils, pick








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Adding many cubes of different sizes and colors

.. GENERATED FROM PYTHON SOURCE LINES 30-38

.. code-block:: default


    num_cubes = 50000

    centers = 10000 * (np.random.rand(num_cubes, 3) - 0.5)
    colors = np.random.rand(num_cubes, 4)
    colors[:, 3] = 1.0
    radii = 100 * np.random.rand(num_cubes) + 0.1








.. GENERATED FROM PYTHON SOURCE LINES 39-42

Keep track of total number of triangle faces
Note that every quad of each cube has 2 triangles
and each cube has 6 quads in total.

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default


    num_faces = num_cubes * 6 * 2








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Build scene and add an actor with many objects.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    scene = window.Scene()








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Build the actor containing all the cubes

.. GENERATED FROM PYTHON SOURCE LINES 52-56

.. code-block:: default


    cube_actor = actor.cube(centers, directions=(1, 0, 0),
                            colors=colors, scales=radii)








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Access the memory of the vertices of all the cubes

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default


    vertices = utils.vertices_from_actor(cube_actor)
    num_vertices = vertices.shape[0]
    num_objects = centers.shape[0]








.. GENERATED FROM PYTHON SOURCE LINES 64-65

Access the memory of the colors of all the cubes

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default


    vcolors = utils.colors_from_actor(cube_actor, 'colors')








.. GENERATED FROM PYTHON SOURCE LINES 69-70

Create a rectangular 2d box as a texture

.. GENERATED FROM PYTHON SOURCE LINES 70-80

.. code-block:: default


    rgba = 255 * np.ones((100, 200, 4))
    rgba[1:-1, 1:-1] = np.zeros((98, 198, 4)) + 100
    texa = actor.texture_2d(rgba.astype(np.uint8))

    scene.add(cube_actor)
    scene.add(texa)
    scene.reset_camera()
    scene.zoom(3.)








.. GENERATED FROM PYTHON SOURCE LINES 81-82

Create the Selection Manager

.. GENERATED FROM PYTHON SOURCE LINES 82-85

.. code-block:: default


    selm = pick.SelectionManager(select='faces')








.. GENERATED FROM PYTHON SOURCE LINES 86-87

Tell Selection Manager to avoid selecting specific actors

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default


    selm.selectable_off(texa)








.. GENERATED FROM PYTHON SOURCE LINES 91-93

Let's make the callback which will be called
when we hover the mouse

.. GENERATED FROM PYTHON SOURCE LINES 93-118

.. code-block:: default



    def hover_callback(_obj, _event):
        event_pos = selm.event_position(showm.iren)
        # updates rectangular box around mouse
        texa.SetPosition(event_pos[0] - 200//2,
                         event_pos[1] - 100//2)

        # defines selection region and returns information from selected objects
        info = selm.select(event_pos, showm.scene, (200//2, 100//2))
        for node in info.keys():
            if info[node]['face'] is not None:
                if info[node]['actor'] is cube_actor:
                    for face_index in info[node]['face']:
                        # generates an object_index to help with coloring
                        # by dividing by the number of faces of each cube (6 * 2)
                        object_index = face_index // 12
                        sec = int(num_vertices / num_objects)
                        color_change = np.array([150, 0, 0, 255], dtype='uint8')
                        vcolors[object_index * sec: object_index * sec + sec] \
                            = color_change
                    utils.update_actor(cube_actor)
        showm.render()









.. GENERATED FROM PYTHON SOURCE LINES 119-120

Make the window appear

.. GENERATED FROM PYTHON SOURCE LINES 120-126

.. code-block:: default


    showm = window.ShowManager(scene, size=(1024, 768),
                               order_transparent=True,
                               reset_camera=False)









.. GENERATED FROM PYTHON SOURCE LINES 127-128

Bind the callback to the actor

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: default


    showm.add_iren_callback(hover_callback)








.. GENERATED FROM PYTHON SOURCE LINES 132-133

Change interactive to True to start interacting with the scene

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    interactive = False

    if interactive:

        showm.start()









.. GENERATED FROM PYTHON SOURCE LINES 142-143

Save the current framebuffer in a PNG file

.. GENERATED FROM PYTHON SOURCE LINES 143-145

.. code-block:: default


    window.record(showm.scene, size=(1024, 768), out_path="viz_selection.png")



.. image-sg:: /auto_tutorials/01_introductory/images/sphx_glr_viz_selection_001.png
   :alt: viz selection
   :srcset: /auto_tutorials/01_introductory/images/sphx_glr_viz_selection_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.471 seconds)


.. _sphx_glr_download_auto_tutorials_01_introductory_viz_selection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: viz_selection.py <viz_selection.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: viz_selection.ipynb <viz_selection.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
