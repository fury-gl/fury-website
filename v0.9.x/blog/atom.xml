<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://fury.gl/</id>
  <title>Blog</title>
  <updated>2023-08-18T15:14:40.408978+00:00</updated>
  <link href="https://fury.gl/"/>
  <link href="https://fury.gl/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.4.post1">ABlog</generator>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-16-week-11-tvcastillod.html</id>
    <title>Week 11 : Adjusting ODF implementation and looking for solutions on issues found</title>
    <updated>2023-08-16T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;section id="week-11-adjusting-odf-implementation-and-looking-for-solutions-on-issues-found"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;I continued to experiment with the ODF glyph implementation. Thanks to one of my mentors I figured out how to get the missing data corresponding to the SH coefficients &lt;span class="math notranslate nohighlight"&gt;\(a^l_m\)&lt;/span&gt; part of the function &lt;span class="math notranslate nohighlight"&gt;\(f(\theta, \phi)\)&lt;/span&gt; described &lt;a class="reference external" href="https://dipy.org/documentation/1.7.0/theory/sh_basis/"&gt;here&lt;/a&gt;. I also was told to make sure to implement the correct SH basis since there are different definitions from the literature, I have to focus now in the one proposed by Descoteaux, described in &lt;a class="reference external" href="https://onlinelibrary.wiley.com/doi/10.1002/mrm.21277"&gt;this paper&lt;/a&gt;, which is labeled in &lt;em&gt;dipy&lt;/em&gt; as &lt;em&gt;descoteaux07&lt;/em&gt;. To do this I had to make a small adjustment to the base implementation that I took as a reference, from which I obtained a first result using SH of order 4.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260909561-fd90033c-018a-465b-bd16-3586bb31ca36.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260909561-fd90033c-018a-465b-bd16-3586bb31ca36.png" style="width: 600px;" /&gt;
&lt;p&gt;It appears that the results on the shape are about the same, except for the direction, but there is still work to be done.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;For now, there are 3 things I will continue to work on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The color and lighting. As these objects present curvatures with quite a bit of detail in some cases, this is something that requires more specific lighting work, in addition to having now not only one color but a color map.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The scaling. This is something I still don’t know how to deal with. I had to adjust it manually for now, but the idea is to find a relationship between the coefficients and the final object size so it can be automatically scaled, or maybe there is a proper way to pre-process this data before passing it to the shaders to get the right result at once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-16-week-11-tvcastillod.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “here”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;How to pass the information of the coefficients efficiently. Right now I’m creating one actor per glyph since I’m using a uniform array to pass the coefficients, but the idea is to pass all the data at once. I found several ideas &lt;a class="reference external" href="https://stackoverflow.com/questions/7954927/passing-a-list-of-values-to-fragment-shader"&gt;here&lt;/a&gt; of how to pass a list of values to the fragment shader directly, I just need to explore deeper how this can be done on &lt;strong&gt;FURY&lt;/strong&gt;, and see which option is most suitable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;All the points mentioned above are things that I tried to fix, however, it is something that I need to look at in much more detail and that I know is going to take me some time to understand and test before I get to the expected result. I hope to get some ideas from my mentors and fellow GSoC contributors on how I can proceed to deal with each of the problems.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-16-week-11-tvcastillod.html" rel="alternate"/>
    <summary>I continued to experiment with the ODF glyph implementation. Thanks to one of my mentors I figured out how to get the missing data corresponding to the SH coefficients a^l_m part of the function f(\theta, \phi) described here. I also was told to make sure to implement the correct SH basis since there are different definitions from the literature, I have to focus now in the one proposed by Descoteaux, described in this paper, which is labeled in dipy as descoteaux07. To do this I had to make a small adjustment to the base implementation that I took as a reference, from which I obtained a first result using SH of order 4.</summary>
    <category term="google" label="google"/>
    <published>2023-08-16T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-12-week-11-praneeth.html</id>
    <title>Week 11: Bye Bye SpinBox</title>
    <updated>2023-08-12T00:00:00+00:00</updated>
    <author>
      <name>Praneeth Shetty</name>
    </author>
    <content type="html">&lt;section id="week-11-bye-bye-spinbox"&gt;

&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;p&gt;Building upon the progress of the previous week, a major milestone was reached with the merging of PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/830"&gt;#830&lt;/a&gt;. This PR added essential “getters” and “setters” for the new features of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock&lt;/span&gt;&lt;/code&gt;, making it easier to handle changes. This, in turn, facilitated the integration of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; with the updated &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, while working on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt;, a critical issue emerged. As &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; allows users to input characters and symbols into an editable textbox, it posed a risk of program crashes due to invalid inputs. To counter this, I introduced a validation check to ensure that the input was a valid number. If valid, the input was converted; otherwise, it reverted to the previous value. After thorough testing and review, PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/499"&gt;#499&lt;/a&gt; was successfully merged.&lt;/p&gt;
&lt;img alt="SpinBoxUI" class="align-center" src="https://user-images.githubusercontent.com/64432063/261409747-511e535b-185c-4e70-aaa8-5296c93e5344.gif" style="width: 500px;" /&gt;
&lt;p&gt;Meanwhile, a concern with the textbox’s behavior was identified when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; was scaled to a larger size. Specifically, the text occasionally touched the top or bottom boundary, creating an overflow appearance. Although initial solutions were attempted, the complexity of the issue required further consideration. This issue has been documented in more detail in Issue &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/838"&gt;#838&lt;/a&gt;, where it is marked as a low-priority item.&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="TextBlock2D text positioning issue" src="https://user-images.githubusercontent.com/64432063/133194003-53e2dac6-31e0-444e-b7f1-a9e71545f560.jpeg" /&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;The challenge of the week centered around addressing the textbox’s overflow behavior in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;Looking ahead, the focus remains on refining the FileDialog component, as the significant progress with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; prepares us to shift attention to other aspects of development.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-12-week-11-praneeth.html" rel="alternate"/>
    <summary>Building upon the progress of the previous week, a major milestone was reached with the merging of PR #830. This PR added essential “getters” and “setters” for the new features of TextBlock, making it easier to handle changes. This, in turn, facilitated the integration of SpinBoxUI with the updated TextBlock.</summary>
    <category term="google" label="google"/>
    <published>2023-08-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-08-week-10-tvcastillod.html</id>
    <title>Week 10 : Start of SH implementation experiments</title>
    <updated>2023-08-08T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;section id="week-10-start-of-sh-implementation-experiments"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;I started formally working on SH implementation. I was told to start first doing a simple program where I can modify in real-time the order &lt;span class="math notranslate nohighlight"&gt;\(l\)&lt;/span&gt; and degree &lt;span class="math notranslate nohighlight"&gt;\(m\)&lt;/span&gt;, parameters corresponding to the &lt;a class="reference external" href="https://dipy.org/documentation/1.7.0/theory/sh_basis/"&gt;Spherical Harmonics function&lt;/a&gt; &lt;span class="math notranslate nohighlight"&gt;\(Y^m_l(\theta,\phi)=\)&lt;/span&gt;, based on &lt;a class="reference external" href="https://github.com/lenixlobo/fury/commit/2b7ce7a71fd422dc5a250d7b49e1eea2db9d3bce"&gt;previous work&lt;/a&gt;. That is just one part of the final ODF calculation, but here is what a first experimental script looks like.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260910073-10b0edd4-40e3-495c-85ad-79993aef3b19.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260910073-10b0edd4-40e3-495c-85ad-79993aef3b19.png" style="width: 600px;" /&gt;
&lt;p&gt;I did it in order to make sure it was visually correct and also to understand better how those 2 parameters are related and need to be incorporated into the final calculation. There is one issue at first sight that needs to be addressed, and that is the scaling, since for SH with a degree near 0, the object gets out of bounds.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I will keep polishing details from my current open PRs, hopefully, I will get another PR merged before the last GSoC week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;Not sure about how to use the current implementation I have to get similar visualizations made with &lt;em&gt;odf_slicer&lt;/em&gt;, since the parameters that the function receive are different, so I need to take a deeper look and see where it might be the connection or if I should make some adjustments on the parameters.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-08-week-10-tvcastillod.html" rel="alternate"/>
    <summary>I started formally working on SH implementation. I was told to start first doing a simple program where I can modify in real-time the order l and degree m, parameters corresponding to the Spherical Harmonics function Y^m_l(\theta,\phi)=, based on previous work. That is just one part of the final ODF calculation, but here is what a first experimental script looks like.</summary>
    <category term="google" label="google"/>
    <published>2023-08-08T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-07-week-10-joaodellagli.html</id>
    <title>Week 10: Ready for Review!</title>
    <updated>2023-08-07T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-10-ready-for-review"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost!&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After talking with my mentors, I was tasked with getting my API PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;#826&lt;/a&gt; ready for review,
as it still needed some polishing, and the most important of all, it needed its tests working, as this was something I haven’t invested time since its creation.
Having that in mind, I have spent the whole week cleaning whatever needed, writing the tests, and also writing a simple example of its
usage. I also tried implementing a little piece of UI so the user could control the intensity of the bandwidth of the KDE render, but
I had a little problem I will talk about below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Fortunately, for the cleaning part, I didn’t have any trouble, and my PR is finally ready for review! The most complicated part was to write the tests, as this is something that
requires attention to understand what needs to be tested, exactly. As for the UI part, I managed to have a slider working for the
intensity, however, it was crashing the whole program for a reason, so I decided to leave this idea behind for now.
Below, an example of how this should work:&lt;/p&gt;
&lt;img alt="Buggy slider for the intensity control of the bandwidth of the KDE" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/slider.gif" /&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;After a meeting with my mentors, we decided that this week’s focus should be on finding a good usage example of the KDE rendering feature,
to have it as a showcase of the capability of this API. Also, they hinted me some changes that need to be done regarding the API, so I
will also invest some time on refactoring it.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-07-week-10-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, it’s time for another weekly blogpost!</summary>
    <category term="google" label="google"/>
    <published>2023-08-07T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-31-week-9-tvcastillod.html</id>
    <title>Week 9: Tutorial done and polishing DTI uncertainty</title>
    <updated>2023-07-31T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;section id="week-9-tutorial-done-and-polishing-dti-uncertainty"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;I addressed the comments from the tutorial of &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/818"&gt;PR #818&lt;/a&gt;  related to how to display specific visualizations I wanted to make. I was suggested to use &lt;em&gt;ShowManager&lt;/em&gt; to handle the zoom of the scene and also to use &lt;em&gt;GridUI&lt;/em&gt; to display several actors at the same time for a visual quality comparison of the tensors. Below are some images generated for the tutorial that is almost done.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260906510-d422e7b4-3ba3-4de6-bfd0-09c04bec8876.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260906510-d422e7b4-3ba3-4de6-bfd0-09c04bec8876.png" style="width: 600px;" /&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;There are some issues with the tests of the uncertainty implementation, specifically a segmentation problem that has to be with the shaders, so I expect to correct the problem by next week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;I’m still thinking about how to approach the implementation of the spherical harmonics for ODF glyphs. Most of the implementations I have found are static so my task would be to try to parametrize the existing functions, so I can pass data from Python to the shaders properly so that I can obtain the same result as the current &lt;em&gt;odf_slicer&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-31-week-9-tvcastillod.html" rel="alternate"/>
    <summary>I addressed the comments from the tutorial of PR #818  related to how to display specific visualizations I wanted to make. I was suggested to use ShowManager to handle the zoom of the scene and also to use GridUI to display several actors at the same time for a visual quality comparison of the tensors. Below are some images generated for the tutorial that is almost done.</summary>
    <category term="google" label="google"/>
    <published>2023-07-31T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-31-week-9-joaodellagli.html</id>
    <title>Week 9: It is Polishing Time!</title>
    <updated>2023-07-31T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-9-it-is-polishing-time"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! Today, I am going to update you on my project’s latest changes.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After having finished a first draft of the API that will be used for the KDE rendering, and showing how it could be used
for other post-processing effects, my goal was to clean the code and try some details that would add to it so it could be better
complete. Having that in mind, I invested in three work fronts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Fixing some bugs related to the rendering more than one post-processing effect actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Experimenting with other rendering kernels (I was using the &lt;em&gt;gaussian&lt;/em&gt; one only).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Completing the KDE render by renormalizing the values in relation to the number of points (one of the core KDE details).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both three turned out more complicated than it initially seemed, as I will show below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;The first one I did on monday-tuesday, and I had to deal with some issues regarding scaling and repositioning. Due to implementation
choices, the final post-processed effects were rendered either bigger than they were in reality, or out of their original place.
After some time dedicated to finding the root of the problems, I could fix the scaling issue, however I realised I would need to,
probably, rethink the way the API was implemented. As this general post-processing effects is a side-project that comes as a consequence of
my main one, I decided to leave that investment to another time, as I would need to guarantee the quality of the second.&lt;/p&gt;
&lt;p&gt;The second was an easy and rather interesting part of my week, as I just needed to setup new kernel shaders. Based on
&lt;a class="reference external" href="https://scikit-learn.org/stable/modules/density.html"&gt;scikit-learn KDE documentation&lt;/a&gt;, I could successfully implement the following kernels:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Gaussian&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = e^{\frac{-(x^2 + y^2)}{2\sigma^2}}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Tophat&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1.0, \ \ |x^2 + y^2| &amp;lt; \sigma\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Epanechnikov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1 - \frac{x^2 + y^2}{\sigma^2}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Exponential&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = e^{\frac{-|x^2 + y^2|}{\sigma}}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Linear&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1 - \frac{|x^2 + y^2|}{\sigma}, \ \ |x^2 + y^2| &amp;lt; \sigma\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Cosine&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = cos(\frac{\pi|x^2 + y^2|}{2\sigma})\]&lt;/div&gt;
&lt;p&gt;That outputted the following (beautiful) results for a set of 1000 random points with random sigmas:&lt;/p&gt;
&lt;img alt="Different kernel approaches" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/kernels.png" /&gt;
&lt;p&gt;The third one is still being a trickier challenge. If you recall from my first blogposts, I spent something around &lt;em&gt;one month&lt;/em&gt; trying to setup
float framebuffer objects to FURY with VTK so I could use them in my project. After spending all of that time with no results,
me and Bruno, my mentor, &lt;span class="xref std std-doc"&gt;found a way&lt;/span&gt; to do what we wanted to do, but using a different VTK class,
&lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkWindowToImageFilter.html"&gt;vtkWindowToImageFilter&lt;/a&gt;. Well, it was a good workaround back then and
it lead me all the way here, however now it is costing a price. The float framebuffers were an important part of the project because they
would allow us to pass &lt;em&gt;32-bit float information&lt;/em&gt; from one shader to another, which would be important as they would allow the densities to
have higher precision and more fidelity to the calculations. When rendering a KDE of a given set of points, we use the below function:&lt;/p&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[KDE(x, y) = \frac{1}{n} \sum_{i = 0}^n K(x, y)\]&lt;/div&gt;
&lt;p&gt;If the number of points &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt; is big enough, some KDE results will be really low. This presents a real problem to our implementation because, without
the float framebuffers, it is currently only being possible to pass &lt;em&gt;8-bit unsigned char&lt;/em&gt; information, that only allows 256 values.
This is far from ideal, as low values would have alone densities low enough to disappear. This presented a problem as to renormalize the
densities, I was retrieving the texture to the CPU, calculating its minimum and maximum values, and passing to the fragment shader as uniforms
for the renormalization, which didn’t work if the maximum values calculated were zero.&lt;/p&gt;
&lt;p&gt;One solution I thought to solve that was a really heavy workaround: if an unsigned float is 32-bit and I have exactly 4 8-bit
unsigned chars, why not try to pack this float into these 4 chars? Well, this is an interesting approach which I figured out is already an
old one, being reported in &lt;a class="reference external" href="https://developer.nvidia.com/gpugems/gpugems/part-ii-lighting-and-shadows/chapter-12-omnidirectional-shadow-mapping"&gt;GPU Gems’s chapter 12&lt;/a&gt;.
Unfortunately I haven’t tried yet this implementation yet, and went for one I thought myself, which haven’t exactly worked. I also tried
this implementation from &lt;a class="reference external" href="https://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/"&gt;Aras Pranckevičius’ website&lt;/a&gt;, which seems
to be working, even though not perfectly:&lt;/p&gt;
&lt;img alt="Noisy float to RGBA encoding" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/noisy%20kde.png" /&gt;
&lt;p&gt;As you can see, this implementation is &lt;em&gt;really noisy&lt;/em&gt;. I think this has to deal with floating point rounding errors, so to try to mitigate
that, I experimented applying a &lt;em&gt;13x13 gaussian blur&lt;/em&gt; to it. Below, what I got from that:&lt;/p&gt;
&lt;img alt="Blurred KDE result" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/blurred_kde.png" /&gt;
&lt;p&gt;That looks way better, even though not ideal yet.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Talking with my mentors, we decided it was better if I focused on the version without the renormalization for now, as it was already
done and running fine. So for this week, I plan to clean my PR to finally have it ready for a first review, and maybe add to it a little
UI tool to control the intensity of the densities. That should take me some time and discussion, but I hope for it to be ready by the
end of the week.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-31-week-9-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! Today, I am going to update you on my project’s latest changes.</summary>
    <category term="google" label="google"/>
    <published>2023-07-31T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-29-week-9-praneeth.html</id>
    <title>Week 9: TextBlock2D is Finally Merged!</title>
    <updated>2023-07-29T00:00:00+00:00</updated>
    <author>
      <name>Praneeth Shetty</name>
    </author>
    <content type="html">&lt;section id="week-9-textblock2d-is-finally-merged"&gt;

&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;p&gt;Continuing from the previous week, it seemed like we were almost done with the &lt;em&gt;TextBlock2D&lt;/em&gt;, but there remained a final task of addressing conflicting issues. Being a core part of the UI, &lt;em&gt;TextBlock2D&lt;/em&gt; had a few compatibility problems with certain other UI elements.&lt;/p&gt;
&lt;p&gt;The default behavior of &lt;em&gt;TextBox2D&lt;/em&gt; now includes a dynamic bounding box, which scales automatically based on the contained text. Users can customize this option through a simple flag setting. However, this change affected some UI elements like &lt;em&gt;Combobox2d&lt;/em&gt;, which relied on the default textbox size. Consequently, I had to make updates to ensure compatibility. Additionally, the default initialization of the &lt;em&gt;TextBlock2D&lt;/em&gt; was completely static, which led to the possibility of the text extending beyond the background and failing certain tests. To tackle this, I made adjustments to the overflow helper function in the &lt;em&gt;test_elements.py&lt;/em&gt; file. After a few tweaks and issue resolutions, the PR was ready for review and was successfully merged after passing the review process.&lt;/p&gt;
&lt;img alt="TextBlock2D with different attributes" class="align-center" src="https://user-images.githubusercontent.com/64432063/258603191-d540105a-0612-450e-8ae3-ca8aa87916e6.gif" /&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;I encountered some peculiar test failures that were indirectly related to the &lt;em&gt;TextBlock2D&lt;/em&gt; which at first glance didn’t came up. Although after some debugging and a thorough line-by-line analysis, I managed to identify and resolve them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;My next priority will be completing the &lt;em&gt;SpinBoxUI&lt;/em&gt; now that the &lt;em&gt;TextBlock2D&lt;/em&gt; is fixed and successfully integrated.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-29-week-9-praneeth.html" rel="alternate"/>
    <summary>Continuing from the previous week, it seemed like we were almost done with the TextBlock2D, but there remained a final task of addressing conflicting issues. Being a core part of the UI, TextBlock2D had a few compatibility problems with certain other UI elements.</summary>
    <category term="google" label="google"/>
    <published>2023-07-29T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-25-week-8-tvcastillod.html</id>
    <title>Week 8: Working on Ellipsoid Tutorial and exploring SH</title>
    <updated>2023-07-25T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;section id="week-8-working-on-ellipsoid-tutorial-and-exploring-sh"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;I mainly worked on the ellipsoid actor tutorial, as &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/791"&gt;PR #791&lt;/a&gt; is finally merged, so I was able to complete the tutorial by adding my implementation. In addition, during the weekly meeting, I received a good overview of the next issue I will be working on, which is using raymarching SDFs to display spherical harmonics (SH) for visualizing ODF glyphs for DTI. I got several ideas and resources which I can start experimenting with, such as &lt;a class="reference external" href="https://www.shadertoy.com/results?query=Spherical+Harmonics"&gt;Shadertoy&lt;/a&gt; and some base implementations from other FURY contributors. The main drawback when creating these objects is the amount of data required to create them, because depending on the SH order, the number of parameters that the function receives may vary, also unlike the tensors, which are represented only with a 3x3 matrix, here we could have more than 9 values associated with a single glyph, so passing the information from python to the shaders is not so trivial, besides requiring more resources as there is more information that needs to be processed. Some ideas I received were using matrixes instead of vectors, using templating, or even using texture to pass the data. I started to explore these options further, as well as to review in more detail the existing implementations of SH with raymarching, in order to understand them better.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I currently have two PRs under review, so I will address the comments I receive and update them accordingly. I also will continue to explore and start working on the implementation of these objects so that I can start making adjustments and further discuss possible improvements to the implementation I will make.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;Fortunately, I did not encounter any drawbacks this week.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-25-week-8-tvcastillod.html" rel="alternate"/>
    <summary>I mainly worked on the ellipsoid actor tutorial, as PR #791 is finally merged, so I was able to complete the tutorial by adding my implementation. In addition, during the weekly meeting, I received a good overview of the next issue I will be working on, which is using raymarching SDFs to display spherical harmonics (SH) for visualizing ODF glyphs for DTI. I got several ideas and resources which I can start experimenting with, such as Shadertoy and some base implementations from other FURY contributors. The main drawback when creating these objects is the amount of data required to create them, because depending on the SH order, the number of parameters that the function receives may vary, also unlike the tensors, which are represented only with a 3x3 matrix, here we could have more than 9 values associated with a single glyph, so passing the information from python to the shaders is not so trivial, besides requiring more resources as there is more information that needs to be processed. Some ideas I received were using matrixes instead of vectors, using templating, or even using texture to pass the data. I started to explore these options further, as well as to review in more detail the existing implementations of SH with raymarching, in order to understand them better.</summary>
    <category term="google" label="google"/>
    <published>2023-07-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-24-week-8-joaodellagli.html</id>
    <title>Week 8: The Birth of a Versatile API</title>
    <updated>2023-07-24T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-8-the-birth-of-a-versatile-api"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! Today, I am going to tell you all about how is the KDE API development going, and
to show you the potential this holds for the future!&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;Last week I told you how I managed to render some KDE renders to the screen, both in 2D and 3D, as you may check by my last blogpost.
My new task was, as I had this example working, to start the API development. In a meeting with Bruno, one of my mentors, we debated
on how could this work, reaching two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Implement the KDE in a single, simple actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement a KDE rendering manager, as a class.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first one would have the advantage of being simple and pretty straightforward, as a user would only need to call the actor and have
it working on their hands, having the tradeoff of leaving some important steps for a clean API hidden and static. These steps I mention
are related to how this rendering works, as I have previously &lt;span class="xref std std-doc"&gt;showed you&lt;/span&gt;, it relies on post-processing effects,
which need an offscreen rendering, that for example are done by the &lt;em&gt;callback functions&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In short, these functions are instructions the user gives to the interactor to run inside the interaction loop. Inside FURY there are tree
types of callbacks passed to the window interactor:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Timer Callbacks&lt;/strong&gt;: Added to the window interactor, they are a set of instructions that will be called from time to time, with interval defined by the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Window Callbacks&lt;/strong&gt;: Added directly to the window, they are  a set of instructions called whenever an specific event is triggered.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interactor Callbacks&lt;/strong&gt;: Added to the window interactor, they are a set of instructions called whenever an specific interaction, for example a mouse left-click, is triggered.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this API, I will be using the &lt;em&gt;Interactor Callback&lt;/em&gt;, set by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;window.add_iren_callback()&lt;/span&gt;&lt;/code&gt; function, that will be called whenever a &lt;em&gt;Render&lt;/em&gt;
interaction is detected, and needs to be first passed to the onscreen manager.&lt;/p&gt;
&lt;p&gt;These details are more complicated, and would need, for example, for the user to pass the onscreen manager to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;actor.kde()&lt;/span&gt;&lt;/code&gt; function.
Also, in the case of a kde actor not being used anymore and being declared, the callback then passed would still exist inside the manager and
be called even when the kde actor is not on screen anymore, which is not ideal.&lt;/p&gt;
&lt;p&gt;Knowing these problems, we thought of a second option, that would have the advantage of not leaving those details and steps behind. It has
the tradeoff of maybe complicating things as it would need to be called after calling the effects manager, but as I will show you below,
it is not that complicated &lt;em&gt;at all&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I also reviewed my fellow GSoC contributors PR’s as well, PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/810"&gt;#810&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/803"&gt;#803&lt;/a&gt;. Bruno told me to take a look as well on &lt;a class="reference external" href="https://www.conventionalcommits.org"&gt;Conventional Commits&lt;/a&gt; , a way to standardize
commits by prefixes, so I did that as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Well, the implemented manager class is named &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EffectManager()&lt;/span&gt;&lt;/code&gt; and to initialize it you only need to pass the onscreen manager.
The onscreen manager is the standard FURY window manager you would use in a normal FURY-based program:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Onscreen manager setup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;

&lt;span class="n"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;onscreen_manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;effects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After that, to render a KDE calculation of points to the screen, you need only to call its &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;kde()&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colormap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;inferno&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Those last two are optional&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pass it to the onscreen manager scene:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And to start it, as usual:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As simple as that. This three lines of code output the same result as I showed you last week, this time, with different sigmas for each
point:&lt;/p&gt;
&lt;img alt="3D KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/3d_kde_gif.gif" /&gt;
&lt;p&gt;After having that working, I experimented beyond. See, as I previously said, we are dealing here with &lt;em&gt;post-processing effects&lt;/em&gt;, with KDE
being only one of the many existing ones, as this &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Video_post-processing"&gt;Wikipedia Page&lt;/a&gt; on post processing shows.
Knowing that, I tried one of the first filters I learned, the Laplacian one. This filter is, as its name hints, applying the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Discrete_Laplace_operator"&gt;Discrete Laplace Operator&lt;/a&gt; in an image. This filter shows sudden changes of value, a
good way to detect borders. The process is the same as the kde actor, requiring only the actor you want to apply the filter to.
Below, the result I got from applying that to a box actor:&lt;/p&gt;
&lt;img alt="Laplacian filter applied to a cube object." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/laplacian1.gif" /&gt;
&lt;p&gt;Something I found important to leave as an option was filter compositing. What if an user wanted to, for example, apply one laplacian filter
after another? Well, the example below shows that is possible as well:&lt;/p&gt;
&lt;img alt="Double laplacian application on the box actor." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/laplacian2.gif" /&gt;
&lt;p&gt;It still needs some tweaks and suffers from some bugs, but it works! Those represent important progress as it shows the versatility this
API may present. I have also already implemented &lt;cite&gt;grayscale&lt;/cite&gt; and &lt;cite&gt;3x3 gaussian blur&lt;/cite&gt; as well:&lt;/p&gt;
&lt;img alt="3x3 Gaussian Blur filter applied to a cube." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/gaussian_blur.png" /&gt;
&lt;img alt="Grayscale filter applied to a cube." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/grayscale.png" /&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;My plans for this week are to keep working and polishing the API, mainly the KDE part, so it can be ready for a first review.
When that is ready, I plan to experiment with more filters and make this more dynamic, maybe implementing a way to apply custom kernel
transformations, passed by the user, to the rendering process. This has been a really exciting journey and I am getting happy with the results!&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-24-week-8-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! Today, I am going to tell you all about how is the KDE API development going, and
to show you the potential this holds for the future!</summary>
    <category term="google" label="google"/>
    <published>2023-07-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-22-week-8-praneeth.html</id>
    <title>Week 8: Another week with TextBlockUI</title>
    <updated>2023-07-22T00:00:00+00:00</updated>
    <author>
      <name>Praneeth Shetty</name>
    </author>
    <content type="html">&lt;section id="week-8-another-week-with-textblockui"&gt;

&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;p&gt;This week, I delved deeper into the &lt;strong&gt;TextBlock2D&lt;/strong&gt; Bounding Box PR to address the challenges with tests and offsetting issues. In a pair programming session with my mentor, we discovered that the offsetting background problem stemmed from the dynamic nature of the bounding box. The issue arose when the &lt;strong&gt;RingSlider2D&lt;/strong&gt; component began with an initial text size larger than the current text, which changed as the value was adjusted between 0-100%. This resulted in problems with offsetting and shrinking the bounding box. To resolve this, we decided to make the dynamic bounding box an optional feature.&lt;/p&gt;
&lt;p&gt;Now, the &lt;strong&gt;TextBlock2D&lt;/strong&gt; component offers three main features:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Completely static background&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamic bounding box scaled according to the text&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Font scaling based on the bounding box&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After tweaking and testing, all the features work seamlessly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;The pair programming session with my mentor proved to be immensely helpful, as it guided me through the whole week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I will dedicate time to further enhancing the &lt;strong&gt;TreeUI&lt;/strong&gt;. My focus will be on updating tree nodes and ensuring proper node positioning during movement.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-22-week-8-praneeth.html" rel="alternate"/>
    <summary>This week, I delved deeper into the TextBlock2D Bounding Box PR to address the challenges with tests and offsetting issues. In a pair programming session with my mentor, we discovered that the offsetting background problem stemmed from the dynamic nature of the bounding box. The issue arose when the RingSlider2D component began with an initial text size larger than the current text, which changed as the value was adjusted between 0-100%. This resulted in problems with offsetting and shrinking the bounding box. To resolve this, we decided to make the dynamic bounding box an optional feature.</summary>
    <category term="google" label="google"/>
    <published>2023-07-22T00:00:00+00:00</published>
  </entry>
</feed>
