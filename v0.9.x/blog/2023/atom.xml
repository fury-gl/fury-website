<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://fury.gl/</id>
  <title>Blog - Posted in 2023</title>
  <updated>2024-02-23T17:36:42.808046+00:00</updated>
  <link href="https://fury.gl/"/>
  <link href="https://fury.gl/blog/2023/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.6">ABlog</generator>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-24-week-12-tvcastillod.html</id>
    <title>Week 12 : Experimenting with ODFs implementation</title>
    <updated>2023-08-24T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;section id="week-12-experimenting-with-odfs-implementation"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;There were different issues I needed to address for the ODF implementation. Even though I could not solve any of them completely, I did check each of the issues and made some progress. All the work in progress is being recorded in the following branch &lt;a class="reference external" href="https://github.com/tvcastillod/fury/tree/SH-for-ODF-impl"&gt;SH-for-ODF-impl&lt;/a&gt;, which when ready will be associated with a well-structured PR.&lt;/p&gt;
&lt;p&gt;First, about the scaling, I was suggested to check Generalized Fractional Anisotropy &lt;strong&gt;gfa&lt;/strong&gt; metric to adjust the scaling depending on the shape of the ODF glyph, i.e., the less the &lt;strong&gt;gfa&lt;/strong&gt; the more sphere-shaped and smaller, so I had to associate a greater scaling for those. However, this did not work very well as I was unable to define an appropriate scale relation that would give an equitable result for each glyph. For this reason, I opted to use peak values which are extracted from the ODFs, setting the scales as 1/peak_value*0.4 and I got a more uniformly sized glyph without the need of setting it manually. That is a temporal solution as I would like to see better why this happens and if possible do the adjustment inside the shader instead of a precalculation.&lt;/p&gt;
&lt;p&gt;Second, for the direction, I made a small adjustment to the spherical coordinates which affected the direction of the ODF glyph. As you can see below,&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/263122770-b9ee19d2-d82b-4d7f-a5bb-1cbbf5907049.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/263122770-b9ee19d2-d82b-4d7f-a5bb-1cbbf5907049.png" style="width: 400px;" /&gt;
&lt;p&gt;All the glyphs are aligned over the y-axis but not over the z-axis, to correct this I precalculated the main direction of each glyph using peaks and passed it to the shader as a &lt;em&gt;vec3&lt;/em&gt;, then used &lt;em&gt;vec2vecrotmat&lt;/em&gt; to align the main axis vector of the ODF to the required direction vector, the only problem with this is that not all the glyps are equally aligned to the axis, i.e., the first 3 glyphs are aligned with the x-axis but the last one is aligned with the y-axis, so the final rotation gives a different result for that one.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/263122752-b2aa696f-62a5-4b09-b8dd-0cb1ec49431c.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/263122752-b2aa696f-62a5-4b09-b8dd-0cb1ec49431c.png" style="width: 400px;" /&gt;
&lt;p&gt;As with the first small adjustment of the coordinates the direction was partially correct, I need to double check the theta, phi and r definitions to see if I can get the right direction without the need of the additional data of direction. Also, there might be a way to get the specific rotation angles associated to each individual glyph from the data associated with the ODFs.&lt;/p&gt;
&lt;p&gt;Third, about passing the coefficients data through textures, I understand better now how to pass textures to the shaders but I still have problems understanding how to retrieve the data inside the shader. I used &lt;a class="reference external" href="https://github.com/fury-gl/fury/blob/master/docs/experimental/viz_shader_texture.py"&gt;this base implementation&lt;/a&gt;, suggested by one of my mentors, to store the data as a &lt;a class="reference external" href="http://www.khronos.org/opengl/wiki/Cubemap_Texture#:~:text=A%20Cubemap%20Texture%20is%20a,the%20value%20to%20be%20accessed."&gt;texture cubemap&lt;/a&gt;, “a texture, where each mipmap level consists of six 2D images which must be square. The 6 images represent the faces of a cube”. I had 4x15 coefficients and inside the function, a grid of RGB colors is made so then it can be mapped as a texture. To check if was passing the data correctly, I used the same value, .5, for all the textures, so then I could pick a random texel get a specific color (gray), and pass it as &lt;em&gt;fragOutput0&lt;/em&gt; to see if the value was correct. However, it didn’t appear to work correctly as I couldn’t get the expected color. To get the specific color I used &lt;a class="reference external" href="https://registry.khronos.org/OpenGL-Refpages/gl4/html/texture.xhtml"&gt;texture(sampler, P)&lt;/a&gt; which samples texels from the texture bound to sampler at texture coordinate P. Now, what I still need to figure out is which should be the corresponding texture coordinate. I have tried with random coordinates, as they are supposed to correspond to a point on the cube and since the information I have encoded in the texture is all the same, I assumed that I would get the expected result for any set of values. It might be a problem with the data normalization, or maybe there is something failing on the texture definition, but I need to review it in more detail to see where is the problem.&lt;/p&gt;
&lt;p&gt;Lastly, about the colormapping, I created the texture based on a generic colormap from &lt;a class="reference external" href="https://matplotlib.org/stable/tutorials/colors/colormaps.html"&gt;matplotlib&lt;/a&gt;. I was able to give some color to the glyph but it does not match correctly its shape. Some adjustment must be done regarding the texels, as the colormap is mapped on a cube, but I need it to fit the shape of the glyph correctly.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/263122760-7d1fff5e-7787-473c-8053-ea69f3009fb4.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/263122760-7d1fff5e-7787-473c-8053-ea69f3009fb4.png" style="width: 250px;" /&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I will continue to explore more on how to handle textures so I can solve the issues related to the coefficient data and colormapping. Also, take a deeper look at the SH implementation and check what is the information needed to adjust the main direction of the ODF correctly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;As I mentioned I had some drawbacks in understanding the use of textures and how to retrieve the data inside the shaders. This is a topic that might take some time to manage properly but if I can master it and understand it better, it is a tool that can be useful later. Additionally, there are details of the SH implementation that I still need to understand and explore better in order to make sure I get exactly the same result as the current &lt;em&gt;odf_slicer&lt;/em&gt; implementation.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-24-week-12-tvcastillod.html"/>
    <summary>There were different issues I needed to address for the ODF implementation. Even though I could not solve any of them completely, I did check each of the issues and made some progress. All the work in progress is being recorded in the following branch SH-for-ODF-impl, which when ready will be associated with a well-structured PR.</summary>
    <category term="google" label="google"/>
    <published>2023-08-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-24-final-report-tvcastillod.html</id>
    <title>Google Summer of Code Final Work Product</title>
    <updated>2023-08-24T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/projects/ymwnLwtT"&gt;&lt;img alt="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" class="align-center" height="50" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/organizations/python-software-foundation"&gt;&lt;img alt="https://www.python.org/static/community_logos/python-logo.png" src="https://www.python.org/static/community_logos/python-logo.png" style="width: 40%;" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://fury.gl/latest/index.html"&gt;&lt;img alt="https://python-gsoc.org/logos/FURY.png" src="https://python-gsoc.org/logos/FURY.png" style="width: 25%;" /&gt;&lt;/a&gt;
&lt;section id="google-summer-of-code-final-work-product"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Tania Castillo&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organisation:&lt;/strong&gt; Python Software Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sub-Organisation:&lt;/strong&gt; FURY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/fury-gl/fury/wiki/Google-Summer-of-Code-2023-(GSOC2023)#project-3-sdf-based-uncertainty-representation-for-dmri-glyphs"&gt;SDF-based uncertainty representation for dMRI glyphs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Diffusion Magnetic Resonance Imaging (dMRI) is a non-invasive imaging technique used by neuroscientists to measure the diffusion of water molecules in biological tissue. The directional information is reconstructed using either a Diffusion Tensor Imaging (DTI) or High Angular Resolution Diffusion Imaging (HARDI) based model, which is graphically represented as tensors and Orientation Distribution Functions (ODF). Traditional rendering engines discretize Tensor and ODF surfaces using triangles or quadrilateral polygons, making their visual quality depending on the number of polygons used to build the 3D mesh, which might compromise real-time display performance. This project proposes a methodological approach to further improve the visualization of DTI tensors and HARDI ODFs glyphs by using well-established techniques in the field of computer graphics, such as geometry amplification, billboarding, signed distance functions (SDFs), and ray marching.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="proposed-objectives"&gt;
&lt;h2&gt;Proposed Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Implement a parallelized version of computer-generated billboards using geometry shaders for amplification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Model the mathematical functions that express the geometry of ellipsoid glyphs and implement them using Ray Marching techniques.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Model the mathematical functions that express the geometry of ODF glyphs and implement them using Ray Marching techniques.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use SDF properties and techniques to represent the uncertainty of dMRI reconstruction models.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-completed"&gt;
&lt;h2&gt;Objectives Completed&lt;/h2&gt;
&lt;section id="ellipsoid-actor-implemented-with-sdf"&gt;
&lt;h3&gt;Ellipsoid actor implemented with SDF&lt;/h3&gt;
&lt;p&gt;A first approach for tensor glyph generation has been made, using ray marching and SDF applied to a box. The current implementation (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tensor_slicer&lt;/span&gt;&lt;/code&gt;) requires a sphere with a specific number of vertices to be deformed. Based on this model, a sphere with more vertices is needed to get a higher resolution. Because the ray marching technique does not use polygonal meshes, it is possible to define perfectly smooth surfaces and still obtain a fast rendering.&lt;/p&gt;
&lt;p&gt;Details of the implementation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Vertex shader pre-calculations&lt;/em&gt;: Some minor calculations are done in the vertex shader. One, corresponding to the eigenvalues constraining and min-max normalization, are to avoid incorrect visualizations when the difference between the eigenvalues is too large. And the other is related to the tensor matrix calculation given by the diffusion tensor definition &lt;span class="math notranslate nohighlight"&gt;\(T = R^{−1}\Lambda R\)&lt;/span&gt;, where &lt;span class="math notranslate nohighlight"&gt;\(R\)&lt;/span&gt; is a rotation matrix that transforms the standard basis onto the eigenvector basis, and &lt;span class="math notranslate nohighlight"&gt;\(\Lambda\)&lt;/span&gt; is the diagonal matrix of eigenvalues &lt;a class="footnote-reference brackets" href="#id10" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Ellipsoid SDF definition&lt;/em&gt;: The definition of the SDF is done in the fragment shader inside the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt; function, which is used later for the ray marching algorithm and the normals calculation. We define the SDF more simply by transforming a sphere into an ellipsoid, considering that the SDF of a sphere is easily computed and the definition of a tensor gives us a linear transformation of a given geometry. Also, as scaling is not a rigid body transformation, we multiply the final result by a factor to compensate for the difference, which gave us the SDF of the ellipsoid defined as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sdSphere(tensorMatrix&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;(position&lt;/span&gt; &lt;span class="pre"&gt;-&lt;/span&gt; &lt;span class="pre"&gt;centerMCVSOutput),&lt;/span&gt; &lt;span class="pre"&gt;scaleVSOutput*0.48)&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;scFactor&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Ray marching algorithm and lighting&lt;/em&gt;: For the ray marching algorithm, a small value of 20 was taken as the maximum distance since we apply the technique to each individual object and not all at the same time. Additionally, we set the convergence precision to 0.001. We use the central differences method to compute the normals necessary for the scene’s illumination, besides the Blinn-Phong lighting technique, which is high-quality and computationally cheap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Visualization example&lt;/em&gt;: Below is a detailed visualization of the ellipsoids created from this new implementation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/244503195-a626718f-4a13-4275-a2b7-6773823e553c.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/244503195-a626718f-4a13-4275-a2b7-6773823e553c.png" style="width: 376px;" /&gt;
&lt;p&gt;This implementation does show a better quality in the displayed glyphs, and supports the display of a large amount of data, as seen in the image below. For this reason, a tutorial was made to justify in more detail the value of this new implementation. Below are some images generated for the tutorial.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260906510-d422e7b4-3ba3-4de6-bfd0-09c04bec8876.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260906510-d422e7b4-3ba3-4de6-bfd0-09c04bec8876.png" style="width: 600px;" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ellipsoid actor implemented with SDF (Merged)&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/791"&gt;fury-gl/fury#791&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tutorial on using ellipsoid actor to visualize tensor ellipsoids for DTI (Merged)&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/818"&gt;fury-gl/fury#818&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Future work:&lt;/strong&gt; In line with one of the initial objectives, it is expected to implement billboards later on to improve the performance, i.e., higher frame rate and less memory usage for the tensor ellipsoid creation. In addition to looking for ways to optimize the naive ray marching algorithm and the definition of SDFs.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="objectives-in-progress"&gt;
&lt;h2&gt;Objectives in Progress&lt;/h2&gt;
&lt;section id="dti-uncertainty-visualization"&gt;
&lt;h3&gt;DTI uncertainty visualization&lt;/h3&gt;
&lt;p&gt;The DTI visualization pipeline is fairly complex, as a level of uncertainty arises, which, if visualized, helps to assess the model’s accuracy. This measure is not currently implemented, and even though there are several methods to calculate and visualize the uncertainty in the DTI model, because of its simplicity and visual representation, we considered Matrix Perturbation Analysis (MPA) proposed by Basser &lt;a class="footnote-reference brackets" href="#id7" id="id2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. This measurement is visualized as double cones representing the variance of the main direction of diffusion, for which the ray marching technique was also used to create these objects.&lt;/p&gt;
&lt;p&gt;Details of the implementation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Source of uncertainty&lt;/em&gt;: The method of MPA arises from the susceptibility of DTI to dMRI noise present in diffusion-weighted images (DWIs), and also because the model is inherently statistical, making the tensor estimation and other derived quantities to be random variables &lt;a class="footnote-reference brackets" href="#id7" id="id3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. For this reason, this method focus on the premise that image noise produces a random perturbation in the diffusion tensor estimation, and therefore in the calculation of eigenvalues and eigenvectors, particularly in the first eigenvector associated with the main diffusion direction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Mathematical equation&lt;/em&gt;: The description of the perturbation of the principal eigenvector is given by math formula where &lt;span class="math notranslate nohighlight"&gt;\(\Delta D\)&lt;/span&gt; corresponds to the estimated perturbation matrix of &lt;span class="math notranslate nohighlight"&gt;\(D\)&lt;/span&gt; given by the diagonal elements of the covariance matrix &lt;span class="math notranslate nohighlight"&gt;\(\Sigma_{\alpha} \approx (B^T\Sigma^{−1}_{e}B)^{−1}\)&lt;/span&gt;, where &lt;span class="math notranslate nohighlight"&gt;\(\Sigma_{e}\)&lt;/span&gt; is the covariance matrix of the error e, defined as a diagonal matrix made with the diagonal elements of &lt;span class="math notranslate nohighlight"&gt;\((\Sigma^{−1}_{e}) = ⟨S(b)⟩^2 / \sigma^{2}_{\eta}\)&lt;/span&gt;. Then, to get the angle &lt;span class="math notranslate nohighlight"&gt;\(\theta\)&lt;/span&gt; between the perturbed principal eigenvector of &lt;span class="math notranslate nohighlight"&gt;\(D\)&lt;/span&gt;, &lt;span class="math notranslate nohighlight"&gt;\(\varepsilon_1 + \Delta\varepsilon_1\)&lt;/span&gt;, and the estimated eigenvector &lt;span class="math notranslate nohighlight"&gt;\(\varepsilon_1\)&lt;/span&gt;, it can be approximated by &lt;span class="math notranslate nohighlight"&gt;\(\theta = \tan^{−1}( \| \Delta\varepsilon_1 \|)\)&lt;/span&gt; &lt;a class="footnote-reference brackets" href="#id8" id="id4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. Taking into account the above, we define the function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;main_dir_uncertainty(evals,&lt;/span&gt; &lt;span class="pre"&gt;evecs,&lt;/span&gt; &lt;span class="pre"&gt;signal,&lt;/span&gt; &lt;span class="pre"&gt;sigma,&lt;/span&gt; &lt;span class="pre"&gt;b_matrix)&lt;/span&gt;&lt;/code&gt; that calculates the uncertainty of the eigenvector associated to the main direction of diffusion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Double cone SDF definition&lt;/em&gt;: The final SDF is composed by the union of 2 separately cones using the definition taken from this list of &lt;a class="reference external" href="https://iquilezles.org/articles/distfunctions/#:~:text=Cone%20%2D%20exact,sign(s)%3B%0A%7D"&gt;distance functions&lt;/a&gt;, in this way we have the SDF for the double cone defined as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;opUnion(sdCone(p,a,h),&lt;/span&gt; &lt;span class="pre"&gt;sdCone(-p,a,h))&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;scaleVSOutput&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Visualization example&lt;/em&gt;: Below is a demo of how this new feature is intended to be used, an image of diffusion tensor ellipsoids and their associated uncertainty cones.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/254747296-09a8674e-bfc0-4b3f-820f-8a1b1ad8c5c9.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/254747296-09a8674e-bfc0-4b3f-820f-8a1b1ad8c5c9.png" style="width: 610px;" /&gt;
&lt;p&gt;The implementation is almost complete, but as it is a new addition that includes mathematical calculations and for which there is no direct reference for comparison, it requires a more detail review before it can be incorporated.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Request:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DTI uncertainty visualization (Under Review)&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/810"&gt;fury-gl/fury#810&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Future work:&lt;/strong&gt; A tutorial will be made explaining in more detail how to calculate the parameters needed for the uncertainty cones using &lt;strong&gt;dipy&lt;/strong&gt; functions, specifically: &lt;a class="reference external" href="https://github.com/dipy/dipy/blob/321e06722ef42b5add3a7f570f6422845177eafa/dipy/denoise/noise_estimate.py#L272"&gt;estimate_sigma&lt;/a&gt; for the noise variance calculation, &lt;a class="reference external" href="https://github.com/dipy/dipy/blob/321e06722ef42b5add3a7f570f6422845177eafa/dipy/reconst/dti.py#L2112"&gt;design_matrix&lt;/a&gt; to get the b-matrix, and &lt;a class="reference external" href="https://github.com/dipy/dipy/blob/321e06722ef42b5add3a7f570f6422845177eafa/dipy/reconst/dti.py#L639"&gt;tensor_prediction&lt;/a&gt; for the signal estimation. Additionally, when the ODF implementation is complete, uncertainty for this other reconstruction model is expected to be added, using semitransparent glyphs representing the mean directional information proposed by Tournier &lt;a class="footnote-reference brackets" href="#id9" id="id5" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="odf-actor-implemented-with-sdf"&gt;
&lt;h3&gt;ODF actor implemented with SDF&lt;/h3&gt;
&lt;p&gt;HARDI-based techniques require more images than DTI, however, they model the diffusion directions as probability distribution functions (PDFs), and the fitted values are returned as orientation distribution functions (ODFs). ODFs are more diffusion sensitive than the diffusion tensor and, therefore, can determine the structure of multi-directional voxels very common in the white matter regions of the brain &lt;a class="footnote-reference brackets" href="#id9" id="id6" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. The current actor to display this kind of glyphs is the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;odf_slicer&lt;/span&gt;&lt;/code&gt; which, given an array of spherical harmonics (SH) coefficients renders a grid of ODFs, which are created from a sphere with a specific number of vertices that fit the data.&lt;/p&gt;
&lt;p&gt;For the application of this model using the same SDF ray marching techniques, we need the data of the SH coefficients, which are used to calculate the orientation distribution function (ODF) described &lt;a class="reference external" href="https://dipy.org/documentation/1.7.0/theory/sh_basis/"&gt;here&lt;/a&gt;. Different SH bases can be used, but for this first approach we focus on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;descoteaux07&lt;/span&gt;&lt;/code&gt; (as labeled in dipy). After performing the necessary calculations, we obtain an approximate result of the current implementation of FURY, as seen below.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260909561-fd90033c-018a-465b-bd16-3586bb31ca36.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260909561-fd90033c-018a-465b-bd16-3586bb31ca36.png" style="width: 580px;" /&gt;
&lt;p&gt;With a first implementation we start to solve some issues related to direction, color, and data handling, to obtain exactly the same results as the current implementation.&lt;/p&gt;
&lt;p&gt;Details on the issues:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;The direction and the scaling&lt;/em&gt;: When the shape of the ODF is more sphere-like, the size of the glyph is smaller, so for the moment it needs to be adjusted manually, but the idea is to find a relationship between the coefficients and the final object size so it can be automatically scaled. Additionally, as seen in the image, the direction does not match. To fix this, an adjustment in the calculation of the spherical coordinates can be made, or pass the direction information directly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Pass the coefficients data efficiently&lt;/em&gt;: I’m currently creating one actor per glyph since I’m using a &lt;em&gt;uniform&lt;/em&gt; array to pass the coefficients, but the idea is to pass all the data simultaneously. The first idea is to encode the coefficients data through a texture and retrieve them in the fragment shader.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;The colormapping and the lighting&lt;/em&gt;: As these objects present curvatures with quite a bit of detail in some cases, this requires more specific lighting work, in addition to having now not only one color but a color map. This can also be done with texture, but it is necessary to see in more detail how to adjust the texture to the glyph’s shape.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More details on current progress can be seen in blogpost of &lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-16-week-11-tvcastillod.html"&gt;week 11&lt;/a&gt; and &lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-24-week-12-tvcastillod.html"&gt;week 12&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Working branch:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ODF implementation (Under Development)&lt;/strong&gt;
&lt;a class="github reference external" href="https://github.com/tvcastillod/fury/tree/SH-for-ODF-impl"&gt;tvcastillod/fury&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="gsoc-weekly-blogs"&gt;
&lt;h2&gt;GSoC Weekly Blogs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;My blog posts can be found on the &lt;a class="reference external" href="https://fury.gl/latest/blog/author/tania-castillo.html"&gt;FURY website&lt;/a&gt; and the &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/"&gt;Python GSoC blog&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Date&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Blog Post Link&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 0(02-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Community Bounding Period&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-02-week-0-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-0-2"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 1(05-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Ellipsoid actor implemented with SDF&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-05-week-1-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-1-23"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 2(12-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Making adjustments to the Ellipsoid Actor&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-12-week-2-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-2-18"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 3(19-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Working on uncertainty and details of the first PR&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-19-week-3-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-3-27"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 4(27-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;First draft of the DTI uncertainty visualization&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-27-week-4-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-4-24"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 5(03-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Preparing the data for the Ellipsoid tutorial&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-03-week-5-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-5-27"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 6(10-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;First draft of the Ellipsoid tutorial&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-10-week-6-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-6-26"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 7(17-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Adjustments on the Uncertainty Cones visualization&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-17-week-7-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-7-26"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 8(25-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Working on Ellipsoid Tutorial and exploring SH&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-25-week-8-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-8-17"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 9(31-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Tutorial done and polishing DTI uncertainty&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-31-week-9-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-9-22"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 10(08-08-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Start of SH implementation experiments&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-08-week-10-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-10-16"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 11(16-08-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Adjusting ODF implementation and looking for solutions on issues found&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-16-week-11-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-11-17"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 12(24-08-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Experimenting with ODFs implementation&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-24-week-12-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-12-9"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
&lt;section id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="id7" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="backrefs"&gt;(&lt;a role="doc-backlink" href="#id2"&gt;1&lt;/a&gt;,&lt;a role="doc-backlink" href="#id3"&gt;2&lt;/a&gt;)&lt;/span&gt;
&lt;p&gt;Basser, P. J. (1997). Quantifying errors in fiber direction and diffusion tensor field maps resulting from MR noise. In 5th Scientific Meeting of the ISMRM (Vol. 1740).&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="id8" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id4"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Chang, L. C., Koay, C. G., Pierpaoli, C., &amp;amp; Basser, P. J. (2007). Variance of estimated DTI‐derived parameters via first‐order perturbation methods. Magnetic Resonance in Medicine: An Official Journal of the International Society for Magnetic Resonance in Medicine, 57(1), 141-149.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="id9" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="backrefs"&gt;(&lt;a role="doc-backlink" href="#id5"&gt;1&lt;/a&gt;,&lt;a role="doc-backlink" href="#id6"&gt;2&lt;/a&gt;)&lt;/span&gt;
&lt;p&gt;J-Donald Tournier, Fernando Calamante, David G Gadian, and Alan Connelly. Direct estimation of the fiber orientation density function from diffusion-weighted mri data using spherical deconvolution. Neuroimage, 23(3):1176–1185, 2004.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="id10" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Gordon Kindlmann. Superquadric tensor glyphs. In Proceedings of the Sixth Joint Eurographics-IEEE TCVG conference on Visualization, pages 147–154, 2004.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-24-final-report-tvcastillod.html"/>
    <summary>Name: Tania Castillo</summary>
    <category term="google" label="google"/>
    <published>2023-08-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-21-week-12-joaodellagli.html</id>
    <title>Week 12: Now That is (almost) a Wrap!</title>
    <updated>2023-08-21T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-12-now-that-is-almost-a-wrap"&gt;

&lt;p&gt;Hello everyone, it’s time for another GSoC blogpost! Today, I am going to talk about some minor details I worked on last week on my
project.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After the API refactoring was done last week, I focused on addressing the reviews I would get from it. The first issues I addressed was related to
style, as there were some minor details my GSoC contributors pointed out that needed change. Also, I have addressed an issue I was having
with the &lt;cite&gt;typed hint&lt;/cite&gt; of one of my functions. Filipi, my mentor, showed me there is a way to have more than one typed hint in the same parameter,
all I needed to do was to use the &lt;cite&gt;Union&lt;/cite&gt; class from the &lt;cite&gt;typing&lt;/cite&gt; module, as shown below:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tUnion&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ndarray&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tUnion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
   &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using that, I could set the typedhint of the &lt;cite&gt;bandwidth&lt;/cite&gt; variable to &lt;cite&gt;float&lt;/cite&gt; and &lt;cite&gt;np.ndarray&lt;/cite&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;All went fine with no difficult at all, thankfully.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-next-steps"&gt;
&lt;h2&gt;The Next Steps&lt;/h2&gt;
&lt;p&gt;My next plans are, after having PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;#826&lt;/a&gt; merged, to work on the float encoding issue described in
&lt;span class="xref std std-doc"&gt;this blogpost&lt;/span&gt;. Also, I plan to tackle the UI idea once again, to see if I can finally give the user
a way to control the intensities of the distributions.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-21-week-12-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another GSoC blogpost! Today, I am going to talk about some minor details I worked on last week on my
project.</summary>
    <category term="google" label="google"/>
    <published>2023-08-21T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-19-week-12-praneeth.html</id>
    <title>Week 12: FileDialog Quest Begins!</title>
    <updated>2023-08-19T00:00:00+00:00</updated>
    <author>
      <name>Praneeth Shetty</name>
    </author>
    <content type="html">&lt;section id="week-12-filedialog-quest-begins"&gt;

&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;p&gt;During this week, I initiated my work on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; PR, which had been started by Soham. The initial version of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; can be found at &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/294"&gt;#294&lt;/a&gt;. To start, I focused on rebasing the PR. Since this PR was based on an older version, there were some updates to the overall UI structure that needed to be addressed for compatibility. While handling this, I identified a set of issues that I documented in the current PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/832"&gt;#832&lt;/a&gt;. These mainly revolved around:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Resizing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; and related components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rectifying the text overflow problem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dealing with a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ZeroDivisionError&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixing the positioning of items in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ListBox2D&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I systematically approached each of these challenges:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resizing FileMenu and Related Components:&lt;/strong&gt; This was a fairly complex task since it involved intricate dependencies, such as the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; relying on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileMenu&lt;/span&gt;&lt;/code&gt;, which, in turn, was dependent on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ListBox2D&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Panel2D&lt;/span&gt;&lt;/code&gt; resizing. To make the process manageable, I decided to progress incrementally in a separate PR a bit later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Text Overflow Issue:&lt;/strong&gt; The problem with text overflow was rooted in our previous approach, which involved executing these actions only when the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt; had a scene property. Although this approach suited the previous version of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;, the recent refactoring led to the removal of this property. The scene was previously utilized to determine the text actor’s size. However, we had new methodologies to calculate these sizes, which are detailed in &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/803"&gt;#803&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="Text Overflow Before" class="align-center" src="https://github.com/fury-gl/fury/assets/64432063/b001f9d3-a5e8-45ad-8605-85df595b5654" /&gt;
&lt;img alt="Text Overflow After" class="align-center" src="https://github.com/fury-gl/fury/assets/64432063/d3c9c3a3-e601-45ab-8975-2b1e98acf1d3" /&gt;
&lt;p&gt;&lt;strong&gt;Addressing ZeroDivisionError:&lt;/strong&gt; The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ZeroDivisionError&lt;/span&gt;&lt;/code&gt; emerged when the total number of values was the same as the number of slots. The issue lay in the separation of these values for calculating the scrollbar’s height parameter. Unfortunately, this calculation error occurred when this would return us zero while updating the scrollbar. To counter this, I implemented a conditional check to ascertain whether the value is zero or not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Correcting ``ListBox2D`` Item Positioning:&lt;/strong&gt; Another challenge I encountered related to the improper positioning of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ListBox2D&lt;/span&gt;&lt;/code&gt; item’s background. When a slot was not visible, its background was resized to zero, and visibility was set to off. Consequently, during the calculation of updated positions, the height was considered zero, leading to mispositioning. I resolved this by refraining from resizing and solely toggling visibility, achieving the desired result.&lt;/p&gt;
&lt;img alt="ListBox2D mispositioning Before" class="align-center" src="https://github.com/fury-gl/fury/assets/64432063/e2805934-b037-47fd-872c-0b284b298d3c" /&gt;
&lt;img alt="Fixed ListBox2D mispositioning" class="align-center" src="https://github.com/fury-gl/fury/assets/64432063/3bc1aabb-bb79-4e26-817d-a2a2ddd20ea3" /&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;Among the challenges I faced, one notable instance involved addressing the visibility issue in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeUI&lt;/span&gt;&lt;/code&gt;. Despite my attempts at various solutions, none yielded the desired outcome. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeUI&lt;/span&gt;&lt;/code&gt; exhibited either full visibility or no visibility at all. In this situation, I sought guidance from my mentor to find a viable solution.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; implementation is nearly finalized, and my plan is to work on any review, feedback or suggestions that might arise. Following this, I will shift my attention towards addressing the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeUI&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-19-week-12-praneeth.html"/>
    <summary>During this week, I initiated my work on the FileDialog PR, which had been started by Soham. The initial version of the FileDialog can be found at #294. To start, I focused on rebasing the PR. Since this PR was based on an older version, there were some updates to the overall UI structure that needed to be addressed for compatibility. While handling this, I identified a set of issues that I documented in the current PR #832. These mainly revolved around:</summary>
    <category term="google" label="google"/>
    <published>2023-08-19T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-16-week-11-tvcastillod.html</id>
    <title>Week 11 : Adjusting ODF implementation and looking for solutions on issues found</title>
    <updated>2023-08-16T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;section id="week-11-adjusting-odf-implementation-and-looking-for-solutions-on-issues-found"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;I continued to experiment with the ODF glyph implementation. Thanks to one of my mentors I figured out how to get the missing data corresponding to the SH coefficients &lt;span class="math notranslate nohighlight"&gt;\(a^l_m\)&lt;/span&gt; part of the function &lt;span class="math notranslate nohighlight"&gt;\(f(\theta, \phi)\)&lt;/span&gt; described &lt;a class="reference external" href="https://dipy.org/documentation/1.7.0/theory/sh_basis/"&gt;here&lt;/a&gt;. I also was told to make sure to implement the correct SH basis since there are different definitions from the literature, I have to focus now in the one proposed by Descoteaux, described in &lt;a class="reference external" href="https://onlinelibrary.wiley.com/doi/10.1002/mrm.21277"&gt;this paper&lt;/a&gt;, which is labeled in &lt;em&gt;dipy&lt;/em&gt; as &lt;em&gt;descoteaux07&lt;/em&gt;. To do this I had to make a small adjustment to the base implementation that I took as a reference, from which I obtained a first result using SH of order 4.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260909561-fd90033c-018a-465b-bd16-3586bb31ca36.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260909561-fd90033c-018a-465b-bd16-3586bb31ca36.png" style="width: 600px;" /&gt;
&lt;p&gt;It appears that the results on the shape are about the same, except for the direction, but there is still work to be done.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;For now, there are 3 things I will continue to work on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The color and lighting. As these objects present curvatures with quite a bit of detail in some cases, this is something that requires more specific lighting work, in addition to having now not only one color but a color map.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The scaling. This is something I still don’t know how to deal with. I had to adjust it manually for now, but the idea is to find a relationship between the coefficients and the final object size so it can be automatically scaled, or maybe there is a proper way to pre-process this data before passing it to the shaders to get the right result at once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-16-week-11-tvcastillod.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “here”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;How to pass the information of the coefficients efficiently. Right now I’m creating one actor per glyph since I’m using a uniform array to pass the coefficients, but the idea is to pass all the data at once. I found several ideas &lt;a class="reference external" href="https://stackoverflow.com/questions/7954927/passing-a-list-of-values-to-fragment-shader"&gt;here&lt;/a&gt; of how to pass a list of values to the fragment shader directly, I just need to explore deeper how this can be done on &lt;strong&gt;FURY&lt;/strong&gt;, and see which option is most suitable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;All the points mentioned above are things that I tried to fix, however, it is something that I need to look at in much more detail and that I know is going to take me some time to understand and test before I get to the expected result. I hope to get some ideas from my mentors and fellow GSoC contributors on how I can proceed to deal with each of the problems.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-16-week-11-tvcastillod.html"/>
    <summary>I continued to experiment with the ODF glyph implementation. Thanks to one of my mentors I figured out how to get the missing data corresponding to the SH coefficients a^l_m part of the function f(\theta, \phi) described here. I also was told to make sure to implement the correct SH basis since there are different definitions from the literature, I have to focus now in the one proposed by Descoteaux, described in this paper, which is labeled in dipy as descoteaux07. To do this I had to make a small adjustment to the base implementation that I took as a reference, from which I obtained a first result using SH of order 4.</summary>
    <category term="google" label="google"/>
    <published>2023-08-16T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-14-week-11-joaodellagli.html</id>
    <title>Week 11: A Refactor is Sometimes Needed</title>
    <updated>2023-08-14T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-11-a-refactor-is-sometimes-needed"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! Today I am going to share some updates on the API refactoring
I was working on with my mentors.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;As I shared with you &lt;span class="xref std std-doc"&gt;last week&lt;/span&gt;, the first draft of my API was finally ready for review, as
I finished tweaking some remaining details missing. I was tasked with finding a good example of the usage of the tools we proposed,
and I started to do that, however after testing it with some examples, I figured out some significant bugs were to be fixed. Also,
after some reviews and hints from some of my mentors and other GSoC contributors, we realised that some refactoring should be done,
mainly focused on avoiding bad API usage from the user.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Initially, I thought only one bug was the source of the issues the rendering presented, but it turned out to be two, which I will
explain further.&lt;/p&gt;
&lt;p&gt;The first bug was related to scaling and misalignment of the KDE render. The render of the points being post-processed was not only
with sizes different from the original set size, but it was also misaligned, making it appear in positions different from the points’
original ones. After some time spent, I figured out the bug was related to the texture coordinates I was using. Before, this is how
my fragment shader looked:&lt;/p&gt;
&lt;div class="highlight-C notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res_factor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tex_coords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res_factor&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;normalizedVertexMCVSOutput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;intensity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenTexture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tex_coords&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It turns out using this texture coordinates for &lt;em&gt;this case&lt;/em&gt; was not the best choice, as even though it matches the fragment positions,
the idea here was to render the offscreen window, which has the same size as the onscreen one, to the billboard actor. With that in mind,
I realised the best choice was using texture coordinates that matched the whole screen positions, coordinates that were derived from the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gl_FragCoord.xy&lt;/span&gt;&lt;/code&gt;, being the division of that by the resolution of the screen, for normalization. Below, the change made:&lt;/p&gt;
&lt;div class="highlight-C notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tex_coords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gl_FragCoord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;intensity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenTexture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tex_coords&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This change worked initially, although with some problems, that later revealed the resolution of the offscreen window needed to be
updated inside the callback function as well. Fixing that, it was perfectly aligned and scaled!&lt;/p&gt;
&lt;p&gt;The second bug was related with the handling of the bandwidth, former sigma parameter. I realised I wasn’t dealing properly with the option of the user passing only
one single bandwidth value being passed, so when trying that, only the first point was being rendered. I also fixed that and it worked,
so cheers!&lt;/p&gt;
&lt;p&gt;As I previously said, the bugs were not the only details I spent my time on last week. Being reviewed, the API design, even
though simple, showed itself vulnerable to bad usage from the user side, requiring some changes. The changes suggested by mentors were,
to, basically, take the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;kde&lt;/span&gt;&lt;/code&gt; method out of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EffectManager&lt;/span&gt;&lt;/code&gt; class, and create a new class from it inside an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;effects&lt;/span&gt;&lt;/code&gt; module,
like it was a special effects class. With this change, the KDE setup would go from:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;kde_actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;show_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;kde_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KDE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_effect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Not a gain in line shortening, however, a gain in security, as preventing users from misusing the kde_actor. Something worth noting is
that I learned how to use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;functools.partial&lt;/span&gt;&lt;/code&gt; function, that allowed me to partially call the callback function with only some
parameters passed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Having that refactoring made, now I am awaiting for a second review so we could finally wrap it up and merge the first stage of this API.
With that being done, I will write the final report and wrap this all up.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-14-week-11-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! Today I am going to share some updates on the API refactoring
I was working on with my mentors.</summary>
    <category term="google" label="google"/>
    <published>2023-08-14T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-12-week-11-praneeth.html</id>
    <title>Week 11: Bye Bye SpinBox</title>
    <updated>2023-08-12T00:00:00+00:00</updated>
    <author>
      <name>Praneeth Shetty</name>
    </author>
    <content type="html">&lt;section id="week-11-bye-bye-spinbox"&gt;

&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;p&gt;Building upon the progress of the previous week, a major milestone was reached with the merging of PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/830"&gt;#830&lt;/a&gt;. This PR added essential “getters” and “setters” for the new features of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock&lt;/span&gt;&lt;/code&gt;, making it easier to handle changes. This, in turn, facilitated the integration of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; with the updated &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, while working on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt;, a critical issue emerged. As &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; allows users to input characters and symbols into an editable textbox, it posed a risk of program crashes due to invalid inputs. To counter this, I introduced a validation check to ensure that the input was a valid number. If valid, the input was converted; otherwise, it reverted to the previous value. After thorough testing and review, PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/499"&gt;#499&lt;/a&gt; was successfully merged.&lt;/p&gt;
&lt;img alt="SpinBoxUI" class="align-center" src="https://user-images.githubusercontent.com/64432063/261409747-511e535b-185c-4e70-aaa8-5296c93e5344.gif" style="width: 500px;" /&gt;
&lt;p&gt;Meanwhile, a concern with the textbox’s behavior was identified when &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; was scaled to a larger size. Specifically, the text occasionally touched the top or bottom boundary, creating an overflow appearance. Although initial solutions were attempted, the complexity of the issue required further consideration. This issue has been documented in more detail in Issue &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/838"&gt;#838&lt;/a&gt;, where it is marked as a low-priority item.&lt;/p&gt;
&lt;figure class="align-center"&gt;
&lt;img alt="TextBlock2D text positioning issue" src="https://user-images.githubusercontent.com/64432063/133194003-53e2dac6-31e0-444e-b7f1-a9e71545f560.jpeg" /&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;The challenge of the week centered around addressing the textbox’s overflow behavior in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;Looking ahead, the focus remains on refining the FileDialog component, as the significant progress with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; prepares us to shift attention to other aspects of development.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-12-week-11-praneeth.html"/>
    <summary>Building upon the progress of the previous week, a major milestone was reached with the merging of PR #830. This PR added essential “getters” and “setters” for the new features of TextBlock, making it easier to handle changes. This, in turn, facilitated the integration of SpinBoxUI with the updated TextBlock.</summary>
    <category term="google" label="google"/>
    <published>2023-08-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-08-week-10-tvcastillod.html</id>
    <title>Week 10 : Start of SH implementation experiments</title>
    <updated>2023-08-08T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;section id="week-10-start-of-sh-implementation-experiments"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;I started formally working on SH implementation. I was told to start first doing a simple program where I can modify in real-time the order &lt;span class="math notranslate nohighlight"&gt;\(l\)&lt;/span&gt; and degree &lt;span class="math notranslate nohighlight"&gt;\(m\)&lt;/span&gt;, parameters corresponding to the &lt;a class="reference external" href="https://dipy.org/documentation/1.7.0/theory/sh_basis/"&gt;Spherical Harmonics function&lt;/a&gt; &lt;span class="math notranslate nohighlight"&gt;\(Y^m_l(\theta,\phi)=\)&lt;/span&gt;, based on &lt;a class="reference external" href="https://github.com/lenixlobo/fury/commit/2b7ce7a71fd422dc5a250d7b49e1eea2db9d3bce"&gt;previous work&lt;/a&gt;. That is just one part of the final ODF calculation, but here is what a first experimental script looks like.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260910073-10b0edd4-40e3-495c-85ad-79993aef3b19.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260910073-10b0edd4-40e3-495c-85ad-79993aef3b19.png" style="width: 600px;" /&gt;
&lt;p&gt;I did it in order to make sure it was visually correct and also to understand better how those 2 parameters are related and need to be incorporated into the final calculation. There is one issue at first sight that needs to be addressed, and that is the scaling, since for SH with a degree near 0, the object gets out of bounds.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I will keep polishing details from my current open PRs, hopefully, I will get another PR merged before the last GSoC week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;Not sure about how to use the current implementation I have to get similar visualizations made with &lt;em&gt;odf_slicer&lt;/em&gt;, since the parameters that the function receive are different, so I need to take a deeper look and see where it might be the connection or if I should make some adjustments on the parameters.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-08-week-10-tvcastillod.html"/>
    <summary>I started formally working on SH implementation. I was told to start first doing a simple program where I can modify in real-time the order l and degree m, parameters corresponding to the Spherical Harmonics function Y^m_l(\theta,\phi)=, based on previous work. That is just one part of the final ODF calculation, but here is what a first experimental script looks like.</summary>
    <category term="google" label="google"/>
    <published>2023-08-08T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-07-week-10-joaodellagli.html</id>
    <title>Week 10: Ready for Review!</title>
    <updated>2023-08-07T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-10-ready-for-review"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost!&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After talking with my mentors, I was tasked with getting my API PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;#826&lt;/a&gt; ready for review,
as it still needed some polishing, and the most important of all, it needed its tests working, as this was something I haven’t invested time since its creation.
Having that in mind, I have spent the whole week cleaning whatever needed, writing the tests, and also writing a simple example of its
usage. I also tried implementing a little piece of UI so the user could control the intensity of the bandwidth of the KDE render, but
I had a little problem I will talk about below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Fortunately, for the cleaning part, I didn’t have any trouble, and my PR is finally ready for review! The most complicated part was to write the tests, as this is something that
requires attention to understand what needs to be tested, exactly. As for the UI part, I managed to have a slider working for the
intensity, however, it was crashing the whole program for a reason, so I decided to leave this idea behind for now.
Below, an example of how this should work:&lt;/p&gt;
&lt;img alt="Buggy slider for the intensity control of the bandwidth of the KDE" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/slider.gif" /&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;After a meeting with my mentors, we decided that this week’s focus should be on finding a good usage example of the KDE rendering feature,
to have it as a showcase of the capability of this API. Also, they hinted me some changes that need to be done regarding the API, so I
will also invest some time on refactoring it.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-07-week-10-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another weekly blogpost!</summary>
    <category term="google" label="google"/>
    <published>2023-08-07T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-05-week-10-praneeth.html</id>
    <title>Week 10: Its time for a Spin-Box!</title>
    <updated>2023-08-05T00:00:00+00:00</updated>
    <author>
      <name>Praneeth Shetty</name>
    </author>
    <content type="html">&lt;section id="week-10-its-time-for-a-spin-box"&gt;

&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;p&gt;This week, my focus shifted to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; after wrapping up work on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; is a component that allows users to select a value by spinning through a range. To ensure a smooth transition, I made adjustments in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; to align it with the recent updates in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;. To make things even clearer and more user-friendly, I initiated a continuous code improvement process. I introduced setters and getters that enable easier customization of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;’s new features, such as &lt;strong&gt;auto_font_scale&lt;/strong&gt; and &lt;strong&gt;dynamic_bbox&lt;/strong&gt;. These tools simplify the process of adjusting these settings, and you can see the ongoing changes in pull request &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/830"&gt;#830&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Simultaneously, I worked on improving the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; component. Since the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; PR was based on an older version, it required updates to match the recent developments in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;. This involved restructuring the code and making sure that everything worked smoothly together. You can checkout the progress here at PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/832"&gt;#832&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;Thankfully, this week was quite smooth sailing without any major roadblocks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;Looking ahead, my plan is to finalize the integration of the updated &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; components. This entails making sure that everything works seamlessly together and is ready for the next stages of development.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-05-week-10-praneeth.html"/>
    <summary>This week, my focus shifted to the SpinBoxUI after wrapping up work on TextBlock2D. SpinBoxUI is a component that allows users to select a value by spinning through a range. To ensure a smooth transition, I made adjustments in SpinBoxUI to align it with the recent updates in TextBlock2D. To make things even clearer and more user-friendly, I initiated a continuous code improvement process. I introduced setters and getters that enable easier customization of TextBlock2D’s new features, such as auto_font_scale and dynamic_bbox. These tools simplify the process of adjusting these settings, and you can see the ongoing changes in pull request #830.</summary>
    <category term="google" label="google"/>
    <published>2023-08-05T00:00:00+00:00</published>
  </entry>
</feed>
