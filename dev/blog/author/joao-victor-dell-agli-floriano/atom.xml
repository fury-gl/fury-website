<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://fury.gl/</id>
  <title>Blog - Posts by João Victor Dell Agli Floriano</title>
  <updated>2024-04-23T13:43:21.734039+00:00</updated>
  <link href="https://fury.gl/"/>
  <link href="https://fury.gl/blog/author/joao-victor-dell-agli-floriano/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.8">ABlog</generator>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-21-week-12-joaodellagli.html</id>
    <title>Week 12: Now That is (almost) a Wrap!</title>
    <updated>2023-08-21T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-12-now-that-is-almost-a-wrap"&gt;

&lt;p&gt;Hello everyone, it’s time for another GSoC blogpost! Today, I am going to talk about some minor details I worked on last week on my
project.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After the API refactoring was done last week, I focused on addressing the reviews I would get from it. The first issues I addressed was related to
style, as there were some minor details my GSoC contributors pointed out that needed change. Also, I have addressed an issue I was having
with the &lt;cite&gt;typed hint&lt;/cite&gt; of one of my functions. Filipi, my mentor, showed me there is a way to have more than one typed hint in the same parameter,
all I needed to do was to use the &lt;cite&gt;Union&lt;/cite&gt; class from the &lt;cite&gt;typing&lt;/cite&gt; module, as shown below:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tUnion&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ndarray&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tUnion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
   &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using that, I could set the typedhint of the &lt;cite&gt;bandwidth&lt;/cite&gt; variable to &lt;cite&gt;float&lt;/cite&gt; and &lt;cite&gt;np.ndarray&lt;/cite&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;All went fine with no difficult at all, thankfully.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-next-steps"&gt;
&lt;h2&gt;The Next Steps&lt;/h2&gt;
&lt;p&gt;My next plans are, after having PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;#826&lt;/a&gt; merged, to work on the float encoding issue described in
&lt;span class="xref std std-doc"&gt;this blogpost&lt;/span&gt;. Also, I plan to tackle the UI idea once again, to see if I can finally give the user
a way to control the intensities of the distributions.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-21-week-12-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another GSoC blogpost! Today, I am going to talk about some minor details I worked on last week on my
project.</summary>
    <category term="google" label="google"/>
    <published>2023-08-21T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-21-joaodellagli-final-report.html</id>
    <title>Google Summer of Code Final Work Product</title>
    <updated>2023-08-21T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/projects/ED0203De"&gt;&lt;img alt="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" height="40" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/organizations/python-software-foundation"&gt;&lt;img alt="https://www.python.org/static/img/python-logo&amp;#64;2x.png" src="https://www.python.org/static/img/python-logo&amp;#64;2x.png" style="height: 40px;" /&gt;
&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://fury.gl/latest/index.html"&gt;&lt;img alt="https://python-gsoc.org/logos/fury_logo.png" src="https://python-gsoc.org/logos/fury_logo.png" style="width: 40px;" /&gt;
&lt;/a&gt;
&lt;section id="google-summer-of-code-final-work-product"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; João Victor Dell Agli Floriano&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organisation:&lt;/strong&gt; Python Software Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sub-Organisation:&lt;/strong&gt; FURY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/fury-gl/fury/wiki/Google-Summer-of-Code-2023-(GSOC2023)#project-2-fast-3d-kernel-based-density-rendering-using-billboards"&gt;FURY - Project 2. Fast 3D kernel-based density rendering using billboards.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This project had the goal to implement 3D Kernel Density Estimation rendering to FURY. Kernel Density Estimation, or KDE, is a
statistical method that uses kernel smoothing for modeling and estimating the density distribution of a set of points defined
inside a given region. For its graphical implementation, it was used post-processing techniques such as offscreen rendering to
framebuffers and colormap post-processing as tools to achieve the desired results. This was completed with a functional basic KDE
rendering result, that relies on a solid and easy-to-use API, as well as some additional features.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="proposed-objectives"&gt;
&lt;h2&gt;Proposed Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;strong&gt;First Phase&lt;/strong&gt;&lt;span class="classifier"&gt;Implement framebuffer usage in FURY&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Investigate the usage of float framebuffers inside FURY’s environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement a float framebuffer API.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;strong&gt;Second Phase&lt;/strong&gt;&lt;span class="classifier"&gt;Shader-framebuffer integration&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Implement a shader that uses a colormap to render framebuffers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Escalate this rendering for composing multiple framebuffers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;strong&gt;Third Phase&lt;/strong&gt;&lt;span class="classifier"&gt;KDE Calculations&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Investigate KDE calculation for point-cloud datasets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement KDE calculation inside the framebuffer rendering shaders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test KDE for multiple datasets.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-completed"&gt;
&lt;h2&gt;Objectives Completed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Implement framebuffer usage in FURY&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The first phase, addressed from &lt;em&gt;May/29&lt;/em&gt; to &lt;em&gt;July/07&lt;/em&gt;, started with the investigation of
&lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkOpenGLFramebufferObject.html#details"&gt;VTK’s Framebuffer Object&lt;/a&gt;, a vital part of this project, to understand
how to use it properly.&lt;/p&gt;
&lt;p&gt;Framebuffer Objects, abbreviated as FBOs, are the key to post-processing effects in OpenGL, as they are used to render things offscreen and save the resulting image to a texture
that will be later used to apply the desired post-processing effects within the object’s &lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Fragment_Shader"&gt;fragment shader&lt;/a&gt;
rendered to screen, in this case, a &lt;a class="reference external" href="http://www.opengl-tutorial.org/intermediate-tutorials/billboards-particles/billboards/"&gt;billboard&lt;/a&gt;. In the case of the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kernel_density_estimation"&gt;Kernel Density Estimation&lt;/a&gt; post-processing effect, we need a special kind of FBO, one that stores textures’
values as floats, different from the standard 8-bit unsigned int storage. This is necessary because the KDE rendering involves rendering every KDE point calculation
to separate billboards, rendered to the same scene, which will have their intensities, divided by the number of points rendered, blended with
&lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Blending"&gt;OpenGL Additive Blending&lt;/a&gt;, and if a relative big number of points are rendered at the
same time, 32-bit float precision is needed to guarantee that small-intensity values will not be capped to zero, and disappear.&lt;/p&gt;
&lt;p&gt;After a month going through VTK’s FBO documentation and weeks spent trying different approaches to this method, it would not work
properly, as some details seemed to be missing from the documentation, and asking the community haven’t solved the problem as well.
Reporting that to my mentors, which unsuccessfully tried themselves to make it work, they decided it was better if another path was taken, using
&lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkWindowToImageFilter.html"&gt;VTK’s WindowToImageFilter&lt;/a&gt; method as a workaround, described
in this &lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-03-week-5-joaodellagli.html"&gt;blogpost&lt;/a&gt;. This method helped the development of
three new functions to FURY, &lt;em&gt;window_to_texture()&lt;/em&gt;, &lt;em&gt;texture_to_actor()&lt;/em&gt; and &lt;em&gt;colormap_to_texture()&lt;/em&gt;, that allow the passing of
different kinds of textures to FURY’s actor’s shaders, the first one to capture a window and pass it as a texture to an actor,
the second one to pass an external texture to an actor, and the third one to specifically pass a colormap as a texture to an
actor. It is important to say that &lt;em&gt;WindowToImageFilter()&lt;/em&gt; is not the ideal way to make it work, as this method does not seem to
support float textures. However, a workaround to that is currently being worked on, as I will describe later on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;KDE Rendering Experimental Program (Needs major revision):&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;fury-gl/fury#804&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result of this whole FBO and WindowToImageFilter experimentation is well documented in PR
&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;#804&lt;/a&gt; that implements an experimental version of a KDE rendering program.
The future of this PR, as discussed with my mentors, is to be better documented to be used as an example for developers on
how to develop features in FURY with the tools used, and it shall be done soon.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Shader-framebuffer integration&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-21-joaodellagli-final-report.rst&lt;/span&gt;, line 16); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “blogpost”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;The second phase, which initially was thought of as “Implement a shader that uses a colormap to render framebuffers” and “Escalate this
rendering for composing multiple framebuffers” was actually a pretty simple phase that could be addressed in one week, &lt;em&gt;July/10&lt;/em&gt;
to &lt;em&gt;July/17&lt;/em&gt;, done at the same time as the third phase goal, documented in this
&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-17-week-7-joaodellagli.html"&gt;blogpost&lt;/a&gt;. As FURY already had a tool for generating and
using colormaps, they were simply connected to the shader part of the program as textures, with the functions explained above.
Below, is the result of the &lt;em&gt;matplotlib viridis&lt;/em&gt; colormap passed to a simple gaussian KDE render:&lt;/p&gt;
&lt;img alt="Final 2D plot" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/final_2d_plot.png" /&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-21-joaodellagli-final-report.rst&lt;/span&gt;, line 16); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “#804”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;That is also included in PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;#804&lt;/a&gt;. Having the 2D plot ready, some time was taken to
figure out how to enable a 3D render, that includes rotation and other movement around the set rendered, which was solved by
learning about the callback properties that exist inside &lt;em&gt;VTK&lt;/em&gt;. Callbacks are ways to enable code execution inside the VTK rendering
loop, enclosed inside &lt;em&gt;vtkRenderWindowInteractor.start()&lt;/em&gt;. If it is desired to add a piece of code that, for example, passes a time
variable to the fragment shader over time, a callback function can be declared:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;showm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback_function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;
    &lt;span class="n"&gt;pass_shader_uniforms_to_fs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_iren_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;RenderEvent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The piece of code above created a function that updates the time variable &lt;em&gt;t&lt;/em&gt; in every &lt;em&gt;“RenderEvent”&lt;/em&gt;, and passes it to the
fragment shader. With that property, the camera and some other parameters could be updated, which enabled 3D visualization, that
then, outputted the following result, using &lt;em&gt;matplotlib inferno&lt;/em&gt; colormap:&lt;/p&gt;
&lt;img alt="3D Render gif" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/3d_kde_gif.gif" /&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;KDE Calculations&lt;/strong&gt; (ongoing)&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;As said before, the second and third phases were done simultaneously, so after having a way to capture the window and use it as a
texture ready, the colormap ready, and an initial KDE render ready, all it was needed to do was to improve the KDE calculations.
As this &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kernel_density_estimation"&gt;Wikipedia page&lt;/a&gt; explains, a KDE calculation is to estimate an
abstract density around a set of points defined inside a given region with a kernel, that is a function that models the density
around a point based on its associated distribution &lt;span class="math notranslate nohighlight"&gt;\(\sigma\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;A well-known kernel is, for example, the &lt;strong&gt;Gaussian Kernel&lt;/strong&gt;, that says that the density around a point &lt;span class="math notranslate nohighlight"&gt;\(p\)&lt;/span&gt; with distribution
&lt;span class="math notranslate nohighlight"&gt;\(\sigma\)&lt;/span&gt; is defined as:&lt;/p&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[GK_{\textbf{p}, \sigma} (\textbf{x}) = e^{-\frac{1}{2}\frac{||\textbf{x} - \textbf{p}||^2}{\sigma^2}}\]&lt;/div&gt;
&lt;p&gt;Using that kernel, we can calculate the KDE of a set of points &lt;span class="math notranslate nohighlight"&gt;\(P\)&lt;/span&gt; with associated distributions &lt;span class="math notranslate nohighlight"&gt;\(S\)&lt;/span&gt; calculating their individual
Gaussian distributions, summing them up and dividing them by the total number of points &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[KDE(A, S)=\frac{1}{n}\sum_{i = 0}^{n}GK(x, p_{i}, \sigma_{i})\]&lt;/div&gt;
&lt;p&gt;So I dove into implementing all of that into the offscreen rendering part, and that is when the lack of a float framebuffer would
charge its cost. As it can be seen above, just calculating each point’s density isn’t the whole part, as I also need to divide
everyone by the total number of points &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt;, and then sum them all. The problem is that, if the number of points its big enough,
the individual densities will be really low, and that would not be a problem for a 32-bit precision float framebuffer, but that is
&lt;em&gt;definitely&lt;/em&gt; a problem for a 8-bit integer framebuffer, as small enough values will simply underflow and disappear. That issue is
currently under investigation, and some solutions have already being presented, as I will show in the &lt;strong&gt;Objectives in Progress&lt;/strong&gt;
section.&lt;/p&gt;
&lt;p&gt;Apart from that, after having the experimental program ready, I focused on modularizing it into a functional and simple API
(without the &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt; division for now), and I could get a good set of results from that. The API I first developed implemented the
&lt;em&gt;EffectManager&lt;/em&gt; class, responsible for managing all of the behind-the-scenes steps necessary for the kde render to work,
encapsulated inside the &lt;em&gt;ÈffectManager.kde()&lt;/em&gt; method. It had the following look:&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-21-joaodellagli-final-report.rst&lt;/span&gt;, line 162)&lt;/p&gt;
&lt;p&gt;Error in “code-block” directive:
maximum 1 argument(s) allowed, 9 supplied.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury.effect_manager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;

    &lt;span class="n"&gt;showm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# KDE rendering setup&lt;/span&gt;
    &lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;kde_actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# End of KDE rendering setup&lt;/span&gt;

    &lt;span class="n"&gt;showmn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;p&gt;Those straightforward instructions, that hid several lines of code and setup, could manage to output the following result:&lt;/p&gt;
&lt;img alt="API 3D KDE plot" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/fianl_3d_plot.png" /&gt;
&lt;p&gt;And this was not the only feature I had implemented for this API, as the use of &lt;em&gt;WindowToImageFilter&lt;/em&gt; method opened doors for a
whole new world for FURY: The world of post-processing effects. With this features setup, I managed to implement a &lt;em&gt;gaussian blur&lt;/em&gt;
effect, a &lt;em&gt;grayscale&lt;/em&gt; effect and a &lt;em&gt;Laplacian&lt;/em&gt; effect for calculating “borders”:&lt;/p&gt;
&lt;img alt="Gaussian Blur effect" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/gaussian_blur.png" /&gt;
&lt;img alt="Grayscale effect" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/grayscale.png" /&gt;
&lt;img alt="Laplacian effect" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/laplacian1.gif" /&gt;
&lt;p&gt;As this wasn’t the initial goal of the project and I still had several issues to deal with, I have decided to leave these features as a
future addition.&lt;/p&gt;
&lt;p&gt;Talking with my mentors, we realized that the first KDE API, even though simple, could lead to bad usage from users, as the
&lt;em&gt;em.kde()&lt;/em&gt; method, that outputted a &lt;em&gt;FURY actor&lt;/em&gt;, had dependencies different from any other object of its kind, making it a new
class of actors, which could lead to confusion and bad handling. After some pair programming sessions, they instructed me to take
a similar, but different road from what I was doing, turning the kde actor into a new class, the &lt;em&gt;KDE&lt;/em&gt; class. This class would
have almost the same set of instructions present in the prior method, but it would break them in a way it would only be completely
set up after being passed to the &lt;em&gt;EffectManager&lt;/em&gt; via its add function. Below, how the refactoring handles it:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury.effects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KDE&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;

&lt;span class="n"&gt;showm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# KDE rendering setup&lt;/span&gt;
&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kde_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KDE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_effect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# End of KDE rendering setup&lt;/span&gt;

&lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which outputted the same results as shown above. It may have cost some simplicity as we are now one line farther from having it
working, but it is more explicit in telling the user this is not just a normal actor.&lt;/p&gt;
&lt;p&gt;Another detail I worked on was the kernel variety. The Gaussian Kernel isn’t the only one available to model density distributions,
there are several others that can do that job, as it can be seen in this &lt;a class="reference external" href="https://scikit-learn.org/stable/modules/density.html"&gt;scikit-learn piece of documentation&lt;/a&gt;
and this &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kernel_(statistics)"&gt;Wikipedia page on kernels&lt;/a&gt;. Based on the scikit-learn KDE
implementation, I worked on implementing the following kernels inside our API, that can be chosen as a parameter when calling the
&lt;em&gt;KDE&lt;/em&gt; class:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Cosine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Epanechnikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exponential&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gaussian&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linear&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tophat&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below, the comparison between them using the same set of points and bandwidths:&lt;/p&gt;
&lt;img alt="Comparison between the six implemented kernels" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/kernels.png" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;First Stage of the KDE Rendering API (will be merged soon)&lt;/strong&gt;: &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;fury-gl/fury#826&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this work culminated in PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826/"&gt;#826&lt;/a&gt;, that proposes to add the first stage of
this API (there are some details yet to be completed, like the &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt; division) to FURY. This PR added the described API, and also
proposed some minor changes to some already existing FURY functions related to callbacks, changes necessary for this and other
future applications that would use it to work. It also added the six kernels described, and a simple documented example on how
to use this feature.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-objectives"&gt;
&lt;h2&gt;Other Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;strong&gt;Stretch Goals&lt;/strong&gt;&lt;span class="classifier"&gt;SDE Implementation, Network/Graph visualization using SDE/KDE, Tutorials&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Investigate SDE calculation for surface datasets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement SDE calculation inside the framebuffer rendering shaders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test SDE for multiple datasets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop comprehensive tutorials that explain SDE concepts and FURY API usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create practical, scenario-based tutorials using real datasets and/or simulations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-in-progress"&gt;
&lt;h2&gt;Objectives in Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;KDE Calculations&lt;/strong&gt; (ongoing)&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The KDE rendering, even though almost complete, have the $n$ division, an important step, missing, as this normalization allows colormaps
to cover the whole range o values rendered. The lack of a float FBO made a big difference in the project, as the search for a functional implementation of it not only delayed the project, but it is vital for
the correct calculations to work.&lt;/p&gt;
&lt;p&gt;For the last part, a workaround thought was to try an approach I later figured out is an old one, as it can be check in
&lt;a class="reference external" href="https://developer.nvidia.com/gpugems/gpugems/part-ii-lighting-and-shadows/chapter-12-omnidirectional-shadow-mapping"&gt;GPU Gems 12.3.3 section&lt;/a&gt;:
If I need 32-bit float precision and I got 4 8-bit integer precision available, why not trying to pack this float into this RGBA
texture? I have first tried to do one myself, but it didn’t work for some reason, so I tried &lt;a class="reference external" href="https://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/"&gt;Aras Pranckevičius&lt;/a&gt;
implementation, that does the following:&lt;/p&gt;
&lt;div class="highlight-GLSL notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;float_to_rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitEnc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;256.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;65536.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;16777216.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitEnc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yzww&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;255.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;xxxy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That initially worked, but for some reason I am still trying to understand, it is resulting in a really noisy texture:&lt;/p&gt;
&lt;img alt="Noisy KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/noisy%20kde.png" /&gt;
&lt;p&gt;One way to try to mitigate that while is to pass this by a gaussian blur filter, to try to smooth out the result:&lt;/p&gt;
&lt;img alt="Blurred result" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/blurred_kde.png" /&gt;
&lt;p&gt;But it is not an ideal solution as well, as it may lead to distortions in the actual density values, depending on the application of
the KDE. Now, my goal is to first find the root of the noise problem, and then, if that does not work, try to make the gaussian filter
work.&lt;/p&gt;
&lt;p&gt;Another detail that would be a good addition to the API is UI controls. Filipi, one of my mentors, told me it would be a good feature
if the user could control the intensities of the bandwidths for a better structural visualization of the render, and knowing FURY already
have a good set of &lt;a class="reference external" href="https://fury.gl/latest/auto_examples/index.html#user-interface-elements"&gt;UI elements&lt;/a&gt;, I just needed to integrate
that into my program via callbacks. I tried implementing an intensity slider. However, for some reason, it is making the program crash
randomly, for reasons I still don’t know, so that is another issue under investigation. Below, we show a first version of that feature,
which was working before the crashes:&lt;/p&gt;
&lt;img alt="Slider for bandwidths" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/slider.gif" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UI intensity slider for the KDE rendering API (draft)&lt;/strong&gt;: &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/849"&gt;fury-gl/fury#849&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Post-processing effects for FURY Effects API (draft)&lt;/strong&gt;: &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/850"&gt;fury-gl/fury#850&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="gsoc-weekly-blogs"&gt;
&lt;h2&gt;GSoC Weekly Blogs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;My blog posts can be found at &lt;a class="reference external" href="https://fury.gl/latest/blog/author/joao-victor-dell-agli-floriano.html"&gt;FURY website&lt;/a&gt; and &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/joaodellaglis-blog/"&gt;Python GSoC blog&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-21-joaodellagli-final-report.rst&lt;/span&gt;, line 332)&lt;/p&gt;
&lt;p&gt;Malformed table.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Date                | Description                                        | Blog Post Link                                                                                                                                                                                            |
+=====================+====================================================+===========================================================================================================================================================================================================+
| Week 0 (29-05-2023) | The Beginning of Everything                        | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-05-29-week-0-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/the-beggining-of-everything-week-0/&amp;gt;`__                  |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 1 (05-06-2022) | The FBO Saga                                       | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-06-05-week-1-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/the-fbo-saga-week-1/&amp;gt;`__                                 |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 2 (12-06-2022) | The Importance of (good) Documentation             | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-06-12-week-2-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/the-importance-of-good-documentation-week-2/&amp;gt;`__         |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 3 (19-06-2022) | Watch Your Expectations                            | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-06-19-week-3-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-3-watch-your-expectations/&amp;gt;`__                      |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 4 (26-06-2022) | Nothing is Ever Lost                               | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-06-26-week-4-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-4-nothing-is-ever-lost/&amp;gt;`__                         |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 5 (03-07-2022) | All Roads Lead to Rome                             | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-03-week-5-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-5-all-roads-lead-to-rome/&amp;gt;`__                       |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 6 (10-07-2022) | Things are Starting to Build Up                    | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-10-week-6-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-6-things-are-starting-to-build-up/&amp;gt;`__              |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 7 (17-07-2022) | Experimentation Done                               | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-17-week-7-joaodellagli.html&amp;gt;`__ - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-7-experimentation-done/&amp;gt;`__                         |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 8 (24-07-2022) | The Birth of a Versatile API                       | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-24-week-8-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-8-the-birth-of-a-versatile-api/&amp;gt;`__                 |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 9 (31-07-2022) | It is Polishing Time!                              | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-31-week-9-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-9-it-is-polishing-time/&amp;gt;`__                         |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 10 (07-08-2022)| Ready for Review!                                  | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-08-07-week-10-joaodellagli.html&amp;gt;`__ - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/ready-for-review/&amp;gt;`__                                    |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 11 (14-08-2022)| A Refactor is Sometimes Needed                     | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-08-14-week-11-joaodellagli.html&amp;gt;`__ - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/a-refactor-is-sometimes-needed/&amp;gt;`__                      |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 12 (21-08-2022)| Now That is (almost) a Wrap!                       | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-08-21-week-12-joaodellagli.html&amp;gt;`__ - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-12-now-that-is-almost-a-wrap/&amp;gt;`__                   |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-21-joaodellagli-final-report.html"/>
    <summary>Name: João Victor Dell Agli Floriano</summary>
    <category term="google" label="google"/>
    <published>2023-08-21T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-14-week-11-joaodellagli.html</id>
    <title>Week 11: A Refactor is Sometimes Needed</title>
    <updated>2023-08-14T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-11-a-refactor-is-sometimes-needed"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! Today I am going to share some updates on the API refactoring
I was working on with my mentors.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;As I shared with you &lt;span class="xref std std-doc"&gt;last week&lt;/span&gt;, the first draft of my API was finally ready for review, as
I finished tweaking some remaining details missing. I was tasked with finding a good example of the usage of the tools we proposed,
and I started to do that, however after testing it with some examples, I figured out some significant bugs were to be fixed. Also,
after some reviews and hints from some of my mentors and other GSoC contributors, we realised that some refactoring should be done,
mainly focused on avoiding bad API usage from the user.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Initially, I thought only one bug was the source of the issues the rendering presented, but it turned out to be two, which I will
explain further.&lt;/p&gt;
&lt;p&gt;The first bug was related to scaling and misalignment of the KDE render. The render of the points being post-processed was not only
with sizes different from the original set size, but it was also misaligned, making it appear in positions different from the points’
original ones. After some time spent, I figured out the bug was related to the texture coordinates I was using. Before, this is how
my fragment shader looked:&lt;/p&gt;
&lt;div class="highlight-C notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res_factor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tex_coords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res_factor&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;normalizedVertexMCVSOutput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;intensity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenTexture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tex_coords&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It turns out using this texture coordinates for &lt;em&gt;this case&lt;/em&gt; was not the best choice, as even though it matches the fragment positions,
the idea here was to render the offscreen window, which has the same size as the onscreen one, to the billboard actor. With that in mind,
I realised the best choice was using texture coordinates that matched the whole screen positions, coordinates that were derived from the
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gl_FragCoord.xy&lt;/span&gt;&lt;/code&gt;, being the division of that by the resolution of the screen, for normalization. Below, the change made:&lt;/p&gt;
&lt;div class="highlight-C notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tex_coords&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gl_FragCoord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;intensity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenTexture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tex_coords&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This change worked initially, although with some problems, that later revealed the resolution of the offscreen window needed to be
updated inside the callback function as well. Fixing that, it was perfectly aligned and scaled!&lt;/p&gt;
&lt;p&gt;The second bug was related with the handling of the bandwidth, former sigma parameter. I realised I wasn’t dealing properly with the option of the user passing only
one single bandwidth value being passed, so when trying that, only the first point was being rendered. I also fixed that and it worked,
so cheers!&lt;/p&gt;
&lt;p&gt;As I previously said, the bugs were not the only details I spent my time on last week. Being reviewed, the API design, even
though simple, showed itself vulnerable to bad usage from the user side, requiring some changes. The changes suggested by mentors were,
to, basically, take the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;kde&lt;/span&gt;&lt;/code&gt; method out of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EffectManager&lt;/span&gt;&lt;/code&gt; class, and create a new class from it inside an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;effects&lt;/span&gt;&lt;/code&gt; module,
like it was a special effects class. With this change, the KDE setup would go from:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;kde_actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;show_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;kde_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KDE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_effect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Not a gain in line shortening, however, a gain in security, as preventing users from misusing the kde_actor. Something worth noting is
that I learned how to use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;functools.partial&lt;/span&gt;&lt;/code&gt; function, that allowed me to partially call the callback function with only some
parameters passed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Having that refactoring made, now I am awaiting for a second review so we could finally wrap it up and merge the first stage of this API.
With that being done, I will write the final report and wrap this all up.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-14-week-11-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! Today I am going to share some updates on the API refactoring
I was working on with my mentors.</summary>
    <category term="google" label="google"/>
    <published>2023-08-14T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-07-week-10-joaodellagli.html</id>
    <title>Week 10: Ready for Review!</title>
    <updated>2023-08-07T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-10-ready-for-review"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost!&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After talking with my mentors, I was tasked with getting my API PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;#826&lt;/a&gt; ready for review,
as it still needed some polishing, and the most important of all, it needed its tests working, as this was something I haven’t invested time since its creation.
Having that in mind, I have spent the whole week cleaning whatever needed, writing the tests, and also writing a simple example of its
usage. I also tried implementing a little piece of UI so the user could control the intensity of the bandwidth of the KDE render, but
I had a little problem I will talk about below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Fortunately, for the cleaning part, I didn’t have any trouble, and my PR is finally ready for review! The most complicated part was to write the tests, as this is something that
requires attention to understand what needs to be tested, exactly. As for the UI part, I managed to have a slider working for the
intensity, however, it was crashing the whole program for a reason, so I decided to leave this idea behind for now.
Below, an example of how this should work:&lt;/p&gt;
&lt;img alt="Buggy slider for the intensity control of the bandwidth of the KDE" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/slider.gif" /&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;After a meeting with my mentors, we decided that this week’s focus should be on finding a good usage example of the KDE rendering feature,
to have it as a showcase of the capability of this API. Also, they hinted me some changes that need to be done regarding the API, so I
will also invest some time on refactoring it.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-07-week-10-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another weekly blogpost!</summary>
    <category term="google" label="google"/>
    <published>2023-08-07T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-31-week-9-joaodellagli.html</id>
    <title>Week 9: It is Polishing Time!</title>
    <updated>2023-07-31T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-9-it-is-polishing-time"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! Today, I am going to update you on my project’s latest changes.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After having finished a first draft of the API that will be used for the KDE rendering, and showing how it could be used
for other post-processing effects, my goal was to clean the code and try some details that would add to it so it could be better
complete. Having that in mind, I invested in three work fronts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Fixing some bugs related to the rendering more than one post-processing effect actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Experimenting with other rendering kernels (I was using the &lt;em&gt;gaussian&lt;/em&gt; one only).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Completing the KDE render by renormalizing the values in relation to the number of points (one of the core KDE details).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both three turned out more complicated than it initially seemed, as I will show below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;The first one I did on monday-tuesday, and I had to deal with some issues regarding scaling and repositioning. Due to implementation
choices, the final post-processed effects were rendered either bigger than they were in reality, or out of their original place.
After some time dedicated to finding the root of the problems, I could fix the scaling issue, however I realised I would need to,
probably, rethink the way the API was implemented. As this general post-processing effects is a side-project that comes as a consequence of
my main one, I decided to leave that investment to another time, as I would need to guarantee the quality of the second.&lt;/p&gt;
&lt;p&gt;The second was an easy and rather interesting part of my week, as I just needed to setup new kernel shaders. Based on
&lt;a class="reference external" href="https://scikit-learn.org/stable/modules/density.html"&gt;scikit-learn KDE documentation&lt;/a&gt;, I could successfully implement the following kernels:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Gaussian&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = e^{\frac{-(x^2 + y^2)}{2\sigma^2}}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Tophat&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1.0, \ \ |x^2 + y^2| &amp;lt; \sigma\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Epanechnikov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1 - \frac{x^2 + y^2}{\sigma^2}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Exponential&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = e^{\frac{-|x^2 + y^2|}{\sigma}}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Linear&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1 - \frac{|x^2 + y^2|}{\sigma}, \ \ |x^2 + y^2| &amp;lt; \sigma\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Cosine&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = cos(\frac{\pi|x^2 + y^2|}{2\sigma})\]&lt;/div&gt;
&lt;p&gt;That outputted the following (beautiful) results for a set of 1000 random points with random sigmas:&lt;/p&gt;
&lt;img alt="Different kernel approaches" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/kernels.png" /&gt;
&lt;p&gt;The third one is still being a trickier challenge. If you recall from my first blogposts, I spent something around &lt;em&gt;one month&lt;/em&gt; trying to setup
float framebuffer objects to FURY with VTK so I could use them in my project. After spending all of that time with no results,
me and Bruno, my mentor, &lt;span class="xref std std-doc"&gt;found a way&lt;/span&gt; to do what we wanted to do, but using a different VTK class,
&lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkWindowToImageFilter.html"&gt;vtkWindowToImageFilter&lt;/a&gt;. Well, it was a good workaround back then and
it lead me all the way here, however now it is costing a price. The float framebuffers were an important part of the project because they
would allow us to pass &lt;em&gt;32-bit float information&lt;/em&gt; from one shader to another, which would be important as they would allow the densities to
have higher precision and more fidelity to the calculations. When rendering a KDE of a given set of points, we use the below function:&lt;/p&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[KDE(x, y) = \frac{1}{n} \sum_{i = 0}^n K(x, y)\]&lt;/div&gt;
&lt;p&gt;If the number of points &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt; is big enough, some KDE results will be really low. This presents a real problem to our implementation because, without
the float framebuffers, it is currently only being possible to pass &lt;em&gt;8-bit unsigned char&lt;/em&gt; information, that only allows 256 values.
This is far from ideal, as low values would have alone densities low enough to disappear. This presented a problem as to renormalize the
densities, I was retrieving the texture to the CPU, calculating its minimum and maximum values, and passing to the fragment shader as uniforms
for the renormalization, which didn’t work if the maximum values calculated were zero.&lt;/p&gt;
&lt;p&gt;One solution I thought to solve that was a really heavy workaround: if an unsigned float is 32-bit and I have exactly 4 8-bit
unsigned chars, why not try to pack this float into these 4 chars? Well, this is an interesting approach which I figured out is already an
old one, being reported in &lt;a class="reference external" href="https://developer.nvidia.com/gpugems/gpugems/part-ii-lighting-and-shadows/chapter-12-omnidirectional-shadow-mapping"&gt;GPU Gems’s chapter 12&lt;/a&gt;.
Unfortunately I haven’t tried yet this implementation yet, and went for one I thought myself, which haven’t exactly worked. I also tried
this implementation from &lt;a class="reference external" href="https://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/"&gt;Aras Pranckevičius’ website&lt;/a&gt;, which seems
to be working, even though not perfectly:&lt;/p&gt;
&lt;img alt="Noisy float to RGBA encoding" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/noisy%20kde.png" /&gt;
&lt;p&gt;As you can see, this implementation is &lt;em&gt;really noisy&lt;/em&gt;. I think this has to deal with floating point rounding errors, so to try to mitigate
that, I experimented applying a &lt;em&gt;13x13 gaussian blur&lt;/em&gt; to it. Below, what I got from that:&lt;/p&gt;
&lt;img alt="Blurred KDE result" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/blurred_kde.png" /&gt;
&lt;p&gt;That looks way better, even though not ideal yet.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Talking with my mentors, we decided it was better if I focused on the version without the renormalization for now, as it was already
done and running fine. So for this week, I plan to clean my PR to finally have it ready for a first review, and maybe add to it a little
UI tool to control the intensity of the densities. That should take me some time and discussion, but I hope for it to be ready by the
end of the week.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-31-week-9-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! Today, I am going to update you on my project’s latest changes.</summary>
    <category term="google" label="google"/>
    <published>2023-07-31T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-24-week-8-joaodellagli.html</id>
    <title>Week 8: The Birth of a Versatile API</title>
    <updated>2023-07-24T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-8-the-birth-of-a-versatile-api"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! Today, I am going to tell you all about how is the KDE API development going, and
to show you the potential this holds for the future!&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;Last week I told you how I managed to render some KDE renders to the screen, both in 2D and 3D, as you may check by my last blogpost.
My new task was, as I had this example working, to start the API development. In a meeting with Bruno, one of my mentors, we debated
on how could this work, reaching two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Implement the KDE in a single, simple actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement a KDE rendering manager, as a class.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first one would have the advantage of being simple and pretty straightforward, as a user would only need to call the actor and have
it working on their hands, having the tradeoff of leaving some important steps for a clean API hidden and static. These steps I mention
are related to how this rendering works, as I have previously &lt;span class="xref std std-doc"&gt;showed you&lt;/span&gt;, it relies on post-processing effects,
which need an offscreen rendering, that for example are done by the &lt;em&gt;callback functions&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In short, these functions are instructions the user gives to the interactor to run inside the interaction loop. Inside FURY there are tree
types of callbacks passed to the window interactor:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Timer Callbacks&lt;/strong&gt;: Added to the window interactor, they are a set of instructions that will be called from time to time, with interval defined by the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Window Callbacks&lt;/strong&gt;: Added directly to the window, they are  a set of instructions called whenever an specific event is triggered.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interactor Callbacks&lt;/strong&gt;: Added to the window interactor, they are a set of instructions called whenever an specific interaction, for example a mouse left-click, is triggered.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this API, I will be using the &lt;em&gt;Interactor Callback&lt;/em&gt;, set by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;window.add_iren_callback()&lt;/span&gt;&lt;/code&gt; function, that will be called whenever a &lt;em&gt;Render&lt;/em&gt;
interaction is detected, and needs to be first passed to the onscreen manager.&lt;/p&gt;
&lt;p&gt;These details are more complicated, and would need, for example, for the user to pass the onscreen manager to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;actor.kde()&lt;/span&gt;&lt;/code&gt; function.
Also, in the case of a kde actor not being used anymore and being declared, the callback then passed would still exist inside the manager and
be called even when the kde actor is not on screen anymore, which is not ideal.&lt;/p&gt;
&lt;p&gt;Knowing these problems, we thought of a second option, that would have the advantage of not leaving those details and steps behind. It has
the tradeoff of maybe complicating things as it would need to be called after calling the effects manager, but as I will show you below,
it is not that complicated &lt;em&gt;at all&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I also reviewed my fellow GSoC contributors PR’s as well, PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/810"&gt;#810&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/803"&gt;#803&lt;/a&gt;. Bruno told me to take a look as well on &lt;a class="reference external" href="https://www.conventionalcommits.org"&gt;Conventional Commits&lt;/a&gt; , a way to standardize
commits by prefixes, so I did that as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Well, the implemented manager class is named &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EffectManager()&lt;/span&gt;&lt;/code&gt; and to initialize it you only need to pass the onscreen manager.
The onscreen manager is the standard FURY window manager you would use in a normal FURY-based program:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Onscreen manager setup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;

&lt;span class="n"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;onscreen_manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;effects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After that, to render a KDE calculation of points to the screen, you need only to call its &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;kde()&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colormap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;inferno&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Those last two are optional&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pass it to the onscreen manager scene:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And to start it, as usual:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As simple as that. This three lines of code output the same result as I showed you last week, this time, with different sigmas for each
point:&lt;/p&gt;
&lt;img alt="3D KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/3d_kde_gif.gif" /&gt;
&lt;p&gt;After having that working, I experimented beyond. See, as I previously said, we are dealing here with &lt;em&gt;post-processing effects&lt;/em&gt;, with KDE
being only one of the many existing ones, as this &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Video_post-processing"&gt;Wikipedia Page&lt;/a&gt; on post processing shows.
Knowing that, I tried one of the first filters I learned, the Laplacian one. This filter is, as its name hints, applying the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Discrete_Laplace_operator"&gt;Discrete Laplace Operator&lt;/a&gt; in an image. This filter shows sudden changes of value, a
good way to detect borders. The process is the same as the kde actor, requiring only the actor you want to apply the filter to.
Below, the result I got from applying that to a box actor:&lt;/p&gt;
&lt;img alt="Laplacian filter applied to a cube object." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/laplacian1.gif" /&gt;
&lt;p&gt;Something I found important to leave as an option was filter compositing. What if an user wanted to, for example, apply one laplacian filter
after another? Well, the example below shows that is possible as well:&lt;/p&gt;
&lt;img alt="Double laplacian application on the box actor." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/laplacian2.gif" /&gt;
&lt;p&gt;It still needs some tweaks and suffers from some bugs, but it works! Those represent important progress as it shows the versatility this
API may present. I have also already implemented &lt;cite&gt;grayscale&lt;/cite&gt; and &lt;cite&gt;3x3 gaussian blur&lt;/cite&gt; as well:&lt;/p&gt;
&lt;img alt="3x3 Gaussian Blur filter applied to a cube." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/gaussian_blur.png" /&gt;
&lt;img alt="Grayscale filter applied to a cube." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/grayscale.png" /&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;My plans for this week are to keep working and polishing the API, mainly the KDE part, so it can be ready for a first review.
When that is ready, I plan to experiment with more filters and make this more dynamic, maybe implementing a way to apply custom kernel
transformations, passed by the user, to the rendering process. This has been a really exciting journey and I am getting happy with the results!&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-24-week-8-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! Today, I am going to tell you all about how is the KDE API development going, and
to show you the potential this holds for the future!</summary>
    <category term="google" label="google"/>
    <published>2023-07-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-17-week-7-joaodellagli.html</id>
    <title>Week 7: Experimentation Done</title>
    <updated>2023-07-17T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-7-experimentation-done"&gt;

&lt;p&gt;Hello everyone, welcome to another weekly blogpost! Let’s talk about the current status of my project (spoiler: it is beautiful).&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;Having accomplished a KDE rendering to a billboard last week, I was then tasked with trying a different approach to how the
rendering was done. So, to recap, below was how I was doing it:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Render one point’s KDE offscreen to a single billboard, passing its position and sigma to the fragment shader as uniforms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Capture the last rendering’s screen as a texture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render the next point’s KDE, and sum it up with the last rendering’s texture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do this until the end of the points.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Capture the final render screen as a texture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply post processing effects (colormapping).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render the result to the screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This approach was good, but it had some later limitations and issues that would probably take more processing time and attention to details (correct matrix
transformations, etc) than the ideal. The different idea is pretty similar, but with some differences:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Activate additive blending in OpenGL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render each point’s KDE to its own billboard, with position defined by the point’s position, all together in one pass.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Capture the rendered screen as a texture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pass this texture to a billboard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply post processing effects (colormapping).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render the result to the screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I needed to basically do that.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="was-it-hard"&gt;
&lt;h2&gt;Was it Hard?&lt;/h2&gt;
&lt;p&gt;Fortunately, it wasn’t so hard to do it in the end. Following those steps turned out pretty smooth, and after some days,
I had the below result:&lt;/p&gt;
&lt;img alt="Final 2D KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/final_2d_plot.png" /&gt;
&lt;p&gt;This is a 2D KDE render of random 1000 points. For this I used the &lt;em&gt;“viridis”&lt;/em&gt; colormap from &lt;cite&gt;matplotlib&lt;/cite&gt;. Some details worth noting:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;For this to work, I have implemented three texture helper functions: &lt;cite&gt;window_to_texture()&lt;/cite&gt;, &lt;cite&gt;texture_to_actor()&lt;/cite&gt; and &lt;cite&gt;colormap_to_texture()&lt;/cite&gt;. The first one captures a window and pass it as a texture to an actor, the second one passes an imported texture to an actor, and the last one passes a colormap, prior passed as an array, as a texture to an actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The colormap is directly get from &lt;cite&gt;matplotlib&lt;/cite&gt;, available in its &lt;cite&gt;colormaps&lt;/cite&gt; object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This was only a 2D flatten plot. At first, I could not figure out how to make the connection between the offscreen interactor and the onscreen one, so rotating and moving around the render was not happening. After some ponder and talk to my mentors, they told me to use &lt;em&gt;callback&lt;/em&gt; functions inside the interactor, and after doing that, I managed to make the 3D render work, which had the following result:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="3D KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/3d_kde_gif.gif" /&gt;
&lt;p&gt;After those results, I refactored my PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;#804&lt;/a&gt; to better fit its current status, and it is
now ready for review. Success!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;After finishing the first iteration of my experimental program, the next step is to work on an API for KDE rendering. I plan to meet
with my mentors and talk about the details of this API, so expect an update next week. Also, I plan to take a better look on my fellow GSoC FURY
contributors work so when their PRs are ready for review, I will have to be better prepared for it.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-17-week-7-joaodellagli.html"/>
    <summary>Hello everyone, welcome to another weekly blogpost! Let’s talk about the current status of my project (spoiler: it is beautiful).</summary>
    <category term="google" label="google"/>
    <published>2023-07-17T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-10-week-6-joaodellagli.html</id>
    <title>Week 6: Things are Starting to Build Up</title>
    <updated>2023-07-10T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-6-things-are-starting-to-build-up"&gt;

&lt;p&gt;Hello everyone, time for a other weekly blogpost! Today, I will show you my current progress on my project and latest activities.&lt;/p&gt;
&lt;section id="what-i-did-last-week"&gt;
&lt;h2&gt;What I did Last Week&lt;/h2&gt;
&lt;p&gt;Last week I had the goal to implement KDE rendering to the screen (if you want to understand what this is, check my &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:doc:`last blogpost &amp;lt;2023-07-03-week-5-joaodellagli&amp;gt;`_&lt;/span&gt;&lt;/a&gt;).
After some days diving into the code, I finally managed to do it:&lt;/p&gt;
&lt;aside class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-07-10-week-6-joaodellagli.rst&lt;/span&gt;, line 14); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mismatch: both interpreted text role prefix and reference suffix.&lt;/p&gt;
&lt;/aside&gt;
&lt;img alt="KDE render to a billboard" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/buffer_compose.png" /&gt;
&lt;p&gt;This render may seem clean and working, but the code isn’t exactly like that. For this to work, some tricks and work arounds needed to
be done, as I will describe in the section below.&lt;/p&gt;
&lt;p&gt;Also, I reviewed the shader part of Tania’s PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/791"&gt;#791&lt;/a&gt;, that implement ellipsoid actors inside
FURY. It was my first review of a PR that isn’t a blogpost, so it was an interesting experience and I hope I can get better at it.&lt;/p&gt;
&lt;p&gt;It is important as well to point out that I had to dedicate myself to finishing my graduation capstone project’s presentation that I will attend
to this week, so I had limited time to polish my code, which I plan to do better this week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;The KDE render basically works rendering the KDE of a point to a texture and summing that texture to the next render. For this to work,
the texture, rendered to a billboard, needs to be the same size of the screen, otherwise the captured texture will include the black background.
The problem I faced with that is that the billboard scaling isn’t exactly well defined, so I had to guess for a fixed screen size
(in this example, I worked with &lt;em&gt;600x600&lt;/em&gt;) what scaling value made the billboard fit exactly inside the screen (it’s &lt;em&gt;3.4&lt;/em&gt;). That is far from ideal as I
will need to modularize this behavior inside a function that needs to work for every case, so I will need to figure out a way to fix that
for every screen size. For that, I have two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Find the scaling factor function that makes the billboard fit into any screen size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Figure out how the scaling works inside the billboard actor to understand if it needs to be refactored.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first seems ok to do, but it is kind of a work around as well. The second one is a good general solution, but it is a more delicate one,
as it deals with how the billboard works and already existing applications of it may suffer problems if the scaling is changed.
I will see what is better talking with my mentors.&lt;/p&gt;
&lt;p&gt;Another problem I faced (that is already fixed) relied on shaders. I didn’t fully understood how shaders work inside FURY so I was
using my own fragment shader implementation, replacing the already existing one completely. That was working, but I was having an issue
with the texture coordinates of the rendering texture. As I completely replaced the fragment shader, I had to pass custom texture coordinates
to it, resulting in distorted textures that ruined the calculations. Those issues motivated me to learn the shaders API, which allowed me
to use the right texture coordinates and finally render the results you see above.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;For this week, I plan to try a different approach Filipi, one of my mentors, told me to do. This approach was supposed to be the original
one, but a communication failure lead to this path I am currently in. This approach renders each KDE calculation into its own billboard,
and those are rendered together with additive blending. After this first pass, this render is captured into a texture and then rendered to
another big billboard.&lt;/p&gt;
&lt;p&gt;Also, I plan to refactor my draft PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;#804&lt;/a&gt; to make it more understandable, as its description still dates back to the time I was using the
flawed Framebuffer implementation, and my fellow GSoC contributors will eventually review it, and to do so, they will need to understand it.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-10-week-6-joaodellagli.html"/>
    <summary>Hello everyone, time for a other weekly blogpost! Today, I will show you my current progress on my project and latest activities.</summary>
    <category term="google" label="google"/>
    <published>2023-07-10T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-03-week-5-joaodellagli.html</id>
    <title>Week 5: All Roads Lead to Rome</title>
    <updated>2023-07-03T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-5-all-roads-lead-to-rome"&gt;

&lt;p&gt;Hello everyone, time for another weekly blogpost! Today, we will talk about taking different paths to reach your objective.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After having the FBO properly set up, the plan was to finally &lt;em&gt;render&lt;/em&gt; something to it. Well, I wished for a less bumpy road
at my &lt;span class="xref std std-doc"&gt;last blogpost&lt;/span&gt; but as in this project things apparently tend to go wrong,
of course the same happened with this step.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;Days passed without anything being rendered to the FBO. The setup I was working on followed the simplest OpenGL pipeline of rendering to
an FBO:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Setup the FBO&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attach a texture to it’s color attachment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setup the shader to be used in the FBO render and the shader to render the FBO’s Color Attachment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render to the FBO&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the color attachment as texture attached to a billboard to render what was on the screen&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But it seems like this pipeline doesn’t translate well into VTK. I paired again on wednesday with my mentors, Bruno and Filipi, to try to figure out
where the problem was, but after hours we could not find it. Wednesday passed and then thursday came, and with thursday, a solution:
Bruno didn’t give up on the idea and dug deep on VTK’s documentation until he found a workaround to do what we wanted, that was retrieving a
texture from what was rendered to the screen and pass it as a texture to render to the billboard. To do it, he figured out we needed to use
a different class, &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkWindowToImageFilter.html"&gt;vtkWindowToImageFilter&lt;/a&gt;, a class that has the specific
job of doing exactly what I described above. Below, the steps to do it:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;windowToImageFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkWindowToImageFilter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;windowToImageFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRenderWindow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;windowToImageFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkTexture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInputConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;windowToImageFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOutputPort&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Bind the framebuffer texture to the desired actor&lt;/span&gt;
&lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetTexture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is enough to bind to the desired actor a texture that corresponds to what was prior rendered to the screen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Having a solution to that, now its time to finally render some KDE’s! This week’s plans involve implementing the first version of a KDE
calculation. For anyone interested in understanding what a Kernel Density Estimation is, here is a brief summary from this
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kernel_density_estimation"&gt;Wikipedia page&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;In statistics, kernel density estimation (KDE) is the application of kernel smoothing for probability density estimation, i.e., a
non-parametric method to estimate the probability density function of a random variable based on kernels as weights. KDE answers a
fundamental data smoothing problem where inferences about the population are made, based on a finite data sample. In some fields
such as signal processing and econometrics it is also termed the Parzen–Rosenblatt window method, after Emanuel Parzen and Murray
Rosenblatt, who are usually credited with independently creating it in its current form. One of the famous applications of
kernel density estimation is in estimating the class-conditional marginal densities of data when using a naive Bayes classifier,
which can improve its prediction accuracy.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This complicated sentence can be translated into the below image:&lt;/p&gt;
&lt;img alt="KDE plot of 100 random points" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/KDE_plot.png" /&gt;
&lt;p&gt;That is what a KDE plot of 100 random points looks like. The greener the area, the greater the density of points. The plan is to implement
something like that with the tools we now have available.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-03-week-5-joaodellagli.html"/>
    <summary>Hello everyone, time for another weekly blogpost! Today, we will talk about taking different paths to reach your objective.</summary>
    <category term="google" label="google"/>
    <published>2023-07-03T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-06-26-week-4-joaodellagli.html</id>
    <title>Week 4: Nothing is Ever Lost</title>
    <updated>2023-06-26T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-4-nothing-is-ever-lost"&gt;

&lt;p&gt;Welcome again to another weekly blogpost! Today, let’s talk about the importance of guidance throughout a project.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;So, last week my project was struggling with some supposedly simple in concept, yet intricate in execution issues. If you recall from
my &lt;span class="xref std std-doc"&gt;last blogpost&lt;/span&gt;, I could not manage to make the Framebuffer Object setup work, as its method,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SetContext()&lt;/span&gt;&lt;/code&gt;, wasn’t being able to generate the FBO inside OpenGL. Well, after some (more) research about that as I also dived in my
plan B, that involved studying numba as a way to accelerate a data structure I implemented on my PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/783"&gt;#783&lt;/a&gt;,
me and one of my mentors decided we needed a pair programming session, that finally happened on thursday. After that session,
we could finally understand what was going on.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;Apparently, for the FBO generation to work, it is first needed to initialize the context interactor:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FBO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkOpenGLFramebufferObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetOffScreenRendering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# so the window doesn&amp;#39;t show up, but important for later as well&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# missing part that made everything work&lt;/span&gt;

&lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Sets the context for the FBO. Finally, it works&lt;/span&gt;
&lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PopulateFramebuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# And now I could populate the FBO with textures&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-06-26-week-4-joaodellagli.rst&lt;/span&gt;, line 37)&lt;/p&gt;
&lt;p&gt;Possible title underline, too short for the title.
Treating it as ordinary text because it’s so short.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;This simple missing line of code was responsible for ending weeks of suffer, as after that, I called:&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-06-26-week-4-joaodellagli.rst&lt;/span&gt;, line 38)&lt;/p&gt;
&lt;p&gt;Unexpected indentation.&lt;/p&gt;
&lt;/aside&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBO of index:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetFBOIndex&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Number of color attachments:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetNumberOfColorAttachments&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-06-26-week-4-joaodellagli.rst&lt;/span&gt;, line 42)&lt;/p&gt;
&lt;p&gt;Possible title underline, too short for the title.
Treating it as ordinary text because it’s so short.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;That outputted:&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-06-26-week-4-joaodellagli.rst&lt;/span&gt;, line 43)&lt;/p&gt;
&lt;p&gt;Unexpected indentation.&lt;/p&gt;
&lt;/aside&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FBO&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That means the FBO generation was successful! One explanation that seems reasonable to me on why was that happening is that, as it was
not initialized, the context was being passed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;null&lt;/span&gt;&lt;/code&gt; to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SetContext()&lt;/span&gt;&lt;/code&gt; method, that returned without any warning of what was happening.&lt;/p&gt;
&lt;p&gt;Here, I would like to point out how my mentor was &lt;strong&gt;essential&lt;/strong&gt; to this solution to come: I had struggled for some time with that, and could
not find a way out, but a single session of synchronous pair programming where I could expose clearly my problem and talk to someone
way more experienced than I, someone designated for that, was my way out of this torment, so value your mentors! Thanks Bruno!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Now, with the FBO working, I plan to finally &lt;em&gt;render&lt;/em&gt; something to it. For this week, I plan to come back to my original plan and
experiment with simple shaders just as a proof of concept that the FBO will be really useful for this project. I hope the road is less
bumpier by now and I don’t step on any other complicated problem.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-06-26-week-4-joaodellagli.html"/>
    <summary>Welcome again to another weekly blogpost! Today, let’s talk about the importance of guidance throughout a project.</summary>
    <category term="google" label="google"/>
    <published>2023-06-26T00:00:00+00:00</published>
  </entry>
</feed>
