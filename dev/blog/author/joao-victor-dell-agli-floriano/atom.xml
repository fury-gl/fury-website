<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://fury.gl/</id>
  <title>Blog - Posts by João Victor Dell Agli Floriano</title>
  <updated>2023-06-19T19:10:23.139828+00:00</updated>
  <link href="https://fury.gl/"/>
  <link href="https://fury.gl/blog/author/joao-victor-dell-agli-floriano/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.4.post1">ABlog</generator>
  <entry>
    <id>https://fury.gl/posts/2023/2023-06-12-week-2-joaodellagli.html</id>
    <title>Week 2: The Importance of (good) Documentation</title>
    <updated>2023-06-12T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-2-the-importance-of-good-documentation"&gt;

&lt;p&gt;Hello everybody, welcome to the week 2 of this project! I must admit I thought this would be simpler than it is currently being, but I forgot that when it comes to dealing with computer graphics’ applications, things never are. Below, some updates on what I have been up to for this past week.&lt;/p&gt;
&lt;section id="this-last-week-s-effort"&gt;
&lt;h2&gt;This Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;Last week, I was facing some issues with a VTK feature essential so I could move forward with my project: Framebuffer Objects.
As described in my &lt;span class="xref std std-doc"&gt;last blogpost&lt;/span&gt;, for some reason the 2D allocation methods for it weren’t working.
In a meeting with my mentors, while we were discussing and searching through VTK’s FramebufferObject and TextureObject documentation, and the code itself for the problem,
one TextureObject method caught my attention: &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#a0988fa2a30b640c93392c2188030537e"&gt;vtkTextureObject.SetContext()&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;My last week’s code was:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color_texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkTextureObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# color texture declaration&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# binding of the texture for operations&lt;/span&gt;

&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetDataType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the datatype for unsigned char&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInternalFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGBA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the format as RGBA&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGBA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMinificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the minfilter as linear&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMagnificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the magfilter as linear&lt;/span&gt;

&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Allocate2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# here is where the code stops&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But it turns out that to allocate the FBO’s textures, of type vtkTextureObject, you need to also set the context where the texture object
will be present, so it lacked a line, that should be added after &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Bind()&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color_texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkTextureObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set the context where the texture object will be present&lt;/span&gt;

&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetDataType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInternalFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMinificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMagnificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The code worked fine. But as my last blogpost showed, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate3D()&lt;/span&gt;&lt;/code&gt; method worked just fine without a (visible) problem, why is that?
Well, in fact, it &lt;strong&gt;didn’t work&lt;/strong&gt;. If we check the code for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate2D()&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate3D()&lt;/span&gt;&lt;/code&gt;, one difference can be spotted:&lt;/p&gt;
&lt;img alt="Image comparing Allocate2D and Allocate3D methods" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/allocate-2d-3d.png" /&gt;
&lt;p&gt;While in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate2D()&lt;/span&gt;&lt;/code&gt; there is an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert(this-&amp;gt;Context);&lt;/span&gt;&lt;/code&gt;, in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate3D()&lt;/span&gt;&lt;/code&gt; the assertion is translated into:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;vtkErrorMacro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No context specified. Cannot create texture.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This slight difference is significant: while in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate2D()&lt;/span&gt;&lt;/code&gt; the program immediately fails, in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate3D()&lt;/span&gt;&lt;/code&gt; the function is simply returned
&lt;strong&gt;false&lt;/strong&gt;, with its error pushed to vtkErrorMacro. I could have realised that earlier if I were using vtkErrorMacro, but this difference in their
implementation made it harder for me and my mentors to realise what was happening.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;After making that work, this week’s goal is to render something to the Framebuffer Object, now that is working. To do that,
first I will need to do some offscreen rendering to it, and afterwards render what it was drawn to its color attachment, the Texture Object I
was struggling to make work, into the screen, drawing its texture to a billboard. Also, I plan to start using vtkErrorMacro, as it seems like
the main error interface when working with VTK, and that may make my life easier.&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-06-12-week-2-joaodellagli.html" rel="alternate"/>
    <summary>Hello everybody, welcome to the week 2 of this project! I must admit I thought this would be simpler than it is currently being, but I forgot that when it comes to dealing with computer graphics’ applications, things never are. Below, some updates on what I have been up to for this past week.</summary>
    <category term="google" label="google"/>
    <published>2023-06-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-06-05-week-1-joaodellagli.html</id>
    <title>The FBO Saga - Week 1</title>
    <updated>2023-06-05T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="the-fbo-saga-week-1"&gt;

&lt;section id="this-past-week"&gt;
&lt;h2&gt;This Past Week&lt;/h2&gt;
&lt;p&gt;As mentioned in the last week’s blogpost, the goal for that week was to investigate VTK’s Framebuffer Object framework.
An update on that is that indeed, VTK has one more low-level working &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkOpenGLFramebufferObject.html"&gt;FBO class&lt;/a&gt; that can be used inside FURY, however,
they come with some issues that I will explain further below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-current-problems"&gt;
&lt;h2&gt;My Current Problems&lt;/h2&gt;
&lt;p&gt;The problems I am having with these FBO implementations are first something related to how a FBO works, and second related to how VTK works.
In OpenGL, a custom user’s FBO needs some things to be complete (usable):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;At least one buffer should be attached. This buffer can be the color, depth or stencil buffer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If no color buffer will be attached then OpenGL needs to be warned no draw or read operations will be done to that buffer. Otherwise, there should be at least one color attachment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All attachments should have their memory allocated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each buffer should have the same number of samples.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My first problem relies on the third requirement. VTK’s implementation of FBO requires a &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html"&gt;vtkTextureObject&lt;/a&gt;
as a texture attachment. I figured out how to work with this class, however, I cannot allocate memory for it, as its methods for it, &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#abc91bbf9a3414bded7a132d366ca4951"&gt;Allocate2D&lt;/a&gt;, &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#a7e9dd67f377b7f91abd9df71e75a5f67"&gt;Create2D&lt;/a&gt; and &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#a0e56fe426cb0e6749cc6f2f8dbf53ed7"&gt;Create2DFromRaw&lt;/a&gt;
does not seem to work. Every time I try to use them, my program stops with no error message nor nothing.
For anyone interested in what is happening exactly, below is how I my tests are implemented:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkTextureObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# color texture declaration&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# binding of the texture for operations&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetDataType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the datatype for unsigned char&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInternalFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGBA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the format as RGBA&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGBA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMinificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the minfilter as linear&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMagnificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the magfilter as linear&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Allocate2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# here is where the code stops&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In contrast, for some reason, the methods for 3D textures, &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#aaeefa46bd3a24bf62126512a276819d0"&gt;Allocate3D&lt;/a&gt; works just fine.
I could use it as a workaround, but I do not wish to, as this just does not make sense.&lt;/p&gt;
&lt;p&gt;My second problem relies on VTK. As VTK is a library that encapsulates some OpenGL functions in more palatable forms, it comes with some costs.
Working with FBOs is a more low-level work, that requires strict control of some OpenGL states and specific functions that would be simpler if it was the main API here.
However, some of this states and functions are all spread and implicit through VTK’s complex classes and methods, which doubles the time expended to make some otherwise simple instructions,
as I first need to dig in lines and lines of VTK’s documentation, and worse, the code itself.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-about-next-week"&gt;
&lt;h2&gt;What About Next Week?&lt;/h2&gt;
&lt;p&gt;For this next week, I plan to investigate further on why the first problem is happening. If that is accomplished, then things will be more simple, as it will be a lot easier for my project to move forward as I will finally be able
to implement the more pythonic functions needed to finally render some kernel distributions onto my screen.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-06-05-week-1-joaodellagli.html" rel="alternate"/>
    <summary>As mentioned in the last week’s blogpost, the goal for that week was to investigate VTK’s Framebuffer Object framework.
An update on that is that indeed, VTK has one more low-level working FBO class that can be used inside FURY, however,
they come with some issues that I will explain further below.</summary>
    <category term="google" label="google"/>
    <published>2023-06-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/29-05-2023-week-0-joaodellagli.html</id>
    <title>The Beginning of Everything - Week 0</title>
    <updated>2023-05-29T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="the-beginning-of-everything-week-0"&gt;

&lt;section id="so-it-begins"&gt;
&lt;h2&gt;So it begins…&lt;/h2&gt;
&lt;p&gt;Hello everyone, welcome to the beginning of my journey through GSoC 2023! I would like to thank everyone involved for the opportunity provided, it is an honour to be working side by side with professionals and so many experienced people from around the world.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-community-bonding-period"&gt;
&lt;h2&gt;The Community Bonding Period&lt;/h2&gt;
&lt;p&gt;During my community bonding period, I had the opportunity to meet my mentors and some people from the FURY team. It was a great time to learn about community guidelines and everything I will need to work with them during this summer.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-project-s-goal"&gt;
&lt;h2&gt;The Project’s Goal&lt;/h2&gt;
&lt;p&gt;Briefly explaining this project, I plan to implement a real-time Kernel Density Estimation shader inside FURY library, based on &lt;a class="reference external" href="https://github.com/filipinascimento/PACSExplorer/blob/782e52334a635528ec3ab4c7a4409cc88958d3ba/lib/density-gl.js"&gt;Filipi Nascimento’s WebGL implementation&lt;/a&gt;. KDE, or Kernel Density Estimation, is a visualization technique that provides a good macro visualization of large and complex data sets, like point clouds, well summarizing their spatial distribution in smooth areas. I really think FURY will benefit from this as a scientific library, knowing it is a computer graphics library that originated in 2018 based on the Visualization Toolkit API (VTK), and has been improving since then.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goal"&gt;
&lt;h2&gt;This Week’s Goal&lt;/h2&gt;
&lt;p&gt;For all of this to work, the project needs one component working: the &lt;strong&gt;KDE framebuffer&lt;/strong&gt;. As this &lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Framebuffer"&gt;Khronos wiki page well explains&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;“A Framebuffer is a collection of buffers that can be used as the destination for rendering. OpenGL has two kinds of framebuffers: the &lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Default_Framebuffer"&gt;Default Framebuffer&lt;/a&gt;,
which is provided by the &lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/OpenGL_Context"&gt;OpenGL Context&lt;/a&gt;; and user-created framebuffers called &lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Framebuffer_Object"&gt;Framebuffer Objects&lt;/a&gt; (FBOs).
The buffers for default framebuffers are part of the context and usually represent a window or display device. The buffers for FBOs reference images from either &lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Texture"&gt;Textures&lt;/a&gt; or &lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Renderbuffer_Object"&gt;Renderbuffers&lt;/a&gt;; they are never directly visible.”&lt;/p&gt;
&lt;p&gt;Which means that a framebuffer is an object that stores data related to a frame. So the goal for this week is to investigate whether VTK, the API which FURY is written on, has a framebuffer object interface, and if it has, to understand how it works and how to use it for the project.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/29-05-2023-week-0-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, welcome to the beginning of my journey through GSoC 2023! I would like to thank everyone involved for the opportunity provided, it is an honour to be working side by side with professionals and so many experienced people from around the world.</summary>
    <category term="google" label="google"/>
    <published>2023-05-29T00:00:00+00:00</published>
  </entry>
</feed>
