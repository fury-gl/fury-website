<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://fury.gl/</id>
  <title>Blog - Posts by João Victor Dell Agli Floriano</title>
  <updated>2023-08-18T15:14:40.602036+00:00</updated>
  <link href="https://fury.gl/"/>
  <link href="https://fury.gl/blog/author/joao-victor-dell-agli-floriano/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.4.post1">ABlog</generator>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-07-week-10-joaodellagli.html</id>
    <title>Week 10: Ready for Review!</title>
    <updated>2023-08-07T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-10-ready-for-review"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost!&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After talking with my mentors, I was tasked with getting my API PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;#826&lt;/a&gt; ready for review,
as it still needed some polishing, and the most important of all, it needed its tests working, as this was something I haven’t invested time since its creation.
Having that in mind, I have spent the whole week cleaning whatever needed, writing the tests, and also writing a simple example of its
usage. I also tried implementing a little piece of UI so the user could control the intensity of the bandwidth of the KDE render, but
I had a little problem I will talk about below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Fortunately, for the cleaning part, I didn’t have any trouble, and my PR is finally ready for review! The most complicated part was to write the tests, as this is something that
requires attention to understand what needs to be tested, exactly. As for the UI part, I managed to have a slider working for the
intensity, however, it was crashing the whole program for a reason, so I decided to leave this idea behind for now.
Below, an example of how this should work:&lt;/p&gt;
&lt;img alt="Buggy slider for the intensity control of the bandwidth of the KDE" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/slider.gif" /&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;After a meeting with my mentors, we decided that this week’s focus should be on finding a good usage example of the KDE rendering feature,
to have it as a showcase of the capability of this API. Also, they hinted me some changes that need to be done regarding the API, so I
will also invest some time on refactoring it.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-07-week-10-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, it’s time for another weekly blogpost!</summary>
    <category term="google" label="google"/>
    <published>2023-08-07T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-31-week-9-joaodellagli.html</id>
    <title>Week 9: It is Polishing Time!</title>
    <updated>2023-07-31T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-9-it-is-polishing-time"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! Today, I am going to update you on my project’s latest changes.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After having finished a first draft of the API that will be used for the KDE rendering, and showing how it could be used
for other post-processing effects, my goal was to clean the code and try some details that would add to it so it could be better
complete. Having that in mind, I invested in three work fronts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Fixing some bugs related to the rendering more than one post-processing effect actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Experimenting with other rendering kernels (I was using the &lt;em&gt;gaussian&lt;/em&gt; one only).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Completing the KDE render by renormalizing the values in relation to the number of points (one of the core KDE details).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both three turned out more complicated than it initially seemed, as I will show below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;The first one I did on monday-tuesday, and I had to deal with some issues regarding scaling and repositioning. Due to implementation
choices, the final post-processed effects were rendered either bigger than they were in reality, or out of their original place.
After some time dedicated to finding the root of the problems, I could fix the scaling issue, however I realised I would need to,
probably, rethink the way the API was implemented. As this general post-processing effects is a side-project that comes as a consequence of
my main one, I decided to leave that investment to another time, as I would need to guarantee the quality of the second.&lt;/p&gt;
&lt;p&gt;The second was an easy and rather interesting part of my week, as I just needed to setup new kernel shaders. Based on
&lt;a class="reference external" href="https://scikit-learn.org/stable/modules/density.html"&gt;scikit-learn KDE documentation&lt;/a&gt;, I could successfully implement the following kernels:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Gaussian&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = e^{\frac{-(x^2 + y^2)}{2\sigma^2}}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Tophat&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1.0, \ \ |x^2 + y^2| &amp;lt; \sigma\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Epanechnikov&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1 - \frac{x^2 + y^2}{\sigma^2}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Exponential&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = e^{\frac{-|x^2 + y^2|}{\sigma}}\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Linear&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = 1 - \frac{|x^2 + y^2|}{\sigma}, \ \ |x^2 + y^2| &amp;lt; \sigma\]&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Cosine&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[K(x, y) = cos(\frac{\pi|x^2 + y^2|}{2\sigma})\]&lt;/div&gt;
&lt;p&gt;That outputted the following (beautiful) results for a set of 1000 random points with random sigmas:&lt;/p&gt;
&lt;img alt="Different kernel approaches" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/kernels.png" /&gt;
&lt;p&gt;The third one is still being a trickier challenge. If you recall from my first blogposts, I spent something around &lt;em&gt;one month&lt;/em&gt; trying to setup
float framebuffer objects to FURY with VTK so I could use them in my project. After spending all of that time with no results,
me and Bruno, my mentor, &lt;span class="xref std std-doc"&gt;found a way&lt;/span&gt; to do what we wanted to do, but using a different VTK class,
&lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkWindowToImageFilter.html"&gt;vtkWindowToImageFilter&lt;/a&gt;. Well, it was a good workaround back then and
it lead me all the way here, however now it is costing a price. The float framebuffers were an important part of the project because they
would allow us to pass &lt;em&gt;32-bit float information&lt;/em&gt; from one shader to another, which would be important as they would allow the densities to
have higher precision and more fidelity to the calculations. When rendering a KDE of a given set of points, we use the below function:&lt;/p&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[KDE(x, y) = \frac{1}{n} \sum_{i = 0}^n K(x, y)\]&lt;/div&gt;
&lt;p&gt;If the number of points &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt; is big enough, some KDE results will be really low. This presents a real problem to our implementation because, without
the float framebuffers, it is currently only being possible to pass &lt;em&gt;8-bit unsigned char&lt;/em&gt; information, that only allows 256 values.
This is far from ideal, as low values would have alone densities low enough to disappear. This presented a problem as to renormalize the
densities, I was retrieving the texture to the CPU, calculating its minimum and maximum values, and passing to the fragment shader as uniforms
for the renormalization, which didn’t work if the maximum values calculated were zero.&lt;/p&gt;
&lt;p&gt;One solution I thought to solve that was a really heavy workaround: if an unsigned float is 32-bit and I have exactly 4 8-bit
unsigned chars, why not try to pack this float into these 4 chars? Well, this is an interesting approach which I figured out is already an
old one, being reported in &lt;a class="reference external" href="https://developer.nvidia.com/gpugems/gpugems/part-ii-lighting-and-shadows/chapter-12-omnidirectional-shadow-mapping"&gt;GPU Gems’s chapter 12&lt;/a&gt;.
Unfortunately I haven’t tried yet this implementation yet, and went for one I thought myself, which haven’t exactly worked. I also tried
this implementation from &lt;a class="reference external" href="https://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/"&gt;Aras Pranckevičius’ website&lt;/a&gt;, which seems
to be working, even though not perfectly:&lt;/p&gt;
&lt;img alt="Noisy float to RGBA encoding" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/noisy%20kde.png" /&gt;
&lt;p&gt;As you can see, this implementation is &lt;em&gt;really noisy&lt;/em&gt;. I think this has to deal with floating point rounding errors, so to try to mitigate
that, I experimented applying a &lt;em&gt;13x13 gaussian blur&lt;/em&gt; to it. Below, what I got from that:&lt;/p&gt;
&lt;img alt="Blurred KDE result" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/blurred_kde.png" /&gt;
&lt;p&gt;That looks way better, even though not ideal yet.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Talking with my mentors, we decided it was better if I focused on the version without the renormalization for now, as it was already
done and running fine. So for this week, I plan to clean my PR to finally have it ready for a first review, and maybe add to it a little
UI tool to control the intensity of the densities. That should take me some time and discussion, but I hope for it to be ready by the
end of the week.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-31-week-9-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! Today, I am going to update you on my project’s latest changes.</summary>
    <category term="google" label="google"/>
    <published>2023-07-31T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-24-week-8-joaodellagli.html</id>
    <title>Week 8: The Birth of a Versatile API</title>
    <updated>2023-07-24T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-8-the-birth-of-a-versatile-api"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! Today, I am going to tell you all about how is the KDE API development going, and
to show you the potential this holds for the future!&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;Last week I told you how I managed to render some KDE renders to the screen, both in 2D and 3D, as you may check by my last blogpost.
My new task was, as I had this example working, to start the API development. In a meeting with Bruno, one of my mentors, we debated
on how could this work, reaching two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Implement the KDE in a single, simple actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement a KDE rendering manager, as a class.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first one would have the advantage of being simple and pretty straightforward, as a user would only need to call the actor and have
it working on their hands, having the tradeoff of leaving some important steps for a clean API hidden and static. These steps I mention
are related to how this rendering works, as I have previously &lt;span class="xref std std-doc"&gt;showed you&lt;/span&gt;, it relies on post-processing effects,
which need an offscreen rendering, that for example are done by the &lt;em&gt;callback functions&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In short, these functions are instructions the user gives to the interactor to run inside the interaction loop. Inside FURY there are tree
types of callbacks passed to the window interactor:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Timer Callbacks&lt;/strong&gt;: Added to the window interactor, they are a set of instructions that will be called from time to time, with interval defined by the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Window Callbacks&lt;/strong&gt;: Added directly to the window, they are  a set of instructions called whenever an specific event is triggered.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interactor Callbacks&lt;/strong&gt;: Added to the window interactor, they are a set of instructions called whenever an specific interaction, for example a mouse left-click, is triggered.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this API, I will be using the &lt;em&gt;Interactor Callback&lt;/em&gt;, set by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;window.add_iren_callback()&lt;/span&gt;&lt;/code&gt; function, that will be called whenever a &lt;em&gt;Render&lt;/em&gt;
interaction is detected, and needs to be first passed to the onscreen manager.&lt;/p&gt;
&lt;p&gt;These details are more complicated, and would need, for example, for the user to pass the onscreen manager to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;actor.kde()&lt;/span&gt;&lt;/code&gt; function.
Also, in the case of a kde actor not being used anymore and being declared, the callback then passed would still exist inside the manager and
be called even when the kde actor is not on screen anymore, which is not ideal.&lt;/p&gt;
&lt;p&gt;Knowing these problems, we thought of a second option, that would have the advantage of not leaving those details and steps behind. It has
the tradeoff of maybe complicating things as it would need to be called after calling the effects manager, but as I will show you below,
it is not that complicated &lt;em&gt;at all&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I also reviewed my fellow GSoC contributors PR’s as well, PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/810"&gt;#810&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/803"&gt;#803&lt;/a&gt;. Bruno told me to take a look as well on &lt;a class="reference external" href="https://www.conventionalcommits.org"&gt;Conventional Commits&lt;/a&gt; , a way to standardize
commits by prefixes, so I did that as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;Well, the implemented manager class is named &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;EffectManager()&lt;/span&gt;&lt;/code&gt; and to initialize it you only need to pass the onscreen manager.
The onscreen manager is the standard FURY window manager you would use in a normal FURY-based program:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Onscreen manager setup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;

&lt;span class="n"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;onscreen_manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;effects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After that, to render a KDE calculation of points to the screen, you need only to call its &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;kde()&lt;/span&gt;&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colormap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;inferno&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Those last two are optional&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pass it to the onscreen manager scene:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And to start it, as usual:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;onscreen_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As simple as that. This three lines of code output the same result as I showed you last week, this time, with different sigmas for each
point:&lt;/p&gt;
&lt;img alt="3D KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/3d_kde_gif.gif" /&gt;
&lt;p&gt;After having that working, I experimented beyond. See, as I previously said, we are dealing here with &lt;em&gt;post-processing effects&lt;/em&gt;, with KDE
being only one of the many existing ones, as this &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Video_post-processing"&gt;Wikipedia Page&lt;/a&gt; on post processing shows.
Knowing that, I tried one of the first filters I learned, the Laplacian one. This filter is, as its name hints, applying the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Discrete_Laplace_operator"&gt;Discrete Laplace Operator&lt;/a&gt; in an image. This filter shows sudden changes of value, a
good way to detect borders. The process is the same as the kde actor, requiring only the actor you want to apply the filter to.
Below, the result I got from applying that to a box actor:&lt;/p&gt;
&lt;img alt="Laplacian filter applied to a cube object." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/laplacian1.gif" /&gt;
&lt;p&gt;Something I found important to leave as an option was filter compositing. What if an user wanted to, for example, apply one laplacian filter
after another? Well, the example below shows that is possible as well:&lt;/p&gt;
&lt;img alt="Double laplacian application on the box actor." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/laplacian2.gif" /&gt;
&lt;p&gt;It still needs some tweaks and suffers from some bugs, but it works! Those represent important progress as it shows the versatility this
API may present. I have also already implemented &lt;cite&gt;grayscale&lt;/cite&gt; and &lt;cite&gt;3x3 gaussian blur&lt;/cite&gt; as well:&lt;/p&gt;
&lt;img alt="3x3 Gaussian Blur filter applied to a cube." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/gaussian_blur.png" /&gt;
&lt;img alt="Grayscale filter applied to a cube." class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/grayscale.png" /&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;My plans for this week are to keep working and polishing the API, mainly the KDE part, so it can be ready for a first review.
When that is ready, I plan to experiment with more filters and make this more dynamic, maybe implementing a way to apply custom kernel
transformations, passed by the user, to the rendering process. This has been a really exciting journey and I am getting happy with the results!&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-24-week-8-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! Today, I am going to tell you all about how is the KDE API development going, and
to show you the potential this holds for the future!</summary>
    <category term="google" label="google"/>
    <published>2023-07-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-17-week-7-joaodellagli.html</id>
    <title>Week 7: Experimentation Done</title>
    <updated>2023-07-17T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-7-experimentation-done"&gt;

&lt;p&gt;Hello everyone, welcome to another weekly blogpost! Let’s talk about the current status of my project (spoiler: it is beautiful).&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;Having accomplished a KDE rendering to a billboard last week, I was then tasked with trying a different approach to how the
rendering was done. So, to recap, below was how I was doing it:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Render one point’s KDE offscreen to a single billboard, passing its position and sigma to the fragment shader as uniforms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Capture the last rendering’s screen as a texture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render the next point’s KDE, and sum it up with the last rendering’s texture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do this until the end of the points.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Capture the final render screen as a texture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply post processing effects (colormapping).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render the result to the screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This approach was good, but it had some later limitations and issues that would probably take more processing time and attention to details (correct matrix
transformations, etc) than the ideal. The different idea is pretty similar, but with some differences:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Activate additive blending in OpenGL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render each point’s KDE to its own billboard, with position defined by the point’s position, all together in one pass.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Capture the rendered screen as a texture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pass this texture to a billboard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apply post processing effects (colormapping).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render the result to the screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I needed to basically do that.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="was-it-hard"&gt;
&lt;h2&gt;Was it Hard?&lt;/h2&gt;
&lt;p&gt;Fortunately, it wasn’t so hard to do it in the end. Following those steps turned out pretty smooth, and after some days,
I had the below result:&lt;/p&gt;
&lt;img alt="Final 2D KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/final_2d_plot.png" /&gt;
&lt;p&gt;This is a 2D KDE render of random 1000 points. For this I used the &lt;em&gt;“viridis”&lt;/em&gt; colormap from &lt;cite&gt;matplotlib&lt;/cite&gt;. Some details worth noting:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;For this to work, I have implemented three texture helper functions: &lt;cite&gt;window_to_texture()&lt;/cite&gt;, &lt;cite&gt;texture_to_actor()&lt;/cite&gt; and &lt;cite&gt;colormap_to_texture()&lt;/cite&gt;. The first one captures a window and pass it as a texture to an actor, the second one passes an imported texture to an actor, and the last one passes a colormap, prior passed as an array, as a texture to an actor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The colormap is directly get from &lt;cite&gt;matplotlib&lt;/cite&gt;, available in its &lt;cite&gt;colormaps&lt;/cite&gt; object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This was only a 2D flatten plot. At first, I could not figure out how to make the connection between the offscreen interactor and the onscreen one, so rotating and moving around the render was not happening. After some ponder and talk to my mentors, they told me to use &lt;em&gt;callback&lt;/em&gt; functions inside the interactor, and after doing that, I managed to make the 3D render work, which had the following result:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="3D KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/3d_kde_gif.gif" /&gt;
&lt;p&gt;After those results, I refactored my PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;#804&lt;/a&gt; to better fit its current status, and it is
now ready for review. Success!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;After finishing the first iteration of my experimental program, the next step is to work on an API for KDE rendering. I plan to meet
with my mentors and talk about the details of this API, so expect an update next week. Also, I plan to take a better look on my fellow GSoC FURY
contributors work so when their PRs are ready for review, I will have to be better prepared for it.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-17-week-7-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, welcome to another weekly blogpost! Let’s talk about the current status of my project (spoiler: it is beautiful).</summary>
    <category term="google" label="google"/>
    <published>2023-07-17T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-10-week-6-joaodellagli.html</id>
    <title>Week 6: Things are Starting to Build Up</title>
    <updated>2023-07-10T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-6-things-are-starting-to-build-up"&gt;

&lt;p&gt;Hello everyone, time for a other weekly blogpost! Today, I will show you my current progress on my project and latest activities.&lt;/p&gt;
&lt;section id="what-i-did-last-week"&gt;
&lt;h2&gt;What I did Last Week&lt;/h2&gt;
&lt;p&gt;Last week I had the goal to implement KDE rendering to the screen (if you want to understand what this is, check my &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;:doc:`last blogpost &amp;lt;2023-07-03-week-5-joaodellagli&amp;gt;`_&lt;/span&gt;&lt;/a&gt;).
After some days diving into the code, I finally managed to do it:&lt;/p&gt;
&lt;aside class="system-message" id="id1"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-07-10-week-6-joaodellagli.rst&lt;/span&gt;, line 14); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mismatch: both interpreted text role prefix and reference suffix.&lt;/p&gt;
&lt;/aside&gt;
&lt;img alt="KDE render to a billboard" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/buffer_compose.png" /&gt;
&lt;p&gt;This render may seem clean and working, but the code isn’t exactly like that. For this to work, some tricks and work arounds needed to
be done, as I will describe in the section below.&lt;/p&gt;
&lt;p&gt;Also, I reviewed the shader part of Tania’s PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/791"&gt;#791&lt;/a&gt;, that implement ellipsoid actors inside
FURY. It was my first review of a PR that isn’t a blogpost, so it was an interesting experience and I hope I can get better at it.&lt;/p&gt;
&lt;p&gt;It is important as well to point out that I had to dedicate myself to finishing my graduation capstone project’s presentation that I will attend
to this week, so I had limited time to polish my code, which I plan to do better this week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;The KDE render basically works rendering the KDE of a point to a texture and summing that texture to the next render. For this to work,
the texture, rendered to a billboard, needs to be the same size of the screen, otherwise the captured texture will include the black background.
The problem I faced with that is that the billboard scaling isn’t exactly well defined, so I had to guess for a fixed screen size
(in this example, I worked with &lt;em&gt;600x600&lt;/em&gt;) what scaling value made the billboard fit exactly inside the screen (it’s &lt;em&gt;3.4&lt;/em&gt;). That is far from ideal as I
will need to modularize this behavior inside a function that needs to work for every case, so I will need to figure out a way to fix that
for every screen size. For that, I have two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Find the scaling factor function that makes the billboard fit into any screen size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Figure out how the scaling works inside the billboard actor to understand if it needs to be refactored.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first seems ok to do, but it is kind of a work around as well. The second one is a good general solution, but it is a more delicate one,
as it deals with how the billboard works and already existing applications of it may suffer problems if the scaling is changed.
I will see what is better talking with my mentors.&lt;/p&gt;
&lt;p&gt;Another problem I faced (that is already fixed) relied on shaders. I didn’t fully understood how shaders work inside FURY so I was
using my own fragment shader implementation, replacing the already existing one completely. That was working, but I was having an issue
with the texture coordinates of the rendering texture. As I completely replaced the fragment shader, I had to pass custom texture coordinates
to it, resulting in distorted textures that ruined the calculations. Those issues motivated me to learn the shaders API, which allowed me
to use the right texture coordinates and finally render the results you see above.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;For this week, I plan to try a different approach Filipi, one of my mentors, told me to do. This approach was supposed to be the original
one, but a communication failure lead to this path I am currently in. This approach renders each KDE calculation into its own billboard,
and those are rendered together with additive blending. After this first pass, this render is captured into a texture and then rendered to
another big billboard.&lt;/p&gt;
&lt;p&gt;Also, I plan to refactor my draft PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;#804&lt;/a&gt; to make it more understandable, as its description still dates back to the time I was using the
flawed Framebuffer implementation, and my fellow GSoC contributors will eventually review it, and to do so, they will need to understand it.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-10-week-6-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, time for a other weekly blogpost! Today, I will show you my current progress on my project and latest activities.</summary>
    <category term="google" label="google"/>
    <published>2023-07-10T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-07-03-week-5-joaodellagli.html</id>
    <title>Week 5: All Roads Lead to Rome</title>
    <updated>2023-07-03T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-5-all-roads-lead-to-rome"&gt;

&lt;p&gt;Hello everyone, time for another weekly blogpost! Today, we will talk about taking different paths to reach your objective.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After having the FBO properly set up, the plan was to finally &lt;em&gt;render&lt;/em&gt; something to it. Well, I wished for a less bumpy road
at my &lt;span class="xref std std-doc"&gt;last blogpost&lt;/span&gt; but as in this project things apparently tend to go wrong,
of course the same happened with this step.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;Days passed without anything being rendered to the FBO. The setup I was working on followed the simplest OpenGL pipeline of rendering to
an FBO:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Setup the FBO&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attach a texture to it’s color attachment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setup the shader to be used in the FBO render and the shader to render the FBO’s Color Attachment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Render to the FBO&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the color attachment as texture attached to a billboard to render what was on the screen&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But it seems like this pipeline doesn’t translate well into VTK. I paired again on wednesday with my mentors, Bruno and Filipi, to try to figure out
where the problem was, but after hours we could not find it. Wednesday passed and then thursday came, and with thursday, a solution:
Bruno didn’t give up on the idea and dug deep on VTK’s documentation until he found a workaround to do what we wanted, that was retrieving a
texture from what was rendered to the screen and pass it as a texture to render to the billboard. To do it, he figured out we needed to use
a different class, &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkWindowToImageFilter.html"&gt;vtkWindowToImageFilter&lt;/a&gt;, a class that has the specific
job of doing exactly what I described above. Below, the steps to do it:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;windowToImageFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkWindowToImageFilter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;windowToImageFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRenderWindow&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;windowToImageFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkTexture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInputConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;windowToImageFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOutputPort&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Bind the framebuffer texture to the desired actor&lt;/span&gt;
&lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetTexture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is enough to bind to the desired actor a texture that corresponds to what was prior rendered to the screen.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Having a solution to that, now its time to finally render some KDE’s! This week’s plans involve implementing the first version of a KDE
calculation. For anyone interested in understanding what a Kernel Density Estimation is, here is a brief summary from this
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kernel_density_estimation"&gt;Wikipedia page&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;In statistics, kernel density estimation (KDE) is the application of kernel smoothing for probability density estimation, i.e., a
non-parametric method to estimate the probability density function of a random variable based on kernels as weights. KDE answers a
fundamental data smoothing problem where inferences about the population are made, based on a finite data sample. In some fields
such as signal processing and econometrics it is also termed the Parzen–Rosenblatt window method, after Emanuel Parzen and Murray
Rosenblatt, who are usually credited with independently creating it in its current form. One of the famous applications of
kernel density estimation is in estimating the class-conditional marginal densities of data when using a naive Bayes classifier,
which can improve its prediction accuracy.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This complicated sentence can be translated into the below image:&lt;/p&gt;
&lt;img alt="KDE plot of 100 random points" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/KDE_plot.png" /&gt;
&lt;p&gt;That is what a KDE plot of 100 random points looks like. The greener the area, the greater the density of points. The plan is to implement
something like that with the tools we now have available.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-07-03-week-5-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, time for another weekly blogpost! Today, we will talk about taking different paths to reach your objective.</summary>
    <category term="google" label="google"/>
    <published>2023-07-03T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-06-26-week-4-joaodellagli.html</id>
    <title>Week 4: Nothing is Ever Lost</title>
    <updated>2023-06-26T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-4-nothing-is-ever-lost"&gt;

&lt;p&gt;Welcome again to another weekly blogpost! Today, let’s talk about the importance of guidance throughout a project.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;So, last week my project was struggling with some supposedly simple in concept, yet intricate in execution issues. If you recall from
my &lt;span class="xref std std-doc"&gt;last blogpost&lt;/span&gt;, I could not manage to make the Framebuffer Object setup work, as its method,
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SetContext()&lt;/span&gt;&lt;/code&gt;, wasn’t being able to generate the FBO inside OpenGL. Well, after some (more) research about that as I also dived in my
plan B, that involved studying numba as a way to accelerate a data structure I implemented on my PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/783"&gt;#783&lt;/a&gt;,
me and one of my mentors decided we needed a pair programming session, that finally happened on thursday. After that session,
we could finally understand what was going on.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;Apparently, for the FBO generation to work, it is first needed to initialize the context interactor:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FBO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkOpenGLFramebufferObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetOffScreenRendering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# so the window doesn&amp;#39;t show up, but important for later as well&lt;/span&gt;
&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# missing part that made everything work&lt;/span&gt;

&lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Sets the context for the FBO. Finally, it works&lt;/span&gt;
&lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PopulateFramebuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# And now I could populate the FBO with textures&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-06-26-week-4-joaodellagli.rst&lt;/span&gt;, line 37)&lt;/p&gt;
&lt;p&gt;Possible title underline, too short for the title.
Treating it as ordinary text because it’s so short.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;This simple missing line of code was responsible for ending weeks of suffer, as after that, I called:&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-06-26-week-4-joaodellagli.rst&lt;/span&gt;, line 38)&lt;/p&gt;
&lt;p&gt;Unexpected indentation.&lt;/p&gt;
&lt;/aside&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBO of index:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetFBOIndex&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Number of color attachments:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetNumberOfColorAttachments&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-06-26-week-4-joaodellagli.rst&lt;/span&gt;, line 42)&lt;/p&gt;
&lt;p&gt;Possible title underline, too short for the title.
Treating it as ordinary text because it’s so short.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;That outputted:&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-06-26-week-4-joaodellagli.rst&lt;/span&gt;, line 43)&lt;/p&gt;
&lt;p&gt;Unexpected indentation.&lt;/p&gt;
&lt;/aside&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FBO&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That means the FBO generation was successful! One explanation that seems reasonable to me on why was that happening is that, as it was
not initialized, the context was being passed &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;null&lt;/span&gt;&lt;/code&gt; to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SetContext()&lt;/span&gt;&lt;/code&gt; method, that returned without any warning of what was happening.&lt;/p&gt;
&lt;p&gt;Here, I would like to point out how my mentor was &lt;strong&gt;essential&lt;/strong&gt; to this solution to come: I had struggled for some time with that, and could
not find a way out, but a single session of synchronous pair programming where I could expose clearly my problem and talk to someone
way more experienced than I, someone designated for that, was my way out of this torment, so value your mentors! Thanks Bruno!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;Now, with the FBO working, I plan to finally &lt;em&gt;render&lt;/em&gt; something to it. For this week, I plan to come back to my original plan and
experiment with simple shaders just as a proof of concept that the FBO will be really useful for this project. I hope the road is less
bumpier by now and I don’t step on any other complicated problem.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-06-26-week-4-joaodellagli.html" rel="alternate"/>
    <summary>Welcome again to another weekly blogpost! Today, let’s talk about the importance of guidance throughout a project.</summary>
    <category term="google" label="google"/>
    <published>2023-06-26T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-06-19-week-3-joaodellagli.html</id>
    <title>Week 3: Watch Your Expectations</title>
    <updated>2023-06-19T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-3-watch-your-expectations"&gt;

&lt;p&gt;Hello everyone, it’s time for another weekly blogpost! This week,
I will talk about how you should watch your expectations when working with any project.&lt;/p&gt;
&lt;section id="this-last-week-s-effort"&gt;
&lt;h2&gt;This Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;As I supposedly managed to make the texture allocation part working, this last week’s goal was to render something to a FBO. Well, I could make
textures work, but what I wasn’t expecting and later realised, was that the FBO setup not working. Below I will describe where I got stuck.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;After getting the textures setup right, I was ready to render some color to the FBO. Well, I &lt;strong&gt;was&lt;/strong&gt;, because I didn’t expect
I would have another problem, this time, with the FBO setup. As described in my &lt;span class="xref std std-doc"&gt;week 1 blogpost&lt;/span&gt;,
a FBO needs some requirements to work. My current problem relies on the FBO method &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FBO.SetContext()&lt;/span&gt;&lt;/code&gt;, that for some reason is not being able to generate the FBO.
Below, how the method is currently operating:&lt;/p&gt;
&lt;img alt="Image showing the SetContext's VTK implementation" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/setcontext.png" /&gt;
&lt;p&gt;Apparently, the method is stuck before the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;this-&amp;gt;CreateFBO()&lt;/span&gt;&lt;/code&gt;, that can be checked when we call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FBO.GetFBOIndex()&lt;/span&gt;&lt;/code&gt;, that returns a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;0&lt;/span&gt;&lt;/code&gt; value,
meaning the FBO was not generated by the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;glGenFramebuffers()&lt;/span&gt;&lt;/code&gt; function, that is inside the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;GetContext()&lt;/span&gt;&lt;/code&gt; method.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;As I got stuck again with this simple step, talking with my mentors we concluded that a plan B is needed for my GSoC participation as
my current project is not having much progress. This plan B that I am gonna start working on this week involves working on &lt;a class="reference external" href="https://github.com/fury-gl/furyspeed"&gt;FURY Speed&lt;/a&gt;,
a FURY addon that aims to develop optimized functions and algorithms to help speed up graphical applications. The suggestion was to
work on a PR I submitted months ago, &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/783"&gt;#783&lt;/a&gt;, in a way to integrate that into FURY Speed.
Also, I plan to keep working on my current project to find the solution I will need to make the FBO usage work.&lt;/p&gt;
&lt;p&gt;Let’s get to work!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-06-19-week-3-joaodellagli.html" rel="alternate"/>
    <summary>Hello everyone, it’s time for another weekly blogpost! This week,
I will talk about how you should watch your expectations when working with any project.</summary>
    <category term="google" label="google"/>
    <published>2023-06-19T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-06-12-week-2-joaodellagli.html</id>
    <title>Week 2: The Importance of (good) Documentation</title>
    <updated>2023-06-12T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-2-the-importance-of-good-documentation"&gt;

&lt;p&gt;Hello everybody, welcome to the week 2 of this project! I must admit I thought this would be simpler than it is currently being, but I forgot that when it comes to dealing with computer graphics’ applications, things never are. Below, some updates on what I have been up to for this past week.&lt;/p&gt;
&lt;section id="this-last-week-s-effort"&gt;
&lt;h2&gt;This Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;Last week, I was facing some issues with a VTK feature essential so I could move forward with my project: Framebuffer Objects.
As described in my &lt;span class="xref std std-doc"&gt;last blogpost&lt;/span&gt;, for some reason the 2D allocation methods for it weren’t working.
In a meeting with my mentors, while we were discussing and searching through VTK’s FramebufferObject and TextureObject documentation, and the code itself for the problem,
one TextureObject method caught my attention: &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#a0988fa2a30b640c93392c2188030537e"&gt;vtkTextureObject.SetContext()&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-the-problem-was"&gt;
&lt;h2&gt;Where the Problem Was&lt;/h2&gt;
&lt;p&gt;My last week’s code was:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color_texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkTextureObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# color texture declaration&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# binding of the texture for operations&lt;/span&gt;

&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetDataType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the datatype for unsigned char&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInternalFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGBA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the format as RGBA&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGBA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMinificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the minfilter as linear&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMagnificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the magfilter as linear&lt;/span&gt;

&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Allocate2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# here is where the code stops&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But it turns out that to allocate the FBO’s textures, of type vtkTextureObject, you need to also set the context where the texture object
will be present, so it lacked a line, that should be added after &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Bind()&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;color_texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkTextureObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set the context where the texture object will be present&lt;/span&gt;

&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetDataType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInternalFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMinificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMagnificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The code worked fine. But as my last blogpost showed, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate3D()&lt;/span&gt;&lt;/code&gt; method worked just fine without a (visible) problem, why is that?
Well, in fact, it &lt;strong&gt;didn’t work&lt;/strong&gt;. If we check the code for the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate2D()&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate3D()&lt;/span&gt;&lt;/code&gt;, one difference can be spotted:&lt;/p&gt;
&lt;img alt="Image comparing Allocate2D and Allocate3D methods" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/allocate-2d-3d.png" /&gt;
&lt;p&gt;While in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate2D()&lt;/span&gt;&lt;/code&gt; there is an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;assert(this-&amp;gt;Context);&lt;/span&gt;&lt;/code&gt;, in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate3D()&lt;/span&gt;&lt;/code&gt; the assertion is translated into:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;vtkErrorMacro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No context specified. Cannot create texture.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This slight difference is significant: while in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate2D()&lt;/span&gt;&lt;/code&gt; the program immediately fails, in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Allocate3D()&lt;/span&gt;&lt;/code&gt; the function is simply returned
&lt;strong&gt;false&lt;/strong&gt;, with its error pushed to vtkErrorMacro. I could have realised that earlier if I were using vtkErrorMacro, but this difference in their
implementation made it harder for me and my mentors to realise what was happening.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="this-week-s-goals"&gt;
&lt;h2&gt;This Week’s Goals&lt;/h2&gt;
&lt;p&gt;After making that work, this week’s goal is to render something to the Framebuffer Object, now that is working. To do that,
first I will need to do some offscreen rendering to it, and afterwards render what it was drawn to its color attachment, the Texture Object I
was struggling to make work, into the screen, drawing its texture to a billboard. Also, I plan to start using vtkErrorMacro, as it seems like
the main error interface when working with VTK, and that may make my life easier.&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-06-12-week-2-joaodellagli.html" rel="alternate"/>
    <summary>Hello everybody, welcome to the week 2 of this project! I must admit I thought this would be simpler than it is currently being, but I forgot that when it comes to dealing with computer graphics’ applications, things never are. Below, some updates on what I have been up to for this past week.</summary>
    <category term="google" label="google"/>
    <published>2023-06-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-06-05-week-1-joaodellagli.html</id>
    <title>The FBO Saga - Week 1</title>
    <updated>2023-06-05T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="the-fbo-saga-week-1"&gt;

&lt;section id="this-past-week"&gt;
&lt;h2&gt;This Past Week&lt;/h2&gt;
&lt;p&gt;As mentioned in the last week’s blogpost, the goal for that week was to investigate VTK’s Framebuffer Object framework.
An update on that is that indeed, VTK has one more low-level working &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkOpenGLFramebufferObject.html"&gt;FBO class&lt;/a&gt; that can be used inside FURY, however,
they come with some issues that I will explain further below.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-current-problems"&gt;
&lt;h2&gt;My Current Problems&lt;/h2&gt;
&lt;p&gt;The problems I am having with these FBO implementations are first something related to how a FBO works, and second related to how VTK works.
In OpenGL, a custom user’s FBO needs some things to be complete (usable):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;At least one buffer should be attached. This buffer can be the color, depth or stencil buffer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If no color buffer will be attached then OpenGL needs to be warned no draw or read operations will be done to that buffer. Otherwise, there should be at least one color attachment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All attachments should have their memory allocated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each buffer should have the same number of samples.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My first problem relies on the third requirement. VTK’s implementation of FBO requires a &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html"&gt;vtkTextureObject&lt;/a&gt;
as a texture attachment. I figured out how to work with this class, however, I cannot allocate memory for it, as its methods for it, &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#abc91bbf9a3414bded7a132d366ca4951"&gt;Allocate2D&lt;/a&gt;, &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#a7e9dd67f377b7f91abd9df71e75a5f67"&gt;Create2D&lt;/a&gt; and &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#a0e56fe426cb0e6749cc6f2f8dbf53ed7"&gt;Create2DFromRaw&lt;/a&gt;
does not seem to work. Every time I try to use them, my program stops with no error message nor nothing.
For anyone interested in what is happening exactly, below is how I my tests are implemented:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vtkTextureObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# color texture declaration&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# binding of the texture for operations&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetDataType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the datatype for unsigned char&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetInternalFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGBA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the format as RGBA&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_RGBA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMinificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the minfilter as linear&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMagnificationFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setting the magfilter as linear&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;color_texture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Allocate2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VTK_UNSIGNED_CHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# here is where the code stops&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In contrast, for some reason, the methods for 3D textures, &lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkTextureObject.html#aaeefa46bd3a24bf62126512a276819d0"&gt;Allocate3D&lt;/a&gt; works just fine.
I could use it as a workaround, but I do not wish to, as this just does not make sense.&lt;/p&gt;
&lt;p&gt;My second problem relies on VTK. As VTK is a library that encapsulates some OpenGL functions in more palatable forms, it comes with some costs.
Working with FBOs is a more low-level work, that requires strict control of some OpenGL states and specific functions that would be simpler if it was the main API here.
However, some of this states and functions are all spread and implicit through VTK’s complex classes and methods, which doubles the time expended to make some otherwise simple instructions,
as I first need to dig in lines and lines of VTK’s documentation, and worse, the code itself.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-about-next-week"&gt;
&lt;h2&gt;What About Next Week?&lt;/h2&gt;
&lt;p&gt;For this next week, I plan to investigate further on why the first problem is happening. If that is accomplished, then things will be more simple, as it will be a lot easier for my project to move forward as I will finally be able
to implement the more pythonic functions needed to finally render some kernel distributions onto my screen.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-06-05-week-1-joaodellagli.html" rel="alternate"/>
    <summary>As mentioned in the last week’s blogpost, the goal for that week was to investigate VTK’s Framebuffer Object framework.
An update on that is that indeed, VTK has one more low-level working FBO class that can be used inside FURY, however,
they come with some issues that I will explain further below.</summary>
    <category term="google" label="google"/>
    <published>2023-06-05T00:00:00+00:00</published>
  </entry>
</feed>
