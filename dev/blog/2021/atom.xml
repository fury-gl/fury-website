<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://fury.gl/</id>
  <title>Blog - Posted in 2021</title>
  <updated>2023-02-23T17:35:45.011398+00:00</updated>
  <link href="https://fury.gl/"/>
  <link href="https://fury.gl/blog/2021/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33.post1">ABlog</generator>
  <entry>
    <id>https://fury.gl/posts/2021/2021-08-03-release-announcement.html</id>
    <title>FURY 0.7.0 Released</title>
    <updated>2021-08-03T00:00:00+00:00</updated>
    <author>
      <name>Serge Koudoro</name>
    </author>
    <content type="html">&lt;section id="fury-0-7-0-released"&gt;

&lt;p&gt;The FURY project is happy to announce the release of FURY 0.7.1!
FURY is a free and open source software library for scientific visualization and 3D animations.&lt;/p&gt;
&lt;p&gt;You can show your support by &lt;a class="reference external" href="https://github.com/fury-gl/fury/stargazers"&gt;adding a star&lt;/a&gt; on FURY github project.&lt;/p&gt;
&lt;p&gt;This Release is mainly a maintenance release. The &lt;strong&gt;major highlights&lt;/strong&gt; of this release are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;FURY paper added.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fast selection of multiple objects added.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI refactored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tests coverage increased.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New actor (Marker) added.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New primitive (Triangular Prism) added.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Demos added and updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Large Documentation Update.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The complete release notes are available &lt;a class="reference internal" href="../release_notes/releasev0.7.1.html#releasev0-7-1"&gt;&lt;span class="std std-ref"&gt;here&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;To upgrade or install FURY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Run the following command in your terminal:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt; &lt;span class="n"&gt;fury&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;conda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;forge&lt;/span&gt; &lt;span class="n"&gt;fury&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Questions or suggestions?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For any questions go to &lt;a class="reference external" href="http://fury.gl"&gt;http://fury.gl&lt;/a&gt;, or send an e-mail to &lt;a class="reference external" href="mailto:fury&amp;#37;&amp;#52;&amp;#48;python&amp;#46;org"&gt;fury&lt;span&gt;&amp;#64;&lt;/span&gt;python&lt;span&gt;&amp;#46;&lt;/span&gt;org&lt;/a&gt;
We can also join our &lt;a class="reference external" href="https://discord.gg/6btFPPj"&gt;discord community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We would like to thanks to &lt;a class="reference internal" href="../community.html#community"&gt;&lt;span class="std std-ref"&gt;all contributors&lt;/span&gt;&lt;/a&gt; for this release:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amit Chaudhari&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Antriksh Misri&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bruno Messias&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Daniel S. Katz&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eleftherios Garyfallidis&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gurdit Siyan&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Javier Guaje&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jhalak Gupta&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LoopThrough-i-j&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MIHIR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Praneeth Shetty&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sajag Swami&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Serge Koudoro&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hariharan Ayappane&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On behalf of the &lt;a class="reference internal" href="../community.html#community"&gt;&lt;span class="std std-ref"&gt;FURY developers&lt;/span&gt;&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;Serge K.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-08-03-release-announcement.html" rel="alternate"/>
    <summary>The FURY project is happy to announce the release of FURY 0.7.1!
FURY is a free and open source software library for scientific visualization and 3D animations.</summary>
    <category term="fury" label="fury"/>
    <published>2021-08-03T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-08-09-week-10-sajag.html</id>
    <title>Ninth coding week!</title>
    <updated>2021-08-09T00:00:00+00:00</updated>
    <author>
      <name>Sajag Swami</name>
    </author>
    <content type="html">&lt;section id="ninth-coding-week"&gt;

&lt;p&gt;Welcome to the tenth weekly check-in. I’ll be sharing my progress for the ninth week of coding.&lt;/p&gt;
&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Updated &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;PR #452&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Made ribbon representation faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Added an actor to display bounding box around the molecule.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;figure class="align-default" id="id1"&gt;
&lt;img alt="https://user-images.githubusercontent.com/65067354/128624529-03c026be-7f80-4792-b57e-eceeb1767ec2.png" src="https://user-images.githubusercontent.com/65067354/128624529-03c026be-7f80-4792-b57e-eceeb1767ec2.png" style="width: 300px; height: 300px;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Bounding Box&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Made a tutorial which showcases the abilities of molecular module (will create a PR after molecular module is merged).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m trying to implement a native implementation of molecular surfaces in FURY. Currently searching for recent research papers to find good algorithms to generate the molecular surfaces (the ones I’d collected in the research period were archaic and rather time consuming). The papers that I’ve read so far seem a tad bit intimidating as I’ve never done math related to this domain yet. Implementing them will be a good learning experience I reckon.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next-week"&gt;
&lt;h2&gt;What is coming up next week?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Try to create a native implementation of molecular surface.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Small fixes to &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/362"&gt;PR #362&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/462"&gt;PR #462&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Au&lt;/span&gt; &lt;span class="pre"&gt;Revoir!&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-08-09-week-10-sajag.html" rel="alternate"/>
    <summary>Welcome to the tenth weekly check-in. I’ll be sharing my progress for the ninth week of coding.</summary>
    <category term="google" label="google"/>
    <published>2021-08-09T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-09-08-gsoc-devmessias-10.html</id>
    <title>Week #10: SDF Fonts</title>
    <updated>2021-08-09T00:00:00+00:00</updated>
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;section id="week-10-sdf-fonts"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;section id="fury-helios"&gt;
&lt;h3&gt;FURY/Helios&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/helios/pull/22"&gt;PR fury-gl/helios#22
:&lt;/a&gt; Helios Documentation
Improvements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/helios/pull/23"&gt;PR fury-gl/helios#23:&lt;/a&gt;
A PR that makes helios IPCLayout system compatible with Windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="fury"&gt;
&lt;h3&gt;FURY&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/484"&gt;PR fury-gl/fury#484: I’ve found and fixed a bug in FURY time
managment system&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/437"&gt;PR fury-gl/fury#437:&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fixed the tests on Windows&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improve the streaming memory managment system for IPC
communication&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ve developing a feature that will allows FURY to draw hundreds
thousands of labels using texture maps and signed distance functions.
Until now I’ve a sketch that at least is able to draw the labels
using the markers billboards and bitmap fonts &lt;img alt="image1" src="https://user-images.githubusercontent.com/6979335/128761833-53f53e2c-5bc0-4ff3-93c4-0ad01dc7d8eb.png" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/432"&gt;PR fury-gl/fury#432:&lt;/a&gt;
minor improvements&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/474"&gt;PR #474&lt;/a&gt; Helped to
review this PR&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;I did not get stuck this week.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I’ll discuss that with my mentors tomorrow.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-09-08-gsoc-devmessias-10.html" rel="alternate"/>
    <summary>PR fury-gl/helios#22
: Helios Documentation
Improvements.</summary>
    <category term="google" label="google"/>
    <published>2021-08-09T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-08-09-week-10-antriksh.html</id>
    <title>Week#10: Accordion UI, Support for sprite sheet animations</title>
    <updated>2021-08-09T00:00:00+00:00</updated>
    <author>
      <name>Antriksh Misri</name>
    </author>
    <content type="html">&lt;section id="week-10-accordion-ui-support-for-sprite-sheet-animations"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;Below are the tasks that I worked on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/487"&gt;Added Accordion2D to UI sub-module&lt;/a&gt; : This PR adds the Accordion UI to the UI sub-module. This UI inherits from the Tree2D UI and can only be merged once the Tree2D UI is in. Here’s a screenshot for reference:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;img alt="https://i.imgur.com/klI4Tb5.png" src="https://i.imgur.com/klI4Tb5.png" style="width: 200px; height: 200px;" /&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/486"&gt;Adding X, Y, Z Layouts&lt;/a&gt; :  It was pointed out in last week’s meeting that in 3D space horizontal/vertical means nothing. Instead X, Y, Z are used, so, these three layouts were added on top of horizontal/vertical layouts. They also have functionality of changing the direction i.e. reverse the stacking order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/398"&gt;Added support of sprite sheet animation in Card2D&lt;/a&gt; : The image in Card2D was static in nature and wasn’t very interesting. So, to make things a bit interesting support for animated images were added. These animations are played from a sprite sheet or a texture atlas. A buffer of processed sprite chunks is maintained and with the help of a timer callback the image in the card is updated after a certain delay which is dependent of the frame rate. Below is the demonstration:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;img alt="https://i.imgur.com/DliSpf0.gif" src="https://i.imgur.com/DliSpf0.gif" style="width: 200px; height: 200px;" /&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Researching more about Freetype/Freetype-GL&lt;/strong&gt;: Apart from coding stuff, i did some more research on custom font using freetype and freetype-gl. I found some examples that used the python bindings of the c++ library and displayed custom fonts that were transformable i.e. can be rotated by some angle. Hopefully I can create a working example by this weeks meeting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;No, I did not get stuck anywhere.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next-week"&gt;
&lt;h2&gt;What is coming up next week?&lt;/h2&gt;
&lt;p&gt;Next week I will finish up my remaining work. Which includes addressing all PR reviews and adding some more features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See you guys next week!&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-08-09-week-10-antriksh.html" rel="alternate"/>
    <summary>Below are the tasks that I worked on:</summary>
    <category term="google" label="google"/>
    <published>2021-08-09T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-08-16-week-11-sajag.html</id>
    <title>Tenth coding week!</title>
    <updated>2021-08-16T00:00:00+00:00</updated>
    <author>
      <name>Sajag Swami</name>
    </author>
    <content type="html">&lt;section id="tenth-coding-week"&gt;

&lt;p&gt;Welcome to the eleventh weekly check-in. I’ll be sharing my progress for the tenth week of coding.&lt;/p&gt;
&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Implemented &lt;a class="reference external" href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0008140"&gt;this paper&lt;/a&gt; to generate Van der Waals surface and solvent-accessible surface (PR created: &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/492"&gt;PR #492&lt;/a&gt;). It was a good learning experience because the first time I read the paper, I didn’t understand the underlying math, it all seemed alien to me. I had to read it many times, read about the algorithms used and understand the terminologies. I had a meeting with the mentors to understand a bit of the theory which proved to be quite fruitful as I understood how to go about making the space-filling model. &lt;a class="reference external" href="ttps://pyscience.wordpress.com/2014/09/11/surface-extraction-creating-a-mesh-from-pixel-data-using-python-and-vtk/"&gt;This&lt;/a&gt; blog was helpful in understanding how to use vtkMarchingCubes with numpy arrays. One of the earliest SAS rendering looked like this (this implementation was not strictly according to the paper):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;figure class="align-default" id="id1"&gt;
&lt;img alt="https://user-images.githubusercontent.com/65067354/129559593-baf201bf-720c-45f7-9269-3b31954efd5e.png" src="https://user-images.githubusercontent.com/65067354/129559593-baf201bf-720c-45f7-9269-3b31954efd5e.png" style="width: 300px; height: 300px;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Notice that it’s rather rough&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Current implementation (this implementation was according to the paper):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;figure class="align-default" id="id2"&gt;
&lt;img alt="https://user-images.githubusercontent.com/65067354/129560374-14180b22-14b2-449b-88a6-b3140226418d.png" src="https://user-images.githubusercontent.com/65067354/129560374-14180b22-14b2-449b-88a6-b3140226418d.png" style="width: 300px; height: 300px;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;grid dimenstions = 256 × 256 × 256, used smoothing algorithms recommended by vtk&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also understood how to go about rendering volumes. I think that the ability to render volumes with FURY will be a cool capability and I’ll discuss my implementation and request the mentors for feedback and ideas in the weekly meeting. Example of volume rendering:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;figure class="align-default" id="id3"&gt;
&lt;img alt="https://user-images.githubusercontent.com/65067354/129562606-50a9f0cf-e16d-4501-b0fa-a0038fda406b.png" src="https://user-images.githubusercontent.com/65067354/129562606-50a9f0cf-e16d-4501-b0fa-a0038fda406b.png" style="width: 300px; height: 300px;" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;grid dimenstions = 256 × 256 × 256&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next-week"&gt;
&lt;h2&gt;What is coming up next week?&lt;/h2&gt;
&lt;p&gt;I’ll try to get &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;PR #452&lt;/a&gt; merged. Documentation work to be done as GSoC coding period has come to an end.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Au&lt;/span&gt; &lt;span class="pre"&gt;Revoir!&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-08-16-week-11-sajag.html" rel="alternate"/>
    <summary>Welcome to the eleventh weekly check-in. I’ll be sharing my progress for the tenth week of coding.</summary>
    <category term="google" label="google"/>
    <published>2021-08-16T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-08-16-week-11-antriksh.html</id>
    <title>Week #11: Finalizing open Pull Requests</title>
    <updated>2021-08-16T00:00:00+00:00</updated>
    <author>
      <name>Antriksh Misri</name>
    </author>
    <content type="html">&lt;section id="week-11-finalizing-open-pull-requests"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;Below are the tasks that I worked on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/491"&gt;Created PR for sprite sheet animation&lt;/a&gt; : This PR adds support for playing animations from a sprite sheet. This feature will be used in Card2D to create a tutorial in which the card will show the animation in the image box. Previously, the utility functions for this were added directly inside the tutorial but now they are refactored to go in their respective modules.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/486"&gt;Finalized the x, y, z layouts&lt;/a&gt; : The PR that adds these layouts needed some updates for it to work as intended. These changes were added and this PR is ready to go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/443"&gt;Resolved all conflicts in the GridLayout PR&lt;/a&gt; : As the Horizontal and Vertical layouts were merged this week the GridLayout PR had got some conflicts. These conflicts were resolved and the PR is almost ready.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Continuing the work on custom font rendering&lt;/strong&gt; : In the last meeting, a few points were brought up. Firstly, to position each glyph to their respective location in the atlas a seperate module is used which is freetype-gl. The python bindings for this module are not available which means either we have to write the bindings ourselves or the freetype team will be emailed about this and they will add bindings for that. On the other hand, I looked how latex is rendered in matplotlib. &lt;a class="reference external" href="https://github.com/matplotlib/matplotlib/blob/3a4fdea8d23207d67431973fe5df1811605c4132/lib/matplotlib/text.py#L106"&gt;This&lt;/a&gt; is the Text class that is used to represent the string that is to be drawn and &lt;a href="#id1"&gt;&lt;span class="problematic" id="id2"&gt;`This is the class that it inherits from.&amp;lt;https://github.com/matplotlib/matplotlib/blob/3a4fdea8d23207d67431973fe5df1811605c4132/lib/matplotlib/artist.py#L94&amp;gt;`_&lt;/span&gt;&lt;/a&gt;  Everything is handled internally in matplotlib, to draw the rasterized text &lt;a class="reference external" href="https://github.com/matplotlib/matplotlib/blob/3a4fdea8d23207d67431973fe5df1811605c4132/lib/matplotlib/text.py#L672"&gt;this function is used.&lt;/a&gt;  The text can be rendered in two ways, the first one is by using the default renderer and the second way is by using PathEffectRenderer that is used to add effects like outlines, anti-aliasing etc. It is a very rigid way of rendering text and is designed to be used internally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;No, I did not get stuck anywhere.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next-week"&gt;
&lt;h2&gt;What is coming up next week?&lt;/h2&gt;
&lt;p&gt;Hopefully everything is resolved by the end of this week and next week I will hopefully submit my final code in a gist format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See you guys next week!&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-08-16-week-11-antriksh.html" rel="alternate"/>
    <summary>Below are the tasks that I worked on:</summary>
    <category term="google" label="google"/>
    <published>2021-08-16T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-16-08-gsoc-devmessias-11.html</id>
    <title>Week #11: Removing the flickering effect</title>
    <updated>2021-08-16T00:00:00+00:00</updated>
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;section id="week-11-removing-the-flickering-effect"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;section id="fury"&gt;
&lt;h3&gt;FURY&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/489"&gt;PR fury-gl/fury#489:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;This PR give to FURY three
pre-built texture maps using different fonts. However, is quite easy
to create new fonts to be used in a visualization.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2021/2021-16-08-gsoc-devmessias-11.rst&lt;/span&gt;, line 20)&lt;/p&gt;
&lt;p&gt;Block quote ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It’s was quite hard to develop the shader code and find the correct
positions of the texture maps to be used in the shader. Because we
used the freetype-py to generate the texture and packing the glyps.
However, the lib has some examples with bugs. But fortunelly, now
everthing is woking on FURY. I’ve also created two different examples
to show how this PR works.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The first example, viz_huge_amount_of_labels.py, shows that the user can
draw hundreds of thounsands of characters.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2" src="https://user-images.githubusercontent.com/6979335/129643743-6cb12c06-3415-4a02-ba43-ccc97003b02d.png" /&gt;&lt;/p&gt;
&lt;p&gt;The second example, viz_billboad_labels.py, shows the different behaviors of the label actor. In addition, presents
to the user how to create a new texture atlas font to be used across different visualizations.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/437"&gt;PR fury-gl/fury#437:&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Fix: avoid multiple OpenGl context on windows using asyncio&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The streaming system must be generic, but opengl and vtk behaves in uniques ways in each Operating System. Thus, can be tricky
to have the same behavior acrros different OS. One hard stuff that we founded is that was not possible to use my
TimeIntervals objects (implemented with threading module) with vtk. The reason for this impossibility is because we can’t use
vtk in windows in different threads. But fortunely, moving from the threading (multithreading) to the asyncio approcach (concurrency)
have fixed this issue and now the streaming system is ready to be used anywhere.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flickering:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Finally, I could found the cause of the flickering effect on the streaming system.
This flickering was appearing only when the streaming was created using the Widget object.
The cause seems to be a bug or a strange behavior from vtk.
Calling   iren.MouseWheelForwardEvent() or iren.MouseWheelBackwardEvent()
inside of a thread without invoking the
Start method from a vtk instance produces a memory corruption.
Fortunately, I could fix this behavior and now the streaming system is
working without this glitch effect.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="fury-helios"&gt;
&lt;h3&gt;FURY/Helios&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/helios/pull/24"&gt;PR fury-gl/helios#24
:&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This uses the
&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/489"&gt;PRfury-gl/fury#489:&lt;/a&gt; to
give the network label feature to helios. Is possible to draw node
labels, update the colors, change the positions at runtime. In addition,
when a network layout algorithm is running this will automatically
update the node labels positions to follow the nodes across the screen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image1" src="https://user-images.githubusercontent.com/6979335/129642582-fc6785d8-0e4f-4fdd-81f4-b2552e1ff7c7.png" /&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/helios/pull/23"&gt;PR fury-gl/helios#23:
Merged.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This PR granted compatibility between IPC Layouts and Windows. Besides
that , now is quite easier to create new network layouts using inter
process communication&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;I did not get stuck this week.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-16-08-gsoc-devmessias-11.html" rel="alternate"/>
    <summary>PR fury-gl/fury#489:</summary>
    <category term="google" label="google"/>
    <published>2021-08-16T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-08-23-gsoc-devmessias-final-report.html</id>
    <title>Google Summer of Code 2021 - Final Report - Bruno Messias</title>
    <updated>2021-08-23T00:00:00+00:00</updated>
    <author>
      <name>Bruno Messias</name>
    </author>
    <content type="html">&lt;section id="google-summer-of-code-2021-final-report-bruno-messias"&gt;

&lt;section id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;We have changed some points of my project in the first meeting.
Specifically, we focused the efforts into developing a streaming system
using the WebRTC protocol that could be used in more generic scenarios
than just the network visualization. In addition to that, we have opted
to develop the network visualization for fury as a separated repository
and package available &lt;a class="reference external" href="https://github.com/fury-gl/helios"&gt;here&lt;/a&gt;. The
name Helios was selected for this new network visualization system based
on the Fury rendering pipeline.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="proposed-objectives"&gt;
&lt;h2&gt;Proposed Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Create a streaming system (stadia-like) for FURY&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Should work in a low-bandwidth scenario&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should allow user interactions and collaboration across the
Internet using a web-browser&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helios Network System objectives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Implement the Force-Directed Algorithm with examples&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement the ForceAtlas2 algorithm using cugraph with examples&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement Minimum-Distortion Embeddings algorithm (PyMDE) and
examples&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Non-blocking network algorithms computation avoiding the GIL using
the Shared Memory approach&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create the documentation and the actions for the CI&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stretch Goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create an actor in FURY to draw text efficiently using shaders&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add support to draw millions of nodes using FURY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add support to control the opengl state on FURY&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-completed"&gt;
&lt;h2&gt;Objectives Completed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="rubric" id="create-a-streaming-system-stadia-like-for-fury"&gt;Create a streaming system (stadia-like) for FURY&lt;/p&gt;
&lt;p&gt;To construct the streaming system for my project we have opted to
follow three main properties and behaviors:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;avoid blocking the code execution in the main thread (where the
vtk/fury instance resides)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;work inside of a low bandwidth environment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make it easy and cheap to share the rendering result. For example,
using the free version of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ngrok&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To achieve the first property we need to circumvent the GIL and allow
python code to execute in parallel. Using the threading module alone
is not good enough to reach real parallelism as Python calls in the
same process can not execute concurrently. In addition to that, to
achieve better organization it is desirable to define the server
system as an uncoupled module from the rendering pipeline. Therefore,
I have chosen to employ the multiprocessing approach for that. The
second and third property can be only achieved choosing a suitable
protocol for transfering the rendered results to the client. We have
opted to implement two streaming protocols: the MJPEG and the WebRTC.
The latter is more suitable for low-bandwidth scenarios [1].&lt;/p&gt;
&lt;p&gt;The image below shows a simple representation of the streaming
system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
   &lt;center&gt;
   &lt;img alt="..." height="400"
      src="https://user-images.githubusercontent.com/6979335/121934889-33ff1480-cd1e-11eb-89a4-562fbb953ba4.png"/&gt;
   &lt;/center&gt;

The video below shows how our streaming system works smothly and can
be easily integrated inside of a Jupyter notebook.&lt;p&gt;&lt;a class="reference external" href="https://user-images.githubusercontent.com/6979335/130284952-2ffbf117-7119-4048-b7aa-428e0162fb7a.mp4"&gt;Video: WebRTC Streaming +
Ngrok&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://user-images.githubusercontent.com/6979335/130284261-20e84622-427e-4a59-a46f-6a33f5473025.mp4"&gt;Video: WebRTC Streaming +
Jupyter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt; * &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/480"&gt;fury-gl/fury#480&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="rubric" id="d-and-3d-marker-actor"&gt;2D and 3D marker actor&lt;/p&gt;
&lt;p&gt;This feature gave FURY the ability to efficiently draw millions of
markers and impostor 3D spheres. This feature was essential for the
development of Helios. This feature work with signed distance fields
(SDFs) you can get more information about how SDFs works here [4] .&lt;/p&gt;
&lt;p&gt;The image below shows 1 million of markers rendered using an Intel
HD graphics 3000.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
   &lt;img src="https://user-images.githubusercontent.com/6979335/116004971-70927780-a5db-11eb-8363-8c0757574eb4.png"/&gt;
&lt;/center&gt;&lt;ul&gt;
&lt;li&gt;&lt;p class="rubric" id="fine-tunning-the-opengl-state"&gt;Fine-Tunning the OpenGl State&lt;/p&gt;
&lt;p&gt;Sometimes users may need to have finer control on how OpenGL will
render the actors. This can be useful when they need to create
specialized visualization effects or to improve the performance.&lt;/p&gt;
&lt;p&gt;In this PR I have worked in a feature that allows FURY to control the
OpenGL context created by VTK&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Request:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/432"&gt;fury-gl/fury#432&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="rubric" id="helios-network-visualization-lib-network-layout-algorithms"&gt;Helios Network Visualization Lib: Network Layout
Algorithms&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 1:&lt;/strong&gt; Suppose that you need to monitor a hashtag and build a
social graph. You want to interact with the graph and at the same
time get insights about the structure of the user interactions. To
get those insights you can perform a node embedding using any kind of
network layout algorithm, such as force-directed or minimum
distortion embeddings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 2:&lt;/strong&gt; Suppose that you are modelling a network dynamic such as
an epidemic spreading or a Kuramoto model. In some of those network
dynamics a node can change the state and the edges related to the
node must be deleted. For example, in an epidemic model a node can
represent a person who died due to a disease. Consequently, the
layout of the network must be recomputed to give better insights.&lt;/p&gt;
&lt;p&gt;In the described cases, if we want a better (UX) and at the same time
a more practical and insightful application of Helios, the employed
layout algorithms should not block any kind of computation in the
main thread.&lt;/p&gt;
&lt;p&gt;In Helios we already have a lib written in C (with a python wrapper)
which performs the force-directed layout algorithm using separated
threads avoiding the GIL problem and consequently avoiding blocking
the main thread. But what about the other open-source network layout
libs available on the internet? Unfortunately, most of those libs
have not been implemented like Helios force-directed methods and
consequently, if we want to update the network layout the Python
interpreter will block the computation and user interaction in your
network visualization.&lt;/p&gt;
&lt;p&gt;My solution for having PyMDE and CuGraph-ForceAtlas not blocking the
main thread was to break the network layout method into two different
types of processes: A and B and communicate both process using the
Shared Memory approach. You can more information about this PR
through my following posts [2], [3].&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The image below show an example that I made and is available at
&lt;a class="github reference external" href="https://github.com/fury-gl/helios/blob/main/docs/examples/viz_mde.py"&gt;fury-gl/helios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2" src="https://user-images.githubusercontent.com/6979335/125310065-a3a9f480-e308-11eb-98d9-0ff5406a0e96.gif" /&gt; &lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MDE Layout:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/6"&gt;fury-gl/helios#6&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CuGraph ForceAtlas2&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/13"&gt;fury-gl/helios#13&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Force-Directed and MDE improvements&lt;/strong&gt;
&lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/14"&gt;fury-gl/helios#14&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="rubric" id="helios-network-visualization-lib-visual-aspects"&gt;Helios Network Visualization Lib: Visual Aspects&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve made several stuffs to give Helios a better visual aspects. One of
them was to give a smooth real-time network layout animations. Because
the layout computations happens into a different process that the
process responsible to render the network was necessary to record the
positions and communicate the state of layout between both process.&lt;/p&gt;
&lt;p&gt;The GIF below shows how the network layout through IPC behaved before
these modification&lt;/p&gt;
&lt;center&gt;
&lt;img src="https://user-images.githubusercontent.com/6979335/125310065-a3a9f480-e308-11eb-98d9-0ff5406a0e96.gif"/&gt;
&lt;/center&gt;&lt;p&gt;below, you can see how after those modifications the visual aspect is
better.&lt;/p&gt;
&lt;center&gt;
&lt;img alt="..." height="300"
src="https://user-images.githubusercontent.com/6979335/126175583-c7d85f0a-3d0c-400e-bbdd-4cbcd2a36fed.gif"/&gt;
&lt;/center&gt;&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;OpenGL SuperActors:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/1"&gt;fury-gl/helios#1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fixed the flickering effect&lt;/strong&gt;
&lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/10"&gt;fury-gl/helios#10&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Improvements in the network node visual aspects&lt;/strong&gt;
&lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/15"&gt;fury-gl/helios#15&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Smooth animations when using IPC layouts&lt;/strong&gt;
&lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/17"&gt;fury-gl/helios#17&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="rubric" id="helios-network-visualization-lib-ci-and-documentation"&gt;Helios Network Visualization Lib: CI and Documentation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because Helios was an project that begins in my GSoC project It was
necessary to create the documentation, hosting and more. Now we have a
online documentation available at &lt;a class="reference external" href="https://heliosnetwork.io/"&gt;https://heliosnetwork.io/&lt;/a&gt; altough the
documentation still need some improvements.&lt;/p&gt;
&lt;p&gt;The Helios Logo which was developed by
Filipi Nascimento.&lt;/p&gt;
&lt;img alt="Helios Network Logo" height="100" src="https://fury-gl.github.io/helios-website/_images/logo.png"/&gt;&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CI and pytests:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/5"&gt;fury-gl/helios#5&lt;/a&gt;,
&lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/20"&gt;fury-gl/helios#20&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Helios Logo, Sphinx Gallery and API documentation&lt;/strong&gt;
&lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/18"&gt;fury-gl/helios#18&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Documentation improvements:&lt;/strong&gt;
&lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/8"&gt;fury-gl/helios#8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="rubric" id="objectives-in-progress"&gt;Objectives in Progress&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="rubric" id="draw-texts-on-fury-and-helios"&gt;Draw texts on FURY and Helios&lt;/p&gt;
&lt;p&gt;This two PRs allows FURY and Helios to draw millions of characters in
VTK windows instance with low computational resources consumptions. I
still working on that, finishing the SDF font rendering which the
theory behinds was developed here [5].&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="github reference external" href="https://github.com/fury-gl/helios/pull/24"&gt;fury-gl/helios#24&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/489"&gt;fury-gl/fury#489&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;
&lt;img alt="..." height="400" src="https://user-images.githubusercontent.com/6979335/129643743-6cb12c06-3415-4a02-ba43-ccc97003b02d.png"/&gt;
&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="rubric" id="gsoc-weekly-blogs"&gt;GSoC weekly Blogs&lt;/p&gt;
&lt;p&gt;Weekly blogs were added to the FURY Website.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;First Evaluation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/476"&gt;fury-gl/fury#476&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Second Evaluation:&lt;/strong&gt; TBD&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Date&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Blog Link&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 1
(08-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Welcome to my weekly Blogs!&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-1-21/"&gt;Weekly Check-in
#1&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week  2
(14-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Post #1: A Stadia-like
system for data
visualization&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/post-1-a-stadia-like-system-for-data-visualization/"&gt;Weekly Check-in
#
2&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 3
(21-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2d and 3d fake impostors
marker; fine-tunning
open-gl state; Shared
Memory support for the
streaming system;
first-version of helios:
the network visualization
lib for helios&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-3-15/"&gt;Weekly Check-in
#3&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 4
(28-06-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Post #2: SOLID, monkey
patching a python issue and
network layouts through
WebRTC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/post-2-solid-monkey-patching-a-python-issue-and-network-layouts-through-webrtc/"&gt;Weekly Check-in
#4&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 5
(05-07-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Code refactoring; 2d
network layouts for Helios;
Implemented the Minimum
distortion embedding
algorithm using the IPC
approach&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-5-14/"&gt;Weekly Check-in
#5&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 6
(12-07-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Post #3: Network layout
algorithms using IPC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/post-3-network-layout-algorithms-using-ipc/"&gt;Weekly Check-in
#6&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 7
(19-07-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Helios IPC network layout
algorithms support for
MacOs; Smooth animations
for IPC layouts;
ForceAtlas2 network layout
using cugraph/cuda&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-7-14/"&gt;Weekly Check-in
#7&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 8
(26-07-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Helios CI, Helios
documentation&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-8-9/"&gt;Weekly Check-in
#8&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 9
(02-08-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Helios documentation;
improved the examples and
documentation of the WebRTC
streaming system and made
some improvements in the
compatibility removing some
dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-9-16/"&gt;Weekly Check-in
#9&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 10
(09-08-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Helios documentation
improvements; found and
fixed a bug in fury w.r.t.
the time management system;
improved the memory
management system for the
network layout algorithms
using IPC&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-10-12/"&gt;Weekly Check-in
#10&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 11
(16-08-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Created a PR that allows
FURY to draw hundred of
thousands of characters
without any expensive GPU;
fixed the flickering effect
on the streaming system;
helios node labels feature;
finalizing remaining PRs&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/weekly-check-in-11-13/"&gt;Weekly Check-in
#11&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Detailed weekly tasks, progress and work done can be found
&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;section id="references"&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;[1] ( Python GSoC - Post #1 - A Stadia-like system for data
visualization - demvessias s Blog, n.d.;
&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/post-1-a-stadia-like-system-for-data-visualization/"&gt;https://blogs.python-gsoc.org/en/demvessiass-blog/post-1-a-stadia-like-system-for-data-visualization/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] Python GSoC - Post #2: SOLID, monkey patching a python issue and
network layouts through WebRTC - demvessias s Blog, n.d.;
&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/demvessiass-blog/post-2-solid-monkey-patching-a-python-issue-and-network-layouts-through-webrtc/"&gt;https://blogs.python-gsoc.org/en/demvessiass-blog/post-2-solid-monkey-patching-a-python-issue-and-network-layouts-through-webrtc/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] Python GSoC - Post #3: Network layout algorithms using IPC -
demvessias s Blog,
n.d.)https://blogs.python-gsoc.org/en/demvessiass-blog/post-3-network-layout-algorithms-using-ipc/&lt;/p&gt;
&lt;p&gt;[4] Rougier, N.P., 2018. An open access book on Python, OpenGL and
Scientific Visualization [WWW Document]. An open access book on Python,
OpenGL and Scientific Visualization. URL
&lt;a class="github reference external" href="https://github.com/rougier/python-opengl"&gt;rougier/python-opengl&lt;/a&gt; (accessed 8.21.21).&lt;/p&gt;
&lt;p&gt;[5] Green, C., 2007. Improved alpha-tested magnification for vector
textures and special effects, in: ACM SIGGRAPH 2007 Courses on -
SIGGRAPH ’07. Presented at the ACM SIGGRAPH 2007 courses, ACM Press, San
Diego, California, p. 9. &lt;a class="reference external" href="https://doi.org/10.1145/1281500.1281665"&gt;https://doi.org/10.1145/1281500.1281665&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-08-23-gsoc-devmessias-final-report.html" rel="alternate"/>
    <summary>We have changed some points of my project in the first meeting.
Specifically, we focused the efforts into developing a streaming system
using the WebRTC protocol that could be used in more generic scenarios
than just the network visualization. In addition to that, we have opted
to develop the network visualization for fury as a separated repository
and package available here. The
name Helios was selected for this new network visualization system based
on the Fury rendering pipeline.</summary>
    <category term="google" label="google"/>
    <published>2021-08-23T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-08-23-final-work-sajag.html</id>
    <title>Google Summer of Code Final Work Product</title>
    <updated>2021-08-23T00:00:00+00:00</updated>
    <author>
      <name>Sajag Swami</name>
    </author>
    <content type="html">&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/projects/#6653942668197888"&gt;&lt;img alt="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" class="align-center" height="50" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://blogs.python-gsoc.org/en/nibba2018s-blog/"&gt;&lt;img alt="https://www.python.org/static/community_logos/python-logo.png" src="https://www.python.org/static/community_logos/python-logo.png" style="width: 40%;" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://fury.gl/latest/community.html"&gt;&lt;img alt="https://python-gsoc.org/logos/FURY.png" src="https://python-gsoc.org/logos/FURY.png" style="width: 25%;" /&gt;&lt;/a&gt;
&lt;section id="google-summer-of-code-final-work-product"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Sajag Swami&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organisation:&lt;/strong&gt; Python Software Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sub-Organisation:&lt;/strong&gt; FURY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/fury-gl/fury/wiki/Google-Summer-of-Code-2021"&gt;FURY: Ribbon and Molecular Surface Representations for
Proteins&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="proposed-objectives"&gt;
&lt;h2&gt;Proposed Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Ribbon Representation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Molecular Surface Representation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stretch Goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stick Representation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ball and stick Representation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wire Representation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipes and Planks Representation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sphere Representation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-completed"&gt;
&lt;h2&gt;Objectives Completed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ribbon Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ribbon diagrams, also known as Richardson diagrams,
are 3D schematic representations of protein structure. Ribbon diagrams are
generated by interpolating a smooth curve through the polypeptide backbone.
α-helices are shown as coiled ribbons. β-strands as sheets, and non-repetitive
coils or loops as lines or thin strips. It was implemented by using
&lt;cite&gt;vtkProteinRibbonFilter&lt;/cite&gt;. Generating a &lt;cite&gt;vtkPolyData&lt;/cite&gt; of appropriate format
required by &lt;cite&gt;vtkProteinRibbonFilter&lt;/cite&gt; was initially unclear due to lack of
examples. I was able to understand what kind of output the filter required
after a meeting with mentors. Tests were added and a demo was created.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ribbon representation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;fury-gl/fury#452&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ribbon Representation demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;fury-gl/fury#452&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ball and Stick Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ball-and-stick model is a molecular model of a chemical substance which
displays both the three-dimensional position of the atoms and the bonds between
them. The atoms are typically represented by spheres, connected by tubes which
represent the bonds. It was created by using  &lt;cite&gt;vtkOpenGLMoleculeMapper&lt;/cite&gt;.
Added &lt;cite&gt;vtkSimpleBondPerceiver&lt;/cite&gt; for detection of bonds. Tests were added and a
demo was created.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ball and Stick Representation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;fury-gl/fury#452&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ball and Stick Representation demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;fury-gl/fury#452&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stick Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stick model is a special case of Ball and Stick model where atomic radius of all
molecules is set equal to the radius of tubes used to create bonds. It was created
by using  &lt;cite&gt;vtkOpenGLMoleculeMapper&lt;/cite&gt;. Tests were added and a demo was created.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stick Representation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;fury-gl/fury#452&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stick Representation demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;fury-gl/fury#452&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sphere Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In chemistry, a space-filling model, also known as a calotte or sphere model, is a
type of three-dimensional (3D) molecular model where the atoms are represented by
spheres whose radii are proportional to the radii of the atoms. It was created by
using &lt;cite&gt;vtkOpenGLMoleculeMapper&lt;/cite&gt;. Tests were added and a demo was created.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sphere Representation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;fury-gl/fury#452&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sphere Representation demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/452"&gt;fury-gl/fury#452&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-in-progress"&gt;
&lt;h2&gt;Objectives in Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Molecular Surfaces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are three types of molecular surfaces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Van der Waals&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solvent Accessible&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solvent Excluded&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently the first two molecular surfaces i.e. Van der Waals and Solvent
Accessible are implemented. The code is based on the paper “Generating
Triangulated Macromolecular Surfaces by Euclidean Distance Transform” by
Dong Xu and Yang Zhang.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Molecular Surfaces Implementation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/492"&gt;fury-gl/fury#492&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-objectives"&gt;
&lt;h2&gt;Other Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2D Animated Surfaces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was a simple demonstration that animated Two-Dimensional (2D) functions using FURY.
Created a grid of x-y coordinates and mapped the heights (z-values) to the corresponding x, y
coordinates to generate the surfaces. Used colormaps to color the surfaces.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Animated Surfaces:&lt;/strong&gt;  &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/362"&gt;fury-gl/fury#362&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Updated miscellaneous animations&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Updated the demo of helical motion to stop using multiple line actors as discussed in the meeting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated the demo of brownian motion to make it more scientifically useful (removed unnecessary rotation of camera
during animation and box actor).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display simulation data for brownian motion and helical motion animations (number of simulated steps for brownian
motion and velocity of the particle for helical motion).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Created utility functions to make the code understandable and used these in emwave, helical and brownian
animations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Updated helical, brownian, emwave animations:&lt;/strong&gt;  &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/462"&gt;fury-gl/fury#462&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GSoC weekly Blogs&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Weekly blogs were added for FURY’s Website.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;First Evaluation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/475"&gt;fury-gl/fury#475&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Second Evaluation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/493"&gt;fury-gl/fury#493&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Date&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Blog Link&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 1(08-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Welcome to my GSoC Blog!&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-1-11/"&gt;Weekly Check-in #1&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 2(14-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;First Week of coding: sphere model.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-2-11/"&gt;Weekly Check-in #2&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 3(21-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Bonding algorithms, Ball and Stick model progress.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-3-13/"&gt;Weekly Check-in #3&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 4(28-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;VTK molecular visualization classes.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-4-14/"&gt;Weekly Check-in #4&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 5(05-07-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Genesis of &lt;cite&gt;molecular&lt;/cite&gt; module.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-5-13/"&gt;Weekly Check-in #5&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 6(12-07-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Ribbon representation, updated &lt;cite&gt;molecular&lt;/cite&gt; module (more pythonic)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-6-18/"&gt;Weekly Check-in #6&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 7(19-07-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;More features to &lt;cite&gt;molecular&lt;/cite&gt;, updated misc. animations.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-7-16/"&gt;Weekly Check-in #7&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 8(26-07-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Ribbon to &lt;cite&gt;molecular&lt;/cite&gt;, tests for &lt;cite&gt;molecular&lt;/cite&gt;, animated surfaces.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-8-11/"&gt;Weekly Check-in #8&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 9(02-08-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Optimized &lt;cite&gt;molecular&lt;/cite&gt; with mentors, GSoC blogs to FURY docs.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-9-11/"&gt;Weekly Check-in #9&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 10(09-08-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Bounding box, &lt;cite&gt;molecular&lt;/cite&gt; tutorial, molecular surfaces progress.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-10-11/"&gt;Weekly Check-in #10&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 11(16-08-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Molecular Surfaces (VDW, SAS) implementation.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/weekly-check-in-11-9/"&gt;Weekly Check-in #11&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Detailed weekly tasks and work done can be found
&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/suntzunamis-blog/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-08-23-final-work-sajag.html" rel="alternate"/>
    <summary>Name: Sajag Swami</summary>
    <category term="google" label="google"/>
    <published>2021-08-23T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2021/2021-08-23-final-work-antriksh.html</id>
    <title>Google Summer of Code Final Work Product</title>
    <updated>2021-08-23T00:00:00+00:00</updated>
    <author>
      <name>Antriksh Misri</name>
    </author>
    <content type="html">&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/projects/#6653942668197888"&gt;&lt;img alt="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" class="align-center" height="50" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://blogs.python-gsoc.org/en/nibba2018s-blog/"&gt;&lt;img alt="https://www.python.org/static/community_logos/python-logo.png" src="https://www.python.org/static/community_logos/python-logo.png" style="width: 40%;" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://fury.gl/latest/community.html"&gt;&lt;img alt="https://python-gsoc.org/logos/FURY.png" src="https://python-gsoc.org/logos/FURY.png" style="width: 25%;" /&gt;&lt;/a&gt;
&lt;section id="google-summer-of-code-final-work-product"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Antriksh Misri&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organisation:&lt;/strong&gt; Python Software Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sub-Organisation:&lt;/strong&gt; FURY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/fury-gl/fury/wiki/Google-Summer-of-Code-2021#project-3-create-new-user-interface-widget"&gt;FURY: Create new user interface widget&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="proposed-objectives"&gt;
&lt;h2&gt;Proposed Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Add support for Layouts in UI elements&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add support for Horizontal Layout&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add support for Vertical Layout&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add support for Layout along X, Y, Z axes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stretch Goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add Tree2D UI element to the UI sub-module&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add Accordion2D UI element to the UI sub-module&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add SpinBox2D UI element to the UI sub-module&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-completed"&gt;
&lt;h2&gt;Objectives Completed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add support for Horizontal Layout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added support for Horizontal Layout in the layout module. This layout allows the user to stack actors in a horizontal fashion. Primarily, should be used for laying out UI elements as there is no meaning of horizontal/vertical in 3D space.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Horizontal Layout:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/480"&gt;fury-gl/fury#480&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ribbon Representation demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/480"&gt;fury-gl/fury#480&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add support for Vertical Layout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added support for Vertical Layout in the layout module. This layout allows the user to stack actors in a vertical fashion. Primarily, should be used for laying out UI elements as there is no meaning of horizontal/vertical in 3D space.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vertical Layout:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/479"&gt;fury-gl/fury#479&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vertical Layout demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/479"&gt;fury-gl/fury#479&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add support for Layout along X, Y, Z axes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added support for Layout along x, y, z axes. Allows user to layout different actors along any given axes. Also it allows users to switch the stacking order by passing a axis+ or axis- to the constructor.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;X, Y, Z axes Layout:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/486"&gt;fury-gl/fury#486&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;X, Y, Z axes Layout demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/486"&gt;fury-gl/fury#486&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add Tree2D UI element to the UI sub-module&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added Tree2D UI element to the UI sub-module. This allows user to visualize some data in a hierarchical fashion. Each node inside the tree can have N child nodes and the depth can be infinite. Each node can be clicked to trigger a user defined callback to perform some action. Tests and two demos were added for this UI element. Below is a screenshot for reference:&lt;/p&gt;
&lt;img alt="https://camo.githubusercontent.com/dd23b7c8503e4d01c80f2d9e84ee173e06c61eeb7c348c35aeadc75f722647ca/68747470733a2f2f692e696d6775722e636f6d2f4e49334873746c2e706e67" src="https://camo.githubusercontent.com/dd23b7c8503e4d01c80f2d9e84ee173e06c61eeb7c348c35aeadc75f722647ca/68747470733a2f2f692e696d6775722e636f6d2f4e49334873746c2e706e67" style="width: 200px; height: 200px;" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tree2D UI element:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/460"&gt;fury-gl/fury#460&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tree2D UI element demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/460"&gt;fury-gl/fury#460&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add Accordion2D UI element to the UI sub-module&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added Accordion2D to the UI sub-module. This Ui element allows users to visulize data in a tree with depth of one. Each node has a title and a content panel. The children for each node can be N if and only if the children are not nodes themselves. The child UIs can be placed inside the content panel by passing some coordinates, which can be absolute or normalized w.r.t the node content panel size. Tests and two demos were added for this UI element. Below is a screenshot for reference&lt;/p&gt;
&lt;img alt="https://camo.githubusercontent.com/9395d0ea572d7f253a051823f02496450c9f79d19ff0baf32841ec648b6f2860/68747470733a2f2f692e696d6775722e636f6d2f7854754f645a742e706e67" src="https://camo.githubusercontent.com/9395d0ea572d7f253a051823f02496450c9f79d19ff0baf32841ec648b6f2860/68747470733a2f2f692e696d6775722e636f6d2f7854754f645a742e706e67" style="width: 200px; height: 200px;" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accordion2D UI element:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/487"&gt;fury-gl/fury#487&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accordion2D UI element demo:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/487"&gt;fury-gl/fury#487&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-in-progress"&gt;
&lt;h2&gt;Objectives in Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add support for Layout in UI elements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Currently all the available layouts are only available for actors i.e. of type vtkActor2D. In order to add support for the layouts in UI elements there needs to be some tweaking in the base Layout class. Currently, the PR that adds these functionalities in stalling because of some circular imports. These will hopefully be fixed soon and as soon as the circular imports are fixed, the PR will be merged.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add support for Layout in UI elements:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/443"&gt;fury-gl/fury#443&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Method to process and load sprite sheets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This method adds support for loading and processing a sprite sheet. This will be very useful in playing animations from a n*m sprite sheet. This also has a flag to convert the processed chunks into vtkimageData which can be directly used to update the texture in some UI elements. The primary use of this method will in a tutorial for Card2D, wherein, the image panel of the card will play the animation directly from the sprite sheet.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Method to process and load sprite sheets:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/491"&gt;fury-gl/fury#491&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-objectives"&gt;
&lt;h2&gt;Other Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add Card2D UI element to UI sub-module&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added Card2D UI element to the UI sub-module. A Card2D is generally divided into two parts i.e. the image content and the text content. This version of card has an image which can be fetched from a URL and the text content which is yet again divided into two parts i.e. the title and the body. The space distribution between the image and the text content is decided by a float between 0 and 1. A value of 0 means the image takes up no space and a value of 1 means the image consumes the whole space. Below is a demonstration:&lt;/p&gt;
&lt;img alt="https://camo.githubusercontent.com/a2e461352799b6490088de15ac041162d7bf8adf9c07485ea921b525fecd0a8e/68747470733a2f2f692e696d6775722e636f6d2f446c69537066302e676966" src="https://camo.githubusercontent.com/a2e461352799b6490088de15ac041162d7bf8adf9c07485ea921b525fecd0a8e/68747470733a2f2f692e696d6775722e636f6d2f446c69537066302e676966" style="width: 200px; height: 200px;" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add Card2D UI element to UI sub-module:&lt;/strong&gt;  &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/398"&gt;fury-gl/fury#398&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Resize Panel2D with WindowResizeEvent or from corner placeholder&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Currently, the size of the Panel2D is static and cannot be changed dynamically. The size is passed in during the initialization and cannot be changed easily at runtime. This PR adds support for resizing the Panel2D dynamically by adding a placeholder icon at the bottom right corner of the panel. This icon can be click and dragged on to change the size accordingly. Other than this, the panel also retains a specific size ratio when the window is resized. This means if the window is resized in any direction the panel adapts itself w.r.t the updated size. This is done by adding relevant observers for the WindowResizeEvent and binding the relevant callback to it. Below is a quick demonstration:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;img alt="https://camo.githubusercontent.com/3b1bf6a1b6522a6079055ff196551362fcf89a41b35ac4b32315ce02333e496d/68747470733a2f2f692e696d6775722e636f6d2f3837504e3754512e676966" src="https://camo.githubusercontent.com/3b1bf6a1b6522a6079055ff196551362fcf89a41b35ac4b32315ce02333e496d/68747470733a2f2f692e696d6775722e636f6d2f3837504e3754512e676966" style="width: 200px; height: 200px;" /&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Resize Panel2D with WindowResizeEvent or from corner placeholder:&lt;/strong&gt;  &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/446"&gt;fury-gl/fury#446&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Added the watcher class to UI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This PR adds support for a watcher class in the UI elements. The purpose of this class is to monitor a particular attribute from the UI element after it has been added to the scene. If the attribute changes in the real time, a user defined callback is triggered and the scene is force rendered.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Added wathcer class to the UI sub-module:&lt;/strong&gt;  &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/448"&gt;fury-gl/fury#448&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Added support for borders in Panel2D&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Panel2D previously, didn’t support any sort of effect, the main reason behind this is that, all UI elements are individual entities that are comprised of different actors. These are not the widgets provided by vtk and in order to have some effects provided by vtk shaders must be involved. This obviously makes the whole system very complicated. The border on the other hand uses 4 Rectangle2Ds to draw the 4 borders. This makes the whole process easier but makes the Panel2D very performance heavy as we are adding 5 actors to the scene. Future iterations will replace these rectangles by textures, that way we don’t compromise performance and we can have different patterns in the border. Below is a demonstration:&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/54466356/121709989-bd340280-caf6-11eb-9b8a-81c65260d277.png" src="https://user-images.githubusercontent.com/54466356/121709989-bd340280-caf6-11eb-9b8a-81c65260d277.png" style="width: 200px; height: 200px;" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Added support for borders in Panel2D:&lt;/strong&gt;  &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/441"&gt;fury-gl/fury#441&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GSoC weekly Blogs&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Weekly blogs were added for FURY’s Website.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;First Evaluation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/477"&gt;fury-gl/fury#477&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Second Evaluation:&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/494"&gt;fury-gl/fury#494&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Date&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Blog Link&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 1(08-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Welcome to my weekly Blogs!&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-1-welcome-to-my-weekly-blogs/"&gt;Weekly Check-in #1&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 2(14-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Feature additions in UI and IO modules&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-2-feature-additions-in-ui-and-io-modules/"&gt;Weekly Check-in #2&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 3(21-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Adapting GridLayout to work with UI&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-3-adapting-gridlayout-to-work-with-ui/"&gt;Weekly Check-in #3&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 4(28-06-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Adding Tree UI to the UI module&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-4-adding-tree-ui-to-the-ui-module/"&gt;Weekly Check-in #4&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 5(05-07-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Rebasing all PR’s w.r.t the UI restructuring, Tree2D, Bug Fixes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-5-rebasing-all-pr-s-w-r-t-the-ui-restructuring-tree2d-bug-fixes/"&gt;Weekly Check-in #5&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 6(12-07-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Bug fixes, Working on Tree2D UI&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-6-bug-fixes-working-on-tree2d-ui/"&gt;Weekly Check-in #6&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 7(19-07-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Finalizing the stalling PR’s, finishing up Tree2D UI.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-7-finalizing-the-stalling-pr-s-finishing-up-tree2d-ui/"&gt;Weekly Check-in #7&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 8(26-07-2020)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Code Cleanup, Finishing up open PR’s, Continuing work on Tree2D.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-8-code-cleanup-finishing-up-open-pr-s-continuing-work-on-tree2d/"&gt;Weekly Check-in #8&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 9(02-08-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;More Layouts!&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-9-more-layouts/"&gt;Weekly Check-in #9&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 10(09-08-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Accordion UI, Support for sprite sheet animations.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-10-accordion-ui-support-for-sprite-sheet-animations/"&gt;Weekly Check-in #10&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 11(16-08-2021)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;More tutorials for Accordion2D, Finalizing remaining PRs.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/week-11-2/"&gt;Weekly Check-in #11&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Detailed weekly tasks and work done can be found
&lt;a class="reference external" href="https://blogs.python-gsoc.org/en/antrikshmisris-blog/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2021/2021-08-23-final-work-antriksh.html" rel="alternate"/>
    <summary>Name: Antriksh Misri</summary>
    <category term="google" label="google"/>
    <published>2021-08-23T00:00:00+00:00</published>
  </entry>
</feed>
