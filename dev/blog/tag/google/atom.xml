<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://fury.gl/</id>
  <title>Blog - Posts tagged google</title>
  <updated>2024-06-13T14:04:08.757828+00:00</updated>
  <link href="https://fury.gl/"/>
  <link href="https://fury.gl/blog/tag/google/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.10">ABlog</generator>
  <entry>
    <id>https://fury.gl/posts/2024/2024-06-06-week-1-robin.html</id>
    <title>Week 1: It officially begins…</title>
    <updated>2024-06-06T00:00:00+00:00</updated>
    <author>
      <name>Robin Roy</name>
    </author>
    <content type="html">&lt;section id="week-1-it-officially-begins"&gt;

&lt;p&gt;Hi, I’m &lt;a class="reference external" href="https://github.com/robinroy03"&gt;Robin&lt;/a&gt; and this is my blog about week 1.&lt;/p&gt;
&lt;p&gt;My goal for week 1 was to start with &lt;a class="reference external" href="https://www.pinecone.io/learn/retrieval-augmented-generation/"&gt;Retrieval-Augmented Generation (RAG)&lt;/a&gt;, check different databases and host every endpoint. My week1 and week2 are very intertwined because I applied everything I did during week1 on week2. (I’m writing this blog midway through week2)&lt;/p&gt;
&lt;section id="why-phi-3-mini-4k-instruct"&gt;
&lt;h2&gt;why phi-3-mini-4k-instruct?&lt;/h2&gt;
&lt;p&gt;Before I detail everything I’ve done this week, I’ll explain why &lt;a class="reference external" href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct"&gt;phi-3 mini 4k&lt;/a&gt; was chosen as the LLM, I forgot to mention this in the last blog. Phi-3 is a small 3.8B 4k context model, it means it can work with 4k tokens(similar to words) at a time. Due to its small size, it runs fast both locally and on Huggingface. Performance wise comparatively with other opensource models, it performs decently well. In the &lt;a class="reference external" href="https://chat.lmsys.org/?leaderboard"&gt;LMSYS LLM leaderboard&lt;/a&gt; phi-3 mini 4k comes with an ELO of 1066 (59th position). But it achieves this as a small model.
I also tried Llama3-8B, it performs better than phi-3 mini with an ELO of 1153 and rank 22. But it is considerably slower for inference. Due to this, I chose phi-3 mini for now.&lt;/p&gt;
&lt;section id="things-i-did-week-1-and-some-week2"&gt;
&lt;h3&gt;Things I did week-1 (and some week2)&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choosing the vector database&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I decided to choose &lt;a class="reference external" href="https://www.pinecone.io/"&gt;Pinecone&lt;/a&gt; as the vector DB because it had a very generous free tier. Other options on consideration were &lt;a class="reference external" href="https://github.com/pgvector/pgvector"&gt;pgvector&lt;/a&gt; and &lt;a class="reference external" href="https://www.trychroma.com/"&gt;chromadb&lt;/a&gt;, but they didn’t have a free tier.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PR Submissions and Review&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “2” (ordinal 2)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I also merged a &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/891"&gt;PR&lt;/a&gt; on FURY which fixes a CI issue. I also spent time doing review of other PRs from my fellow GSoC mates.&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deciding which embedding model to use&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “3” (ordinal 3)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;A good embedding model is necessary to generate embeddings which we then upsert into the DB. Ollama had embedding model support, but I found the catalogue very small and the models they provided were not powerful enough. Therefore I decided to try using HuggingFace Sentence Transformers.
Sentence Transformers have a very vibrant catalogue of models available of various sizes. I chose &lt;a class="reference external" href="https://huggingface.co/Alibaba-NLP/gte-large-en-v1.5"&gt;gte-large-en-v1.5&lt;/a&gt; from Alibaba-NLP, an 8k context, 434 million parameter model. It only had a modest memory requirement of 1.62 GB.
Performance wise, it ranks 11th on the &lt;a class="reference external" href="https://huggingface.co/spaces/mteb/leaderboard"&gt;MTEB leaderboard&lt;/a&gt;. It is a very interesting model due to its size:performance ratio.&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hosting the embedding model&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “4” (ordinal 4)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Hosting this sentence-transformer model was confusing. For some reason, the HF spaces were blocking the Python script from writing on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.cache&lt;/span&gt;&lt;/code&gt; folder. Docker container inside spaces runs with user id 1000 (non-root user), therefore I had to give it permission to download and store files.&lt;/p&gt;
&lt;p&gt;I’ve hosted 5 gunicorn workers to serve 5 parallel requests at a time. Since the model is small, this is possible.&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hosting the database endpoint&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “5” (ordinal 5)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I wrapped the pinecone DB API into an endpoint so it’ll be easy to query and receive the results.
It is also configured to accept 5 concurrent requests although I could increase it a lot more.&lt;/p&gt;
&lt;p&gt;I upserted docstrings from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fury/actor.py&lt;/span&gt;&lt;/code&gt; into the vector DB for testing. So now, whenever you ask a question the model will use some &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;actor.py&lt;/span&gt;&lt;/code&gt; function to give you an answer. For now, it could be used like a semantic function search engine.&lt;/p&gt;
&lt;p&gt;I decided to abstract the DB endpoint to reduce the dependency on one provider. We can swap the providers as required and keep all other features running.&lt;/p&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hosting Discord Bot&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “6” (ordinal 6)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;So with this, all the endpoints are finally online. The bot has some issues, it is going offline midway for some reason. I’ll have to see why that happens.&lt;/p&gt;
&lt;p&gt;For some reason, Huggingface spaces decided to not start the bot script. Later a community admin from Huggingface told me to use their official bot implementation as a reference. This is why I had to use threading and gradio to get the bot running (migrating to docker can be done, but this is how they did it and I just took that for now).&lt;/p&gt;
&lt;p&gt;Huggingface spaces need a script to satisfy certain criteria to allow them to run, one of them is a non-blocking I/O on the main loop. So I had to move the discord bot to a new thread.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="connecting-all-of-them-together"&gt;
&lt;h2&gt;Connecting all of them together!&lt;/h2&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;So now we have 4 hosted services, all hosted on HuggingFace spaces:&lt;/dt&gt;&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Discord Bot&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LLM API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Embeddings API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database API&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Now we’ll have to connect them all to get an answer to the user query.&lt;/p&gt;
&lt;p&gt;This is the current architecture, there’s a lot of room for improvement here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;img src="https://github.com/fury-gl/fury-communication-assets/blob/main/gsoc_2024/7-6-2024-demo-architecture-gsoc-robin-week2.png?raw=true"&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The Language Model takes the context and the user query, combines them to form an answer and returns to the user through discord (for now). Maybe moving the core logic from discord bot to a separate node might be good, and connect discord/github/X to that node.
The database takes embeddings and do an Approximate Nearest Neighbor search (a variant of KNN) and returns top-k results (k=3 for now).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;iframe src="https://github.com/robinroy03/fury-discord-bot/assets/115863770/48f1136d-18a5-45ee-aa22-0a3f6426d575" width="640" height="390" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;section id="what-is-coming-up-next-week"&gt;
&lt;h3&gt;What is coming up next week?&lt;/h3&gt;
&lt;p&gt;Answer quality improvements. Also, the discord bot dies randomly, have to fix that also.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h3&gt;Did you get stuck anywhere?&lt;/h3&gt;
&lt;p&gt;Was stuck in hosting models on Huggingface spaces, fixed it later.&lt;/p&gt;
&lt;p&gt;LINKS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://huggingface.co/spaces/robinroy03/fury-bot-discord/tree/main"&gt;Discord Bot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://huggingface.co/spaces/robinroy03/fury-db-endpoint/tree/main"&gt;Database Repo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://huggingface.co/spaces/robinroy03/fury-embeddings-endpoint/tree/main"&gt;Embedding Repo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://huggingface.co/spaces/robinroy03/fury-bot/tree/main"&gt;LLM Repo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id1"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “retrieval-augmented generation (rag)”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.pinecone.io/learn/retrieval-augmented-generation/"&gt;Retrieval-Augmented Generation (RAG)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “phi-3 mini 4k”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct"&gt;phi-3 mini 4k&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “lmsys llm leaderboard”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chat.lmsys.org/?leaderboard"&gt;LMSYS LLM leaderboard&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id4"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “pinecone”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.pinecone.io/"&gt;Pinecone&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “pgvector”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pgvector/pgvector"&gt;pgvector&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “chromadb”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.trychroma.com/"&gt;chromadb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “pr”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/891"&gt;PR&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “gte-large-en-v1.5”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://huggingface.co/Alibaba-NLP/gte-large-en-v1.5"&gt;gte-large-en-v1.5&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-06-06-week-1-robin.rst&lt;/span&gt;, line 2); &lt;em&gt;&lt;a href="#id9"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “mteb leaderboard”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://huggingface.co/spaces/mteb/leaderboard"&gt;MTEB leaderboard&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2024/2024-06-06-week-1-robin.html"/>
    <summary>Hi, I’m Robin and this is my blog about week 1.</summary>
    <category term="google" label="google"/>
    <published>2024-06-06T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2024/2024-06-06-week1-wachiou-bouraima.html</id>
    <title>WEEK 1: Progress and challenges at Google Summer of Code (GSoC) 2024</title>
    <updated>2024-06-06T00:00:00+00:00</updated>
    <author>
      <name>Wachiou BOURAIMA</name>
    </author>
    <content type="html">&lt;section id="week-1-progress-and-challenges-at-google-summer-of-code-gsoc-2024"&gt;

&lt;p&gt;Hello👋🏾,&lt;/p&gt;
&lt;p&gt;Welcome back to my Google Summer of Code (GSoC) 2024 journey!
This week has been filled with progress and challenges as I continue to work on modernizing the FURY code base.&lt;/p&gt;
&lt;section id="applying-the-keyword-only-decorator"&gt;
&lt;h2&gt;Applying the keyword_only decorator&lt;/h2&gt;
&lt;p&gt;My main task this week was to apply the keyword_only decorator to several functions.
The decorator ensures that all arguments except the first are keyword-only,
which helps to make the code clearer and parameter passing more explicit.
Some warnings appeared after applying this decorator, and to resolve them,
I updated all the code where these functions were called with the necessary format. This was a very important step in maintaining the integrity and functionality of the code base.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="managing-the-challenges-of-git-rebasing"&gt;
&lt;h2&gt;Managing the challenges of Git rebasing&lt;/h2&gt;
&lt;p&gt;Rebasing the branch I was working on was the other major activity of my week.
It was a real challenge because of the conflicts that arose and had to be resolved.
It involved a lot of research and problem-solving on how to resolve these conflicts,
which greatly enhanced my understanding of Git. It was a challenging but satisfying experience of version control management and complex mergers.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="peer-code-review"&gt;
&lt;h2&gt;Peer code review&lt;/h2&gt;
&lt;p&gt;In addition to my duties, I was also tasked with reviewing the code of my peers.
This exercise was very rewarding, as it enabled me to understand different coding styles and approaches.
The constructive comments and suggestions were beneficial not only for teammates,
but also for improving my own coding and reviewing skills.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="acknowledgements"&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;I would like to thank all my classmates: &lt;a class="reference external" href="https://github.com/itellaetxe"&gt;Iñigo Tellaetxe Elorriaga&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/robinroy03"&gt;Robin Roy&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/deka27"&gt;Kaustav Deka&lt;/a&gt; and my guide: &lt;a class="reference external" href="https://github.com//skoudoro"&gt;Serge Koudoro&lt;/a&gt; for their constructive suggestions on my work.
Their ideas and suggestions were of great help to me and I am grateful for their support and advice.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-happens-next"&gt;
&lt;h2&gt;What happens next?&lt;/h2&gt;
&lt;p&gt;Here’s a summary of what I plan to do in week two:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Apply the keyword_only decorator to all other necessary functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the calling of these functions in the code to ensure consistency and avoid raising warnings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rename the decorator with a more descriptive name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add two parameters to the decorator, specifying from which version of FURY it will work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🥰Thanks for reading! Your comments are most welcome, and I look forward to giving you a sneak preview of my work next week.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2024/2024-06-06-week1-wachiou-bouraima.html"/>
    <summary>Hello👋🏾,</summary>
    <category term="google" label="google"/>
    <published>2024-06-06T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2024/2024-05-28-week-0-robin.html</id>
    <title>Week 0: Community Bonding!</title>
    <updated>2024-05-29T00:00:00+00:00</updated>
    <author>
      <name>Robin Roy</name>
    </author>
    <content type="html">&lt;section id="week-0-community-bonding"&gt;

&lt;p&gt;Hi, I’m Robin and I’m a 2nd year CS undergrad from Vellore Institute of Technology, Chennai. During GSoC ‘24 my work will be to build an LLM chatbot which will help the community by answering their questions.&lt;/p&gt;
&lt;p&gt;Scientific visualization is often complicated and hard for people to get used to - “Although 3D visualization technologies are advancing quickly, their sophistication and focus on non-scientific domains makes it hard for researchers to use
them. In other words, most of the existing 3D visualization and computing APIs are low-level
(close to the hardware) and made for professional specialist developers.” &lt;a class="reference internal" href="../../posts/2024/2024-05-28-week-0-robin.html#fury" id="id1"&gt;&lt;span&gt;[FURY]&lt;/span&gt;&lt;/a&gt;. FURY is our effort to bridge this gap with an easy-to-use API. With LLMs, the goal is to take this one step further and make it even simpler for people to get started. By reducing the barrier to entry, we can bring more people into this domain. Visualization should not be the most time-consuming thing for an engineer/researcher, it is supposed to just happen and help them accelerate faster.&lt;/p&gt;
&lt;section id="my-community-bonding-work"&gt;
&lt;h2&gt;My Community Bonding Work&lt;/h2&gt;
&lt;p&gt;The main goal for me was to try different hosting providers and LLMs, test everything and see how they perform. I had my final exams during this period so I lost around 2 weeks to that. But I did manage to catch up and finish the work.
We wanted to keep hosting cheap (preferably free). I’ll detail all the things I tried and the review for each of them.&lt;/p&gt;
&lt;section id="hosting-work-in-order"&gt;
&lt;h3&gt;Hosting work, in order:&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ollama on Google Colab&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The way it works is by taking Ollama and running it inside google colab, then providing a reverse proxy using ngrok.
We later connect that reverse proxy to the local ollama instance.&lt;/p&gt;
&lt;p&gt;It works. But Google Colab can run only for a maximum of 12 hours and the runtimes will timeout if idle. Also, it was very hacky.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;iframe width="640" height="390" src="https://drive.google.com/file/d/1qNLtXxAMlLQ8xO8jfV0keRtskvcsj-fC/preview" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ollama on Kaggle&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-05-28-week-0-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “2” (ordinal 2)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Same as above, same issues. Talked with my mentor &lt;a class="reference external" href="https://github.com/m-agour"&gt;Mohamed&lt;/a&gt; and skipped implementation.&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GGUF (GPT-Generated Unified Format) models with ctransformers on HuggingFace&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-05-28-week-0-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “3” (ordinal 3)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;The way it works is by taking a &lt;a class="reference external" href="https://vickiboykis.com/2024/02/28/gguf-the-long-way-around/"&gt;gguf&lt;/a&gt; model and then inferencing using the ctransformers library from HuggingFace. An endpoint will be exposed using flask/fastapi.&lt;/p&gt;
&lt;p&gt;It had issues like not all models were working, and ctransformers did not support all models. And the models that do work were slow on my machine. Local testing was a nightmare and inference speed on HuggingFace was also very slow.&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GGUF models with llama-cpp-python, hosted on HuggingFace&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-05-28-week-0-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “4” (ordinal 4)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I used langchain wrapper over llama-cpp-python to inference GGUF models. This one was able to handle all GGUF models, and local testing was okayish. When I tried handling concurrent requests, it crashed and gave segmentation fault. I fixed segmentation fault later by increasing gunicorn workers (Gunicorn was the WSGI server I used).
It was still not that good and local testing was annoying me. I cannot iterate fast when it takes a full 2-3 minutes for the output to generate.&lt;/p&gt;
&lt;p&gt;This wrapper on a wrapper on a wrapper was also not fun (langchain wrapper of llama-cpp-python which itself is a wrapper of llama-cpp).&lt;/p&gt;
&lt;p&gt;I later removed langchain and reimplemented everything, but langchain wasn’t the reason for the slow performance so it wasn’t helpful.&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ollama on HuggingFace!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2024/2024-05-28-week-0-robin.rst&lt;/span&gt;, line 2)&lt;/p&gt;
&lt;p&gt;Enumerated list start value not ordinal-1: “5” (ordinal 5)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;TLDR: This one worked!&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;iframe width="640" height="390" src="https://drive.google.com/file/d/17yxdw169uqLlw6WKfi--bWEUQArJk7i2/preview" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ollama was perfect, it works like a charm on my machine and the ecosystem is also amazing (the people on their discord server are super kind). I knew I had to try ollama on HuggingFace.
I was unable to initially run ollama and provide an endpoint. My dockerfile builds were all failing. Later mentor &lt;a class="reference external" href="https://github.com/skoudoro/"&gt;Serge&lt;/a&gt; told me to use the official Ollama image (till then I was using the Ubuntu base image).&lt;/p&gt;
&lt;p&gt;I managed to get the dockerfile running locally, but still, the HuggingFace build was failing. Then I took help from HuggingFace community. They told me it was HuggingFace blocking some ports, so to try different ports. This is when I came across another ollama server repo, and it was using Ubuntu as the base image. I studied that code and modified my dockerfile. It was adding an env variable to repo settings that I missed. My current dockerfile is just 5 lines and it works well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="fury-discord-bot"&gt;
&lt;h3&gt;FURY Discord Bot&lt;/h3&gt;
&lt;p&gt;I also made a barebones FURY Discord Bot which was connected to my local ollama instance. My dockerfile was stuck and I wanted to do something tangible, so I did this before the weekly meeting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;iframe src="https://drive.google.com/file/d/17aosa4iyDl90mYfVGPrmILtQdXtS6IEy/preview" width="640" height="480" allow="autoplay"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next-week"&gt;
&lt;h2&gt;What is coming up next week?&lt;/h2&gt;
&lt;p&gt;Currently, I’m finding a vector DB &amp;amp; studying how to effectively use RAG here.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;Yes, I had some issues with the dockerfile. It was resolved.&lt;/p&gt;
&lt;p&gt;LINKS:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://huggingface.co/spaces/robinroy03/fury-bot/tree/main"&gt;HuggingFace repo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/robinroy03/fury-discord-bot"&gt;Discord Bot&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;div role="list" class="citation-list"&gt;
&lt;div class="citation" id="fury" role="doc-biblioentry"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;FURY&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Eleftherios Garyfallidis, Serge Koudoro, Javier Guaje, Marc-Alexandre Côté, Soham Biswas, David Reagan, Nasim Anousheh, Filipi Silva, Geoffrey Fox, and Fury Contributors. “FURY: advanced scientific visualization.” Journal of Open Source Software 6, no. 64 (2021): 3384. &lt;a class="reference external" href="https://doi.org/10.21105/joss.03384"&gt;https://doi.org/10.21105/joss.03384&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2024/2024-05-28-week-0-robin.html"/>
    <summary>Hi, I’m Robin and I’m a 2nd year CS undergrad from Vellore Institute of Technology, Chennai. During GSoC ‘24 my work will be to build an LLM chatbot which will help the community by answering their questions.</summary>
    <category term="google" label="google"/>
    <published>2024-05-29T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2024/2024-05-28-first-post-wachiou-bouraima.html</id>
    <title>WEEK 0: The beginning of my journey in Google Summer of Code (GSoC) 2024</title>
    <updated>2024-05-28T00:00:00+00:00</updated>
    <author>
      <name>Wachiou BOURAIMA</name>
    </author>
    <content type="html">&lt;section id="week-0-the-beginning-of-my-journey-in-google-summer-of-code-gsoc-2024"&gt;

&lt;section id="here-we-go"&gt;
&lt;h2&gt;Here we go…..&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Hello and welcome to my GSoC 24 journey, I’m Wachiou Bouraima pronounced (Wasiu Ibrahima).&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;First of all, I’d like to express my deep gratitude for this immense opportunity.&lt;/div&gt;
&lt;div class="line"&gt;In this first article, yes you read “first article” correctly, as it won’t be the only one, I’m going to share with you my first adventures in GSoC’24. Happy read&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="welcome-and-integration-into-the-community"&gt;
&lt;h2&gt;Welcome and integration into the community.&lt;/h2&gt;
&lt;p&gt;Like any good start, this week I have the incredible opportunity to be welcomed into the community by the Core Team and my Mentor himself, during this session the Mentors welcomed us warmly and also congratulated us. They shared with us the rules respected during and after the GSoC program. This session made me feel comfortable and confident.&lt;/p&gt;
&lt;p&gt;I also have to admit that the mentors are experienced and willing to share their knowledge, which I really appreciate. I also got to know the DIPY and FURY community members.&lt;/p&gt;
&lt;p&gt;Not only that, but I also attended the GSoC’24 summit organised by Google. This session was very informative and aimed to ease our way into GSoC’24, and help us avoid certain mistakes during and after the program.
I was able to meet the other GSoC students, and I must say that they are all very talented and motivated. I am very happy to be part of this community.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="project-details"&gt;
&lt;h2&gt;Project details&lt;/h2&gt;
&lt;p&gt;I will work on the project: &lt;strong&gt;Modernization of the FURY code base to improve readability, maintainability and performance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This project aims to modernize the FURY code base by implementing keyword-only arguments to improve code clarity and explicit parameter passing. In addition, the integration of lazy loading functionality will optimize performance by loading resources only when they are needed. Finally, active participation in code refactoring efforts will improve the structure and maintainability of the FURY code base. The project will result in a modernized code base, comprehensive unit testing, updated Sphinx documentation and public presentations illustrating the improvements and benefits. Ultimately, the aim is to significantly improve the FURY code base for future developers and users.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="weekly-tasks"&gt;
&lt;h2&gt;Weekly tasks&lt;/h2&gt;
&lt;p&gt;I had to work on my first mission of the adventure, which was to create a decorator named &lt;strong&gt;keyword_only&lt;/strong&gt; to ensure that all arguments after the first are keyword arguments only. It also checks that all keyword arguments are expected by the function. You can check what I had to do in this Pull Request : &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/888"&gt;fury-gl/fury#888&lt;/a&gt;. I’ve learned a lot from implementing the &lt;strong&gt;keyword_only&lt;/strong&gt; decorator&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-s-next"&gt;
&lt;h2&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;For my next task, I’ll first apply the advice and comments from my first task, adding the &lt;strong&gt;keyword_only&lt;/strong&gt; decorator after all the necessary reviews and member approval, on all the functions concerned next, then I’ll start and finish, integrating the lazy loading feature.&lt;/p&gt;
&lt;p&gt;🥰 Thank you for reading. Your comments are most welcome, and I learn from them.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2024/2024-05-28-first-post-wachiou-bouraima.html"/>
    <summary>Like any good start, this week I have the incredible opportunity to be welcomed into the community by the Core Team and my Mentor himself, during this session the Mentors welcomed us warmly and also congratulated us. They shared with us the rules respected during and after the GSoC program. This session made me feel comfortable and confident.</summary>
    <category term="google" label="google"/>
    <published>2024-05-28T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-25-final-report-praneeth.html</id>
    <title>Google Summer of Code Final Work Product</title>
    <updated>2023-08-25T00:00:00+00:00</updated>
    <author>
      <name>Praneeth Shetty</name>
    </author>
    <content type="html">&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/projects/BqfBWfwS"&gt;&lt;img alt="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" class="align-center" height="50" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/organizations/python-software-foundation"&gt;&lt;img alt="https://www.python.org/static/community_logos/python-logo.png" src="https://www.python.org/static/community_logos/python-logo.png" style="width: 40%;" /&gt;
&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://fury.gl/latest/index.html"&gt;&lt;img alt="https://python-gsoc.org/logos/FURY.png" src="https://python-gsoc.org/logos/FURY.png" style="width: 25%;" /&gt;
&lt;/a&gt;
&lt;section id="google-summer-of-code-final-work-product"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Praneeth Shetty&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organisation:&lt;/strong&gt; Python Software Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sub-Organisation:&lt;/strong&gt; FURY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/fury-gl/fury/wiki/Google-Summer-of-Code-2023-(GSOC2023)#project-5-update-user-interface-widget--explore-new-ui-framework"&gt;FURY - Update user interface widget + Explore new UI Framework&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="proposed-objectives"&gt;
&lt;h2&gt;Proposed Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;SpinBoxUI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scrollbar as Independent Element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FileDialog&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TreeUI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AccordionUI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ColorPickerUI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;Stretch Goals:&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Exploring new UI Framework&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implementing Borders for UI elements&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-completed"&gt;
&lt;h2&gt;Objectives Completed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;SpinBoxUI:&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; element is essential for user interfaces as it allows users to pick a numeric value from a set range. While we had an active pull request (PR) to add this element, updates in the main code caused conflicts and required further changes for added features. At one point, we noticed that text alignment wasn’t centered properly within the box due to a flaw. To fix this, we began a PR to adjust the alignment, but it turned into a larger refactoring of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;, a core component connected to various parts. This was a complex task that needed careful handling. After sorting out the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;, we returned to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt; and made a few tweaks. Once we were confident with the changes, the PR was successfully merged after thorough review and testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pull Requests:&lt;/strong&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 50)&lt;/p&gt;
&lt;p&gt;Definition list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SpinBoxUI (Merged)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/499"&gt;fury-gl/fury#499&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;img alt="SpinBoxUI" class="align-center" src="https://user-images.githubusercontent.com/64432063/263165327-c0b19cdc-9ebd-433a-8ff1-99e706a76508.gif" style="height: 500px;" /&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;`TextBlock2D` Refactoring:&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;This was a significant aspect of the GSoC period and occupied a substantial portion of the timeline. The process began when we observed misaligned text in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SpinBoxUI&lt;/span&gt;&lt;/code&gt;, as previously discussed. The root cause of the alignment issue was the mispositioning of the text actor concerning the background actor. The text actor’s independent repositioning based on justification conflicted with the static position of the background actor, leading to the alignment problem.&lt;/p&gt;
&lt;p&gt;To address this, the initial focus was on resolving the justification issue. However, as the work progressed, we recognized that solely adjusting justification would not suffice. The alignment was inherently linked to the UI’s size, which was currently retrieved only when a valid scene was present. This approach lacked scalability and efficiency, as it constrained size retrieval to scene availability.&lt;/p&gt;
&lt;p&gt;To overcome these challenges, we devised a solution involving the creation of a bounding box around the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;. This bounding box would encapsulate the size information, enabling proper text alignment. This endeavor spanned several weeks of development, culminating in a finalized solution that underwent rigorous testing before being merged.&lt;/p&gt;
&lt;p&gt;As a result of this refactoring effort, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt; now offers three distinct modes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fully Static Background:&lt;/strong&gt; This mode requires background setup during initialization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dynamic Background:&lt;/strong&gt; The background dynamically scales based on the text content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Auto Font Scale Mode:&lt;/strong&gt; The font within the background box automatically scales to fill the available space.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An issue has been identified with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt; where its text actor aligns with the top boundary of the background actor, especially noticeable with letters like “g,” “y,” and “j”. These letters extend beyond the baseline of standard alphabets, causing the text box to shift upwards.&lt;/p&gt;
&lt;p&gt;However, resolving this matter is complex. Adjusting the text’s position might lead to it touching the bottom boundary, especially in font scale mode, resulting in unexpected positioning and transformations. To address this, the plan is to defer discussions about this matter until after GSoC, allowing for thorough consideration and solutions.&lt;/p&gt;
&lt;p&gt;For more detailed insights into the individual steps and nuances of this process, you can refer to the comprehensive weekly blog post provided below. It delves into the entire journey of this &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt; refactoring effort.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pull Requests:&lt;/strong&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 79)&lt;/p&gt;
&lt;p&gt;Definition list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fixing Justification Issue - 1st Draft (Closed)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/790"&gt;fury-gl/fury#790&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adding BoundingBox and fixing Justificaiton (Merged)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/803"&gt;fury-gl/fury#803&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adding getters and setter for properties (Merged)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/830"&gt;fury-gl/fury#830&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Text Offset PR (Closed)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/837"&gt;fury-gl/fury#837&lt;/a&gt;&lt;/p&gt;
&lt;img alt="TextBlock2D Feature Demo" class="align-center" src="https://user-images.githubusercontent.com/64432063/258603191-d540105a-0612-450e-8ae3-ca8aa87916e6.gif" style="height: 500px;" /&gt;
&lt;img alt="TextBlock2D All Justification" class="align-center" src="https://github-production-user-asset-6210df.s3.amazonaws.com/64432063/254652569-94212105-7259-48da-8fdc-41ee987bda84.png" style="height: 500px;" /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;ScrollbarUI as Independent Element:&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;We initially planned to make the scrollbar independent based on PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/16"&gt;#16&lt;/a&gt;. The main goal was to avoid redundancy by not rewriting the scrollbar code for each element that requires it, such as the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileMenu2D&lt;/span&gt;&lt;/code&gt;. However, upon further analysis, we realized that elements like the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileMenu2D&lt;/span&gt;&lt;/code&gt; and others utilize the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Listbox2D&lt;/span&gt;&lt;/code&gt;, which already includes an integrated scrollbar. We also examined other UI libraries and found that they also have independent scrollbars but lack a proper use case. Typically, display containers like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Listbox2D&lt;/span&gt;&lt;/code&gt; are directly used instead of utilizing an independent scrollbar.&lt;/p&gt;
&lt;p&gt;Based on these findings, we have decided to close all related issues and pull requests for now. If the need arises in the future, we can revisit this topic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Topic:&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/discussions/816"&gt;fury-gl/fury#816&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-objectives"&gt;
&lt;h2&gt;Other Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Reviewing &amp;amp; Merging:&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;In this phase, my focus was not on specific coding but rather on facilitating the completion of ongoing PRs. Here are two instances where I played a role:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CardUI PR:&lt;/strong&gt;
I assisted with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;CardUI&lt;/span&gt;&lt;/code&gt; PR by aiding in the rebase process and reviewing the changes. The CardUI is a simple UI element consisting of an image and a description, designed to function like a flash card. I worked closely with my mentor to ensure a smooth rebase and review process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ComboBox Issue:&lt;/strong&gt;
There was an issue with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ComboBox2D&lt;/span&gt;&lt;/code&gt; functionality, where adding it to a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TabUI&lt;/span&gt;&lt;/code&gt; caused all elements to open simultaneously, which shouldn’t be the case. I tested various PRs addressing this problem and identified a suitable solution. I then helped the lead in reviewing the PR that fixed the issue, which was successfully merged.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Pull Requests:&lt;/strong&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 116)&lt;/p&gt;
&lt;p&gt;Definition list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CardUI (Merged)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/398"&gt;fury-gl/fury#398&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ComboBox Flaw (Merged)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/768"&gt;fury-gl/fury#768&lt;/a&gt;&lt;/p&gt;
&lt;img alt="CardUI" class="align-center" src="https://user-images.githubusercontent.com/54466356/112532305-b090ef80-8dce-11eb-90a0-8d06eed55993.png" style="height: 500px;" /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Updating Broken Website Links:&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;I addressed an issue with malfunctioning links in the Scientific Section of the website. The problem emerged from alterations introduced in PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/769"&gt;#769&lt;/a&gt;. These changes consolidated demos and examples into a unified “auto_examples” folder, and a toml file was utilized to retrieve this data and construct examples. However, this led to challenges with the paths employed in website generation. My responsibility was to rectify these links, ensuring they accurately direct users to the intended content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pull Requests:&lt;/strong&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 130)&lt;/p&gt;
&lt;p&gt;Definition list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Updating Broken Links (Merged)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/820"&gt;fury-gl/fury#820&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-in-progress"&gt;
&lt;h2&gt;Objectives in Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;FileDialogUI:&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;An existing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; PR by Soham (&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/294"&gt;#294&lt;/a&gt;) was worked upon. The primary task was to rebase the PR to match the current UI structure, resolving compatibility concerns with the older base. In PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/832"&gt;#832&lt;/a&gt;, we detailed issues encompassing resizing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; and components, addressing text overflow, fixing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ZeroDivisionError&lt;/span&gt;&lt;/code&gt;, and correcting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ListBox2D&lt;/span&gt;&lt;/code&gt; item positioning. The PR is complete with comprehensive testing and documentation. Presently, it’s undergoing review, and upon approval, it will be prepared for integration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pull Requests:&lt;/strong&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 140)&lt;/p&gt;
&lt;p&gt;Definition list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Soham’s FileDialog (Closed)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/294"&gt;fury-gl/fury#294&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;FileDialogUI (Under Review)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/832"&gt;fury-gl/fury#832&lt;/a&gt;&lt;/p&gt;
&lt;img alt="FileDialogUI" class="align-center" src="https://user-images.githubusercontent.com/64432063/263189092-6b0891d5-f0ef-4185-8b17-c7104f1a7d60.gif" style="height: 500px;" /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;TreeUI:&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;Continuing Antriksh’s initial PR for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeUI&lt;/span&gt;&lt;/code&gt; posed some challenges. Antriksh had set the foundation, and I picked up from there. The main issue was with the visibility of TreeUI due to updates in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;set_visibility&lt;/span&gt;&lt;/code&gt; method of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Panel2D&lt;/span&gt;&lt;/code&gt;. These updates affected how &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeUI&lt;/span&gt;&lt;/code&gt; was displayed, and after investigating the actors involved, it was clear that the visibility features had changed. This took some time to figure out, and I had a helpful pair programming session with my mentor, Serge, to narrow down the problem. Now, I’ve updated the code to address this issue. However, I’m still a bit cautious about potential future problems. The PR is now ready for review.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pull Requests:&lt;/strong&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 154)&lt;/p&gt;
&lt;p&gt;Definition list ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TreeUI (In Progress)&lt;/strong&gt; - &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/821"&gt;fury-gl/fury#821&lt;/a&gt;&lt;/p&gt;
&lt;img alt="TreeUI" class="align-center" src="https://user-images.githubusercontent.com/64432063/263237308-70e77ba0-1ce8-449e-a79c-d5e0fbb58b45.gif" style="height: 500px;" /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="gsoc-weekly-blogs"&gt;
&lt;h2&gt;GSoC Weekly Blogs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;My blog posts can be found at &lt;a class="reference external" href="https://fury.gl/latest/blog/author/praneeth-shetty.html"&gt;FURY website&lt;/a&gt;
and &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/"&gt;Python GSoC blog&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;colgroup&gt;
&lt;col style="width: 40.0%" /&gt;
&lt;col style="width: 40.0%" /&gt;
&lt;col style="width: 20.0%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Date&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Blog Post Link&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 0 (27-05-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Community Bounding Period&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-02-week-0-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/gsoc-2023-community-bonding-period/"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 1 (03-06-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Working with SpinBox and TextBox Enhancements&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id5"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id6"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-03-week-1-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-1-working-with-spinbox-and-textbox-enhancements/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 2 (10-06-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Tackling Text Justification and Icon Flaw Issues&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id7"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id8"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-11-week-2-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-2-tackling-text-justification-and-icon-flaw-issues/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 3 (17-06-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Resolving Combobox Icon Flaw and TextBox Justification&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id9"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id10"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-17-week-3-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-3-resolving-combobox-icon-flaw-and-textbox-justification/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 4 (24-06-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Exam Preparations and Reviewing&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id11"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id12"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-24-week-4-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-4-exam-preparations-and-reviewing/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 5 (01-07-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Trying out PRs and Planning Ahead&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id13"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id14"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-01-week-5-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-5-testing-out-prs-and-planning-ahead/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 6 (08-07-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;BoundingBox for TextBlock2D!&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id15"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id16"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-08-week-6-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-6-boundingbox-for-textblock2d/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 7 (15-07-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Sowing the seeds for TreeUI&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id17"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id18"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-15-week-7-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-7-sowing-the-seeds-for-treeui/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 8 (22-07-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Another week with TextBlockUI&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id19"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id20"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-22-week-8-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-8-another-week-with-textblockui/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 9 (29-07-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;TextBlock2D is Finally Merged!&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id21"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id22"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-29-week-9-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-9-textblock2d-is-finally-merged/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 10 (05-08-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Its time for a Spin-Box!&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id23"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id24"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-05-week-10-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-10-its-time-for-a-spin-box/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 11 (12-08-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Bye Bye SpinBox&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id25"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id26"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-12-week-11-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-11-bye-bye-spinbox/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 12 (19-08-2023)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;FileDialog Quest Begins!&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id27"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “fury”.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-25-final-report-praneeth.rst&lt;/span&gt;, line 15); &lt;em&gt;&lt;a href="#id28"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “python”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-19-week-12-praneeth.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/ganimtron_10s-blog-copy-2/week-12-filedialog-quest-begins/"&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-25-final-report-praneeth.html"/>
    <summary>Name: Praneeth Shetty</summary>
    <category term="google" label="google"/>
    <published>2023-08-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-24-week-12-tvcastillod.html</id>
    <title>Week 12 : Experimenting with ODFs implementation</title>
    <updated>2023-08-24T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;section id="week-12-experimenting-with-odfs-implementation"&gt;

&lt;section id="what-did-i-do-this-week"&gt;
&lt;h2&gt;What did I do this week?&lt;/h2&gt;
&lt;p&gt;There were different issues I needed to address for the ODF implementation. Even though I could not solve any of them completely, I did check each of the issues and made some progress. All the work in progress is being recorded in the following branch &lt;a class="reference external" href="https://github.com/tvcastillod/fury/tree/SH-for-ODF-impl"&gt;SH-for-ODF-impl&lt;/a&gt;, which when ready will be associated with a well-structured PR.&lt;/p&gt;
&lt;p&gt;First, about the scaling, I was suggested to check Generalized Fractional Anisotropy &lt;strong&gt;gfa&lt;/strong&gt; metric to adjust the scaling depending on the shape of the ODF glyph, i.e., the less the &lt;strong&gt;gfa&lt;/strong&gt; the more sphere-shaped and smaller, so I had to associate a greater scaling for those. However, this did not work very well as I was unable to define an appropriate scale relation that would give an equitable result for each glyph. For this reason, I opted to use peak values which are extracted from the ODFs, setting the scales as 1/peak_value*0.4 and I got a more uniformly sized glyph without the need of setting it manually. That is a temporal solution as I would like to see better why this happens and if possible do the adjustment inside the shader instead of a precalculation.&lt;/p&gt;
&lt;p&gt;Second, for the direction, I made a small adjustment to the spherical coordinates which affected the direction of the ODF glyph. As you can see below,&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/263122770-b9ee19d2-d82b-4d7f-a5bb-1cbbf5907049.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/263122770-b9ee19d2-d82b-4d7f-a5bb-1cbbf5907049.png" style="width: 400px;" /&gt;
&lt;p&gt;All the glyphs are aligned over the y-axis but not over the z-axis, to correct this I precalculated the main direction of each glyph using peaks and passed it to the shader as a &lt;em&gt;vec3&lt;/em&gt;, then used &lt;em&gt;vec2vecrotmat&lt;/em&gt; to align the main axis vector of the ODF to the required direction vector, the only problem with this is that not all the glyps are equally aligned to the axis, i.e., the first 3 glyphs are aligned with the x-axis but the last one is aligned with the y-axis, so the final rotation gives a different result for that one.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/263122752-b2aa696f-62a5-4b09-b8dd-0cb1ec49431c.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/263122752-b2aa696f-62a5-4b09-b8dd-0cb1ec49431c.png" style="width: 400px;" /&gt;
&lt;p&gt;As with the first small adjustment of the coordinates the direction was partially correct, I need to double check the theta, phi and r definitions to see if I can get the right direction without the need of the additional data of direction. Also, there might be a way to get the specific rotation angles associated to each individual glyph from the data associated with the ODFs.&lt;/p&gt;
&lt;p&gt;Third, about passing the coefficients data through textures, I understand better now how to pass textures to the shaders but I still have problems understanding how to retrieve the data inside the shader. I used &lt;a class="reference external" href="https://github.com/fury-gl/fury/blob/master/docs/experimental/viz_shader_texture.py"&gt;this base implementation&lt;/a&gt;, suggested by one of my mentors, to store the data as a &lt;a class="reference external" href="http://www.khronos.org/opengl/wiki/Cubemap_Texture#:~:text=A%20Cubemap%20Texture%20is%20a,the%20value%20to%20be%20accessed."&gt;texture cubemap&lt;/a&gt;, “a texture, where each mipmap level consists of six 2D images which must be square. The 6 images represent the faces of a cube”. I had 4x15 coefficients and inside the function, a grid of RGB colors is made so then it can be mapped as a texture. To check if was passing the data correctly, I used the same value, .5, for all the textures, so then I could pick a random texel get a specific color (gray), and pass it as &lt;em&gt;fragOutput0&lt;/em&gt; to see if the value was correct. However, it didn’t appear to work correctly as I couldn’t get the expected color. To get the specific color I used &lt;a class="reference external" href="https://registry.khronos.org/OpenGL-Refpages/gl4/html/texture.xhtml"&gt;texture(sampler, P)&lt;/a&gt; which samples texels from the texture bound to sampler at texture coordinate P. Now, what I still need to figure out is which should be the corresponding texture coordinate. I have tried with random coordinates, as they are supposed to correspond to a point on the cube and since the information I have encoded in the texture is all the same, I assumed that I would get the expected result for any set of values. It might be a problem with the data normalization, or maybe there is something failing on the texture definition, but I need to review it in more detail to see where is the problem.&lt;/p&gt;
&lt;p&gt;Lastly, about the colormapping, I created the texture based on a generic colormap from &lt;a class="reference external" href="https://matplotlib.org/stable/tutorials/colors/colormaps.html"&gt;matplotlib&lt;/a&gt;. I was able to give some color to the glyph but it does not match correctly its shape. Some adjustment must be done regarding the texels, as the colormap is mapped on a cube, but I need it to fit the shape of the glyph correctly.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/263122760-7d1fff5e-7787-473c-8053-ea69f3009fb4.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/263122760-7d1fff5e-7787-473c-8053-ea69f3009fb4.png" style="width: 250px;" /&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;I will continue to explore more on how to handle textures so I can solve the issues related to the coefficient data and colormapping. Also, take a deeper look at the SH implementation and check what is the information needed to adjust the main direction of the ODF correctly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="did-i-get-stuck-anywhere"&gt;
&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;As I mentioned I had some drawbacks in understanding the use of textures and how to retrieve the data inside the shaders. This is a topic that might take some time to manage properly but if I can master it and understand it better, it is a tool that can be useful later. Additionally, there are details of the SH implementation that I still need to understand and explore better in order to make sure I get exactly the same result as the current &lt;em&gt;odf_slicer&lt;/em&gt; implementation.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-24-week-12-tvcastillod.html"/>
    <summary>There were different issues I needed to address for the ODF implementation. Even though I could not solve any of them completely, I did check each of the issues and made some progress. All the work in progress is being recorded in the following branch SH-for-ODF-impl, which when ready will be associated with a well-structured PR.</summary>
    <category term="google" label="google"/>
    <published>2023-08-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-24-final-report-tvcastillod.html</id>
    <title>Google Summer of Code Final Work Product</title>
    <updated>2023-08-24T00:00:00+00:00</updated>
    <author>
      <name>Tania Castillo</name>
    </author>
    <content type="html">&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/projects/ymwnLwtT"&gt;&lt;img alt="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" class="align-center" height="50" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/organizations/python-software-foundation"&gt;&lt;img alt="https://www.python.org/static/community_logos/python-logo.png" src="https://www.python.org/static/community_logos/python-logo.png" style="width: 40%;" /&gt;
&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://fury.gl/latest/index.html"&gt;&lt;img alt="https://python-gsoc.org/logos/FURY.png" src="https://python-gsoc.org/logos/FURY.png" style="width: 25%;" /&gt;
&lt;/a&gt;
&lt;section id="google-summer-of-code-final-work-product"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Tania Castillo&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organisation:&lt;/strong&gt; Python Software Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sub-Organisation:&lt;/strong&gt; FURY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/fury-gl/fury/wiki/Google-Summer-of-Code-2023-(GSOC2023)#project-3-sdf-based-uncertainty-representation-for-dmri-glyphs"&gt;SDF-based uncertainty representation for dMRI glyphs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Diffusion Magnetic Resonance Imaging (dMRI) is a non-invasive imaging technique used by neuroscientists to measure the diffusion of water molecules in biological tissue. The directional information is reconstructed using either a Diffusion Tensor Imaging (DTI) or High Angular Resolution Diffusion Imaging (HARDI) based model, which is graphically represented as tensors and Orientation Distribution Functions (ODF). Traditional rendering engines discretize Tensor and ODF surfaces using triangles or quadrilateral polygons, making their visual quality depending on the number of polygons used to build the 3D mesh, which might compromise real-time display performance. This project proposes a methodological approach to further improve the visualization of DTI tensors and HARDI ODFs glyphs by using well-established techniques in the field of computer graphics, such as geometry amplification, billboarding, signed distance functions (SDFs), and ray marching.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="proposed-objectives"&gt;
&lt;h2&gt;Proposed Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Implement a parallelized version of computer-generated billboards using geometry shaders for amplification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Model the mathematical functions that express the geometry of ellipsoid glyphs and implement them using Ray Marching techniques.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Model the mathematical functions that express the geometry of ODF glyphs and implement them using Ray Marching techniques.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use SDF properties and techniques to represent the uncertainty of dMRI reconstruction models.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-completed"&gt;
&lt;h2&gt;Objectives Completed&lt;/h2&gt;
&lt;section id="ellipsoid-actor-implemented-with-sdf"&gt;
&lt;h3&gt;Ellipsoid actor implemented with SDF&lt;/h3&gt;
&lt;p&gt;A first approach for tensor glyph generation has been made, using ray marching and SDF applied to a box. The current implementation (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tensor_slicer&lt;/span&gt;&lt;/code&gt;) requires a sphere with a specific number of vertices to be deformed. Based on this model, a sphere with more vertices is needed to get a higher resolution. Because the ray marching technique does not use polygonal meshes, it is possible to define perfectly smooth surfaces and still obtain a fast rendering.&lt;/p&gt;
&lt;p&gt;Details of the implementation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Vertex shader pre-calculations&lt;/em&gt;: Some minor calculations are done in the vertex shader. One, corresponding to the eigenvalues constraining and min-max normalization, are to avoid incorrect visualizations when the difference between the eigenvalues is too large. And the other is related to the tensor matrix calculation given by the diffusion tensor definition &lt;span class="math notranslate nohighlight"&gt;\(T = R^{−1}\Lambda R\)&lt;/span&gt;, where &lt;span class="math notranslate nohighlight"&gt;\(R\)&lt;/span&gt; is a rotation matrix that transforms the standard basis onto the eigenvector basis, and &lt;span class="math notranslate nohighlight"&gt;\(\Lambda\)&lt;/span&gt; is the diagonal matrix of eigenvalues &lt;a class="footnote-reference brackets" href="#id10" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Ellipsoid SDF definition&lt;/em&gt;: The definition of the SDF is done in the fragment shader inside the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;map&lt;/span&gt;&lt;/code&gt; function, which is used later for the ray marching algorithm and the normals calculation. We define the SDF more simply by transforming a sphere into an ellipsoid, considering that the SDF of a sphere is easily computed and the definition of a tensor gives us a linear transformation of a given geometry. Also, as scaling is not a rigid body transformation, we multiply the final result by a factor to compensate for the difference, which gave us the SDF of the ellipsoid defined as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sdSphere(tensorMatrix&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;(position&lt;/span&gt; &lt;span class="pre"&gt;-&lt;/span&gt; &lt;span class="pre"&gt;centerMCVSOutput),&lt;/span&gt; &lt;span class="pre"&gt;scaleVSOutput*0.48)&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;scFactor&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Ray marching algorithm and lighting&lt;/em&gt;: For the ray marching algorithm, a small value of 20 was taken as the maximum distance since we apply the technique to each individual object and not all at the same time. Additionally, we set the convergence precision to 0.001. We use the central differences method to compute the normals necessary for the scene’s illumination, besides the Blinn-Phong lighting technique, which is high-quality and computationally cheap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Visualization example&lt;/em&gt;: Below is a detailed visualization of the ellipsoids created from this new implementation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/244503195-a626718f-4a13-4275-a2b7-6773823e553c.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/244503195-a626718f-4a13-4275-a2b7-6773823e553c.png" style="width: 376px;" /&gt;
&lt;p&gt;This implementation does show a better quality in the displayed glyphs, and supports the display of a large amount of data, as seen in the image below. For this reason, a tutorial was made to justify in more detail the value of this new implementation. Below are some images generated for the tutorial.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260906510-d422e7b4-3ba3-4de6-bfd0-09c04bec8876.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260906510-d422e7b4-3ba3-4de6-bfd0-09c04bec8876.png" style="width: 600px;" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ellipsoid actor implemented with SDF (Merged)&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/791"&gt;fury-gl/fury#791&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tutorial on using ellipsoid actor to visualize tensor ellipsoids for DTI (Merged)&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/818"&gt;fury-gl/fury#818&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Future work:&lt;/strong&gt; In line with one of the initial objectives, it is expected to implement billboards later on to improve the performance, i.e., higher frame rate and less memory usage for the tensor ellipsoid creation. In addition to looking for ways to optimize the naive ray marching algorithm and the definition of SDFs.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="objectives-in-progress"&gt;
&lt;h2&gt;Objectives in Progress&lt;/h2&gt;
&lt;section id="dti-uncertainty-visualization"&gt;
&lt;h3&gt;DTI uncertainty visualization&lt;/h3&gt;
&lt;p&gt;The DTI visualization pipeline is fairly complex, as a level of uncertainty arises, which, if visualized, helps to assess the model’s accuracy. This measure is not currently implemented, and even though there are several methods to calculate and visualize the uncertainty in the DTI model, because of its simplicity and visual representation, we considered Matrix Perturbation Analysis (MPA) proposed by Basser &lt;a class="footnote-reference brackets" href="#id7" id="id2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. This measurement is visualized as double cones representing the variance of the main direction of diffusion, for which the ray marching technique was also used to create these objects.&lt;/p&gt;
&lt;p&gt;Details of the implementation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Source of uncertainty&lt;/em&gt;: The method of MPA arises from the susceptibility of DTI to dMRI noise present in diffusion-weighted images (DWIs), and also because the model is inherently statistical, making the tensor estimation and other derived quantities to be random variables &lt;a class="footnote-reference brackets" href="#id7" id="id3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. For this reason, this method focus on the premise that image noise produces a random perturbation in the diffusion tensor estimation, and therefore in the calculation of eigenvalues and eigenvectors, particularly in the first eigenvector associated with the main diffusion direction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Mathematical equation&lt;/em&gt;: The description of the perturbation of the principal eigenvector is given by math formula where &lt;span class="math notranslate nohighlight"&gt;\(\Delta D\)&lt;/span&gt; corresponds to the estimated perturbation matrix of &lt;span class="math notranslate nohighlight"&gt;\(D\)&lt;/span&gt; given by the diagonal elements of the covariance matrix &lt;span class="math notranslate nohighlight"&gt;\(\Sigma_{\alpha} \approx (B^T\Sigma^{−1}_{e}B)^{−1}\)&lt;/span&gt;, where &lt;span class="math notranslate nohighlight"&gt;\(\Sigma_{e}\)&lt;/span&gt; is the covariance matrix of the error e, defined as a diagonal matrix made with the diagonal elements of &lt;span class="math notranslate nohighlight"&gt;\((\Sigma^{−1}_{e}) = ⟨S(b)⟩^2 / \sigma^{2}_{\eta}\)&lt;/span&gt;. Then, to get the angle &lt;span class="math notranslate nohighlight"&gt;\(\theta\)&lt;/span&gt; between the perturbed principal eigenvector of &lt;span class="math notranslate nohighlight"&gt;\(D\)&lt;/span&gt;, &lt;span class="math notranslate nohighlight"&gt;\(\varepsilon_1 + \Delta\varepsilon_1\)&lt;/span&gt;, and the estimated eigenvector &lt;span class="math notranslate nohighlight"&gt;\(\varepsilon_1\)&lt;/span&gt;, it can be approximated by &lt;span class="math notranslate nohighlight"&gt;\(\theta = \tan^{−1}( \| \Delta\varepsilon_1 \|)\)&lt;/span&gt; &lt;a class="footnote-reference brackets" href="#id8" id="id4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. Taking into account the above, we define the function &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;main_dir_uncertainty(evals,&lt;/span&gt; &lt;span class="pre"&gt;evecs,&lt;/span&gt; &lt;span class="pre"&gt;signal,&lt;/span&gt; &lt;span class="pre"&gt;sigma,&lt;/span&gt; &lt;span class="pre"&gt;b_matrix)&lt;/span&gt;&lt;/code&gt; that calculates the uncertainty of the eigenvector associated to the main direction of diffusion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Double cone SDF definition&lt;/em&gt;: The final SDF is composed by the union of 2 separately cones using the definition taken from this list of &lt;a class="reference external" href="https://iquilezles.org/articles/distfunctions/#:~:text=Cone%20%2D%20exact,sign(s)%3B%0A%7D"&gt;distance functions&lt;/a&gt;, in this way we have the SDF for the double cone defined as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;opUnion(sdCone(p,a,h),&lt;/span&gt; &lt;span class="pre"&gt;sdCone(-p,a,h))&lt;/span&gt; &lt;span class="pre"&gt;*&lt;/span&gt; &lt;span class="pre"&gt;scaleVSOutput&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Visualization example&lt;/em&gt;: Below is a demo of how this new feature is intended to be used, an image of diffusion tensor ellipsoids and their associated uncertainty cones.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/254747296-09a8674e-bfc0-4b3f-820f-8a1b1ad8c5c9.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/254747296-09a8674e-bfc0-4b3f-820f-8a1b1ad8c5c9.png" style="width: 610px;" /&gt;
&lt;p&gt;The implementation is almost complete, but as it is a new addition that includes mathematical calculations and for which there is no direct reference for comparison, it requires a more detail review before it can be incorporated.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Request:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DTI uncertainty visualization (Under Review)&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/810"&gt;fury-gl/fury#810&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Future work:&lt;/strong&gt; A tutorial will be made explaining in more detail how to calculate the parameters needed for the uncertainty cones using &lt;strong&gt;dipy&lt;/strong&gt; functions, specifically: &lt;a class="reference external" href="https://github.com/dipy/dipy/blob/321e06722ef42b5add3a7f570f6422845177eafa/dipy/denoise/noise_estimate.py#L272"&gt;estimate_sigma&lt;/a&gt; for the noise variance calculation, &lt;a class="reference external" href="https://github.com/dipy/dipy/blob/321e06722ef42b5add3a7f570f6422845177eafa/dipy/reconst/dti.py#L2112"&gt;design_matrix&lt;/a&gt; to get the b-matrix, and &lt;a class="reference external" href="https://github.com/dipy/dipy/blob/321e06722ef42b5add3a7f570f6422845177eafa/dipy/reconst/dti.py#L639"&gt;tensor_prediction&lt;/a&gt; for the signal estimation. Additionally, when the ODF implementation is complete, uncertainty for this other reconstruction model is expected to be added, using semitransparent glyphs representing the mean directional information proposed by Tournier &lt;a class="footnote-reference brackets" href="#id9" id="id5" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="odf-actor-implemented-with-sdf"&gt;
&lt;h3&gt;ODF actor implemented with SDF&lt;/h3&gt;
&lt;p&gt;HARDI-based techniques require more images than DTI, however, they model the diffusion directions as probability distribution functions (PDFs), and the fitted values are returned as orientation distribution functions (ODFs). ODFs are more diffusion sensitive than the diffusion tensor and, therefore, can determine the structure of multi-directional voxels very common in the white matter regions of the brain &lt;a class="footnote-reference brackets" href="#id9" id="id6" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. The current actor to display this kind of glyphs is the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;odf_slicer&lt;/span&gt;&lt;/code&gt; which, given an array of spherical harmonics (SH) coefficients renders a grid of ODFs, which are created from a sphere with a specific number of vertices that fit the data.&lt;/p&gt;
&lt;p&gt;For the application of this model using the same SDF ray marching techniques, we need the data of the SH coefficients, which are used to calculate the orientation distribution function (ODF) described &lt;a class="reference external" href="https://dipy.org/documentation/1.7.0/theory/sh_basis/"&gt;here&lt;/a&gt;. Different SH bases can be used, but for this first approach we focus on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;descoteaux07&lt;/span&gt;&lt;/code&gt; (as labeled in dipy). After performing the necessary calculations, we obtain an approximate result of the current implementation of FURY, as seen below.&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/31288525/260909561-fd90033c-018a-465b-bd16-3586bb31ca36.png" class="align-center" src="https://user-images.githubusercontent.com/31288525/260909561-fd90033c-018a-465b-bd16-3586bb31ca36.png" style="width: 580px;" /&gt;
&lt;p&gt;With a first implementation we start to solve some issues related to direction, color, and data handling, to obtain exactly the same results as the current implementation.&lt;/p&gt;
&lt;p&gt;Details on the issues:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;The direction and the scaling&lt;/em&gt;: When the shape of the ODF is more sphere-like, the size of the glyph is smaller, so for the moment it needs to be adjusted manually, but the idea is to find a relationship between the coefficients and the final object size so it can be automatically scaled. Additionally, as seen in the image, the direction does not match. To fix this, an adjustment in the calculation of the spherical coordinates can be made, or pass the direction information directly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Pass the coefficients data efficiently&lt;/em&gt;: I’m currently creating one actor per glyph since I’m using a &lt;em&gt;uniform&lt;/em&gt; array to pass the coefficients, but the idea is to pass all the data simultaneously. The first idea is to encode the coefficients data through a texture and retrieve them in the fragment shader.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;The colormapping and the lighting&lt;/em&gt;: As these objects present curvatures with quite a bit of detail in some cases, this requires more specific lighting work, in addition to having now not only one color but a color map. This can also be done with texture, but it is necessary to see in more detail how to adjust the texture to the glyph’s shape.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More details on current progress can be seen in blogpost of &lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-16-week-11-tvcastillod.html"&gt;week 11&lt;/a&gt; and &lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-24-week-12-tvcastillod.html"&gt;week 12&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Working branch:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ODF implementation (Under Development)&lt;/strong&gt;
&lt;a class="github reference external" href="https://github.com/tvcastillod/fury/tree/SH-for-ODF-impl"&gt;tvcastillod/fury&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="gsoc-weekly-blogs"&gt;
&lt;h2&gt;GSoC Weekly Blogs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;My blog posts can be found on the &lt;a class="reference external" href="https://fury.gl/latest/blog/author/tania-castillo.html"&gt;FURY website&lt;/a&gt; and the &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/"&gt;Python GSoC blog&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr class="row-odd"&gt;&lt;th class="head"&gt;&lt;p&gt;Date&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Blog Post Link&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 0(02-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Community Bounding Period&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-02-week-0-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-0-2"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 1(05-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Ellipsoid actor implemented with SDF&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-05-week-1-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-1-23"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 2(12-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Making adjustments to the Ellipsoid Actor&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-12-week-2-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-2-18"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 3(19-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Working on uncertainty and details of the first PR&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-19-week-3-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-3-27"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 4(27-06-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;First draft of the DTI uncertainty visualization&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-06-27-week-4-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-4-24"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 5(03-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Preparing the data for the Ellipsoid tutorial&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-03-week-5-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-5-27"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 6(10-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;First draft of the Ellipsoid tutorial&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-10-week-6-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-6-26"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 7(17-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Adjustments on the Uncertainty Cones visualization&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-17-week-7-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-7-26"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 8(25-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Working on Ellipsoid Tutorial and exploring SH&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-25-week-8-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-8-17"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 9(31-07-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Tutorial done and polishing DTI uncertainty&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-31-week-9-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-9-22"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 10(08-08-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Start of SH implementation experiments&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-08-week-10-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-10-16"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-odd"&gt;&lt;td&gt;&lt;p&gt;Week 11(16-08-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Adjusting ODF implementation and looking for solutions on issues found&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-16-week-11-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-11-17"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="row-even"&gt;&lt;td&gt;&lt;p&gt;Week 12(24-08-2022)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Experimenting with ODFs implementation&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-08-24-week-12-tvcastillod.html"&gt;FURY&lt;/a&gt; - &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/tvcastillods-blog/weekly-check-in-12-9"&gt;Python&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
&lt;section id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="id7" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="backrefs"&gt;(&lt;a role="doc-backlink" href="#id2"&gt;1&lt;/a&gt;,&lt;a role="doc-backlink" href="#id3"&gt;2&lt;/a&gt;)&lt;/span&gt;
&lt;p&gt;Basser, P. J. (1997). Quantifying errors in fiber direction and diffusion tensor field maps resulting from MR noise. In 5th Scientific Meeting of the ISMRM (Vol. 1740).&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="id8" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id4"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Chang, L. C., Koay, C. G., Pierpaoli, C., &amp;amp; Basser, P. J. (2007). Variance of estimated DTI‐derived parameters via first‐order perturbation methods. Magnetic Resonance in Medicine: An Official Journal of the International Society for Magnetic Resonance in Medicine, 57(1), 141-149.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="id9" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="backrefs"&gt;(&lt;a role="doc-backlink" href="#id5"&gt;1&lt;/a&gt;,&lt;a role="doc-backlink" href="#id6"&gt;2&lt;/a&gt;)&lt;/span&gt;
&lt;p&gt;J-Donald Tournier, Fernando Calamante, David G Gadian, and Alan Connelly. Direct estimation of the fiber orientation density function from diffusion-weighted mri data using spherical deconvolution. Neuroimage, 23(3):1176–1185, 2004.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="id10" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Gordon Kindlmann. Superquadric tensor glyphs. In Proceedings of the Sixth Joint Eurographics-IEEE TCVG conference on Visualization, pages 147–154, 2004.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-24-final-report-tvcastillod.html"/>
    <summary>Name: Tania Castillo</summary>
    <category term="google" label="google"/>
    <published>2023-08-24T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-21-week-12-joaodellagli.html</id>
    <title>Week 12: Now That is (almost) a Wrap!</title>
    <updated>2023-08-21T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;section id="week-12-now-that-is-almost-a-wrap"&gt;

&lt;p&gt;Hello everyone, it’s time for another GSoC blogpost! Today, I am going to talk about some minor details I worked on last week on my
project.&lt;/p&gt;
&lt;section id="last-week-s-effort"&gt;
&lt;h2&gt;Last Week’s Effort&lt;/h2&gt;
&lt;p&gt;After the API refactoring was done last week, I focused on addressing the reviews I would get from it. The first issues I addressed was related to
style, as there were some minor details my GSoC contributors pointed out that needed change. Also, I have addressed an issue I was having
with the &lt;cite&gt;typed hint&lt;/cite&gt; of one of my functions. Filipi, my mentor, showed me there is a way to have more than one typed hint in the same parameter,
all I needed to do was to use the &lt;cite&gt;Union&lt;/cite&gt; class from the &lt;cite&gt;typing&lt;/cite&gt; module, as shown below:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tUnion&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ndarray&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tUnion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
   &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using that, I could set the typedhint of the &lt;cite&gt;bandwidth&lt;/cite&gt; variable to &lt;cite&gt;float&lt;/cite&gt; and &lt;cite&gt;np.ndarray&lt;/cite&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="so-how-did-it-go"&gt;
&lt;h2&gt;So how did it go?&lt;/h2&gt;
&lt;p&gt;All went fine with no difficult at all, thankfully.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-next-steps"&gt;
&lt;h2&gt;The Next Steps&lt;/h2&gt;
&lt;p&gt;My next plans are, after having PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;#826&lt;/a&gt; merged, to work on the float encoding issue described in
&lt;span class="xref std std-doc"&gt;this blogpost&lt;/span&gt;. Also, I plan to tackle the UI idea once again, to see if I can finally give the user
a way to control the intensities of the distributions.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-21-week-12-joaodellagli.html"/>
    <summary>Hello everyone, it’s time for another GSoC blogpost! Today, I am going to talk about some minor details I worked on last week on my
project.</summary>
    <category term="google" label="google"/>
    <published>2023-08-21T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-21-joaodellagli-final-report.html</id>
    <title>Google Summer of Code Final Work Product</title>
    <updated>2023-08-21T00:00:00+00:00</updated>
    <author>
      <name>João Victor Dell Agli Floriano</name>
    </author>
    <content type="html">&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/projects/ED0203De"&gt;&lt;img alt="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" height="40" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC-logo-horizontal.svg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://summerofcode.withgoogle.com/programs/2023/organizations/python-software-foundation"&gt;&lt;img alt="https://www.python.org/static/img/python-logo&amp;#64;2x.png" src="https://www.python.org/static/img/python-logo&amp;#64;2x.png" style="height: 40px;" /&gt;
&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://fury.gl/latest/index.html"&gt;&lt;img alt="https://python-gsoc.org/logos/fury_logo.png" src="https://python-gsoc.org/logos/fury_logo.png" style="width: 40px;" /&gt;
&lt;/a&gt;
&lt;section id="google-summer-of-code-final-work-product"&gt;

&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; João Victor Dell Agli Floriano&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Organisation:&lt;/strong&gt; Python Software Foundation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sub-Organisation:&lt;/strong&gt; FURY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Project:&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/fury-gl/fury/wiki/Google-Summer-of-Code-2023-(GSOC2023)#project-2-fast-3d-kernel-based-density-rendering-using-billboards"&gt;FURY - Project 2. Fast 3D kernel-based density rendering using billboards.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This project had the goal to implement 3D Kernel Density Estimation rendering to FURY. Kernel Density Estimation, or KDE, is a
statistical method that uses kernel smoothing for modeling and estimating the density distribution of a set of points defined
inside a given region. For its graphical implementation, it was used post-processing techniques such as offscreen rendering to
framebuffers and colormap post-processing as tools to achieve the desired results. This was completed with a functional basic KDE
rendering result, that relies on a solid and easy-to-use API, as well as some additional features.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="proposed-objectives"&gt;
&lt;h2&gt;Proposed Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;strong&gt;First Phase&lt;/strong&gt;&lt;span class="classifier"&gt;Implement framebuffer usage in FURY&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Investigate the usage of float framebuffers inside FURY’s environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement a float framebuffer API.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;strong&gt;Second Phase&lt;/strong&gt;&lt;span class="classifier"&gt;Shader-framebuffer integration&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Implement a shader that uses a colormap to render framebuffers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Escalate this rendering for composing multiple framebuffers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;strong&gt;Third Phase&lt;/strong&gt;&lt;span class="classifier"&gt;KDE Calculations&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Investigate KDE calculation for point-cloud datasets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement KDE calculation inside the framebuffer rendering shaders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test KDE for multiple datasets.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-completed"&gt;
&lt;h2&gt;Objectives Completed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Implement framebuffer usage in FURY&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The first phase, addressed from &lt;em&gt;May/29&lt;/em&gt; to &lt;em&gt;July/07&lt;/em&gt;, started with the investigation of
&lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkOpenGLFramebufferObject.html#details"&gt;VTK’s Framebuffer Object&lt;/a&gt;, a vital part of this project, to understand
how to use it properly.&lt;/p&gt;
&lt;p&gt;Framebuffer Objects, abbreviated as FBOs, are the key to post-processing effects in OpenGL, as they are used to render things offscreen and save the resulting image to a texture
that will be later used to apply the desired post-processing effects within the object’s &lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Fragment_Shader"&gt;fragment shader&lt;/a&gt;
rendered to screen, in this case, a &lt;a class="reference external" href="http://www.opengl-tutorial.org/intermediate-tutorials/billboards-particles/billboards/"&gt;billboard&lt;/a&gt;. In the case of the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kernel_density_estimation"&gt;Kernel Density Estimation&lt;/a&gt; post-processing effect, we need a special kind of FBO, one that stores textures’
values as floats, different from the standard 8-bit unsigned int storage. This is necessary because the KDE rendering involves rendering every KDE point calculation
to separate billboards, rendered to the same scene, which will have their intensities, divided by the number of points rendered, blended with
&lt;a class="reference external" href="https://www.khronos.org/opengl/wiki/Blending"&gt;OpenGL Additive Blending&lt;/a&gt;, and if a relative big number of points are rendered at the
same time, 32-bit float precision is needed to guarantee that small-intensity values will not be capped to zero, and disappear.&lt;/p&gt;
&lt;p&gt;After a month going through VTK’s FBO documentation and weeks spent trying different approaches to this method, it would not work
properly, as some details seemed to be missing from the documentation, and asking the community haven’t solved the problem as well.
Reporting that to my mentors, which unsuccessfully tried themselves to make it work, they decided it was better if another path was taken, using
&lt;a class="reference external" href="https://vtk.org/doc/nightly/html/classvtkWindowToImageFilter.html"&gt;VTK’s WindowToImageFilter&lt;/a&gt; method as a workaround, described
in this &lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-03-week-5-joaodellagli.html"&gt;blogpost&lt;/a&gt;. This method helped the development of
three new functions to FURY, &lt;em&gt;window_to_texture()&lt;/em&gt;, &lt;em&gt;texture_to_actor()&lt;/em&gt; and &lt;em&gt;colormap_to_texture()&lt;/em&gt;, that allow the passing of
different kinds of textures to FURY’s actor’s shaders, the first one to capture a window and pass it as a texture to an actor,
the second one to pass an external texture to an actor, and the third one to specifically pass a colormap as a texture to an
actor. It is important to say that &lt;em&gt;WindowToImageFilter()&lt;/em&gt; is not the ideal way to make it work, as this method does not seem to
support float textures. However, a workaround to that is currently being worked on, as I will describe later on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pull Requests:&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;KDE Rendering Experimental Program (Needs major revision):&lt;/strong&gt; &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;fury-gl/fury#804&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result of this whole FBO and WindowToImageFilter experimentation is well documented in PR
&lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;#804&lt;/a&gt; that implements an experimental version of a KDE rendering program.
The future of this PR, as discussed with my mentors, is to be better documented to be used as an example for developers on
how to develop features in FURY with the tools used, and it shall be done soon.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Shader-framebuffer integration&lt;/strong&gt;&lt;/dt&gt;&lt;dd&gt;&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-21-joaodellagli-final-report.rst&lt;/span&gt;, line 16); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “blogpost”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;The second phase, which initially was thought of as “Implement a shader that uses a colormap to render framebuffers” and “Escalate this
rendering for composing multiple framebuffers” was actually a pretty simple phase that could be addressed in one week, &lt;em&gt;July/10&lt;/em&gt;
to &lt;em&gt;July/17&lt;/em&gt;, done at the same time as the third phase goal, documented in this
&lt;a class="reference external" href="https://fury.gl/latest/posts/2023/2023-07-17-week-7-joaodellagli.html"&gt;blogpost&lt;/a&gt;. As FURY already had a tool for generating and
using colormaps, they were simply connected to the shader part of the program as textures, with the functions explained above.
Below, is the result of the &lt;em&gt;matplotlib viridis&lt;/em&gt; colormap passed to a simple gaussian KDE render:&lt;/p&gt;
&lt;img alt="Final 2D plot" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/final_2d_plot.png" /&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-21-joaodellagli-final-report.rst&lt;/span&gt;, line 16); &lt;em&gt;&lt;a href="#id3"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate explicit target name: “#804”.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;That is also included in PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/804"&gt;#804&lt;/a&gt;. Having the 2D plot ready, some time was taken to
figure out how to enable a 3D render, that includes rotation and other movement around the set rendered, which was solved by
learning about the callback properties that exist inside &lt;em&gt;VTK&lt;/em&gt;. Callbacks are ways to enable code execution inside the VTK rendering
loop, enclosed inside &lt;em&gt;vtkRenderWindowInteractor.start()&lt;/em&gt;. If it is desired to add a piece of code that, for example, passes a time
variable to the fragment shader over time, a callback function can be declared:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;showm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback_function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;
    &lt;span class="n"&gt;pass_shader_uniforms_to_fs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_iren_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;RenderEvent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The piece of code above created a function that updates the time variable &lt;em&gt;t&lt;/em&gt; in every &lt;em&gt;“RenderEvent”&lt;/em&gt;, and passes it to the
fragment shader. With that property, the camera and some other parameters could be updated, which enabled 3D visualization, that
then, outputted the following result, using &lt;em&gt;matplotlib inferno&lt;/em&gt; colormap:&lt;/p&gt;
&lt;img alt="3D Render gif" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/3d_kde_gif.gif" /&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;KDE Calculations&lt;/strong&gt; (ongoing)&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;As said before, the second and third phases were done simultaneously, so after having a way to capture the window and use it as a
texture ready, the colormap ready, and an initial KDE render ready, all it was needed to do was to improve the KDE calculations.
As this &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kernel_density_estimation"&gt;Wikipedia page&lt;/a&gt; explains, a KDE calculation is to estimate an
abstract density around a set of points defined inside a given region with a kernel, that is a function that models the density
around a point based on its associated distribution &lt;span class="math notranslate nohighlight"&gt;\(\sigma\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;A well-known kernel is, for example, the &lt;strong&gt;Gaussian Kernel&lt;/strong&gt;, that says that the density around a point &lt;span class="math notranslate nohighlight"&gt;\(p\)&lt;/span&gt; with distribution
&lt;span class="math notranslate nohighlight"&gt;\(\sigma\)&lt;/span&gt; is defined as:&lt;/p&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[GK_{\textbf{p}, \sigma} (\textbf{x}) = e^{-\frac{1}{2}\frac{||\textbf{x} - \textbf{p}||^2}{\sigma^2}}\]&lt;/div&gt;
&lt;p&gt;Using that kernel, we can calculate the KDE of a set of points &lt;span class="math notranslate nohighlight"&gt;\(P\)&lt;/span&gt; with associated distributions &lt;span class="math notranslate nohighlight"&gt;\(S\)&lt;/span&gt; calculating their individual
Gaussian distributions, summing them up and dividing them by the total number of points &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math notranslate nohighlight"&gt;
\[KDE(A, S)=\frac{1}{n}\sum_{i = 0}^{n}GK(x, p_{i}, \sigma_{i})\]&lt;/div&gt;
&lt;p&gt;So I dove into implementing all of that into the offscreen rendering part, and that is when the lack of a float framebuffer would
charge its cost. As it can be seen above, just calculating each point’s density isn’t the whole part, as I also need to divide
everyone by the total number of points &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt;, and then sum them all. The problem is that, if the number of points its big enough,
the individual densities will be really low, and that would not be a problem for a 32-bit precision float framebuffer, but that is
&lt;em&gt;definitely&lt;/em&gt; a problem for a 8-bit integer framebuffer, as small enough values will simply underflow and disappear. That issue is
currently under investigation, and some solutions have already being presented, as I will show in the &lt;strong&gt;Objectives in Progress&lt;/strong&gt;
section.&lt;/p&gt;
&lt;p&gt;Apart from that, after having the experimental program ready, I focused on modularizing it into a functional and simple API
(without the &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt; division for now), and I could get a good set of results from that. The API I first developed implemented the
&lt;em&gt;EffectManager&lt;/em&gt; class, responsible for managing all of the behind-the-scenes steps necessary for the kde render to work,
encapsulated inside the &lt;em&gt;ÈffectManager.kde()&lt;/em&gt; method. It had the following look:&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-21-joaodellagli-final-report.rst&lt;/span&gt;, line 162)&lt;/p&gt;
&lt;p&gt;Error in “code-block” directive:
maximum 1 argument(s) allowed, 9 supplied.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury.effect_manager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;

    &lt;span class="n"&gt;showm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# KDE rendering setup&lt;/span&gt;
    &lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;kde_actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# End of KDE rendering setup&lt;/span&gt;

    &lt;span class="n"&gt;showmn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_actor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;p&gt;Those straightforward instructions, that hid several lines of code and setup, could manage to output the following result:&lt;/p&gt;
&lt;img alt="API 3D KDE plot" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/fianl_3d_plot.png" /&gt;
&lt;p&gt;And this was not the only feature I had implemented for this API, as the use of &lt;em&gt;WindowToImageFilter&lt;/em&gt; method opened doors for a
whole new world for FURY: The world of post-processing effects. With this features setup, I managed to implement a &lt;em&gt;gaussian blur&lt;/em&gt;
effect, a &lt;em&gt;grayscale&lt;/em&gt; effect and a &lt;em&gt;Laplacian&lt;/em&gt; effect for calculating “borders”:&lt;/p&gt;
&lt;img alt="Gaussian Blur effect" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/gaussian_blur.png" /&gt;
&lt;img alt="Grayscale effect" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/grayscale.png" /&gt;
&lt;img alt="Laplacian effect" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/laplacian1.gif" /&gt;
&lt;p&gt;As this wasn’t the initial goal of the project and I still had several issues to deal with, I have decided to leave these features as a
future addition.&lt;/p&gt;
&lt;p&gt;Talking with my mentors, we realized that the first KDE API, even though simple, could lead to bad usage from users, as the
&lt;em&gt;em.kde()&lt;/em&gt; method, that outputted a &lt;em&gt;FURY actor&lt;/em&gt;, had dependencies different from any other object of its kind, making it a new
class of actors, which could lead to confusion and bad handling. After some pair programming sessions, they instructed me to take
a similar, but different road from what I was doing, turning the kde actor into a new class, the &lt;em&gt;KDE&lt;/em&gt; class. This class would
have almost the same set of instructions present in the prior method, but it would break them in a way it would only be completely
set up after being passed to the &lt;em&gt;EffectManager&lt;/em&gt; via its add function. Below, how the refactoring handles it:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury.effects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KDE&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fury&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;

&lt;span class="n"&gt;showm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# KDE rendering setup&lt;/span&gt;
&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EffectManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;kde_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KDE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde_effect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# End of KDE rendering setup&lt;/span&gt;

&lt;span class="n"&gt;showm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which outputted the same results as shown above. It may have cost some simplicity as we are now one line farther from having it
working, but it is more explicit in telling the user this is not just a normal actor.&lt;/p&gt;
&lt;p&gt;Another detail I worked on was the kernel variety. The Gaussian Kernel isn’t the only one available to model density distributions,
there are several others that can do that job, as it can be seen in this &lt;a class="reference external" href="https://scikit-learn.org/stable/modules/density.html"&gt;scikit-learn piece of documentation&lt;/a&gt;
and this &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kernel_(statistics)"&gt;Wikipedia page on kernels&lt;/a&gt;. Based on the scikit-learn KDE
implementation, I worked on implementing the following kernels inside our API, that can be chosen as a parameter when calling the
&lt;em&gt;KDE&lt;/em&gt; class:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Cosine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Epanechnikov&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exponential&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gaussian&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linear&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tophat&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below, the comparison between them using the same set of points and bandwidths:&lt;/p&gt;
&lt;img alt="Comparison between the six implemented kernels" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/kernels.png" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;First Stage of the KDE Rendering API (will be merged soon)&lt;/strong&gt;: &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/826"&gt;fury-gl/fury#826&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this work culminated in PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/826/"&gt;#826&lt;/a&gt;, that proposes to add the first stage of
this API (there are some details yet to be completed, like the &lt;span class="math notranslate nohighlight"&gt;\(n\)&lt;/span&gt; division) to FURY. This PR added the described API, and also
proposed some minor changes to some already existing FURY functions related to callbacks, changes necessary for this and other
future applications that would use it to work. It also added the six kernels described, and a simple documented example on how
to use this feature.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-objectives"&gt;
&lt;h2&gt;Other Objectives&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="simple"&gt;
&lt;dt&gt;&lt;strong&gt;Stretch Goals&lt;/strong&gt;&lt;span class="classifier"&gt;SDE Implementation, Network/Graph visualization using SDE/KDE, Tutorials&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Investigate SDE calculation for surface datasets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement SDE calculation inside the framebuffer rendering shaders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test SDE for multiple datasets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop comprehensive tutorials that explain SDE concepts and FURY API usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create practical, scenario-based tutorials using real datasets and/or simulations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="objectives-in-progress"&gt;
&lt;h2&gt;Objectives in Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;KDE Calculations&lt;/strong&gt; (ongoing)&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;The KDE rendering, even though almost complete, have the $n$ division, an important step, missing, as this normalization allows colormaps
to cover the whole range o values rendered. The lack of a float FBO made a big difference in the project, as the search for a functional implementation of it not only delayed the project, but it is vital for
the correct calculations to work.&lt;/p&gt;
&lt;p&gt;For the last part, a workaround thought was to try an approach I later figured out is an old one, as it can be check in
&lt;a class="reference external" href="https://developer.nvidia.com/gpugems/gpugems/part-ii-lighting-and-shadows/chapter-12-omnidirectional-shadow-mapping"&gt;GPU Gems 12.3.3 section&lt;/a&gt;:
If I need 32-bit float precision and I got 4 8-bit integer precision available, why not trying to pack this float into this RGBA
texture? I have first tried to do one myself, but it didn’t work for some reason, so I tried &lt;a class="reference external" href="https://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/"&gt;Aras Pranckevičius&lt;/a&gt;
implementation, that does the following:&lt;/p&gt;
&lt;div class="highlight-GLSL notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;float_to_rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitEnc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;256.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;65536.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;16777216.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;vec4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bitEnc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yzww&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;255.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;xxxy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That initially worked, but for some reason I am still trying to understand, it is resulting in a really noisy texture:&lt;/p&gt;
&lt;img alt="Noisy KDE render" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/noisy%20kde.png" /&gt;
&lt;p&gt;One way to try to mitigate that while is to pass this by a gaussian blur filter, to try to smooth out the result:&lt;/p&gt;
&lt;img alt="Blurred result" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/blurred_kde.png" /&gt;
&lt;p&gt;But it is not an ideal solution as well, as it may lead to distortions in the actual density values, depending on the application of
the KDE. Now, my goal is to first find the root of the noise problem, and then, if that does not work, try to make the gaussian filter
work.&lt;/p&gt;
&lt;p&gt;Another detail that would be a good addition to the API is UI controls. Filipi, one of my mentors, told me it would be a good feature
if the user could control the intensities of the bandwidths for a better structural visualization of the render, and knowing FURY already
have a good set of &lt;a class="reference external" href="https://fury.gl/latest/auto_examples/index.html#user-interface-elements"&gt;UI elements&lt;/a&gt;, I just needed to integrate
that into my program via callbacks. I tried implementing an intensity slider. However, for some reason, it is making the program crash
randomly, for reasons I still don’t know, so that is another issue under investigation. Below, we show a first version of that feature,
which was working before the crashes:&lt;/p&gt;
&lt;img alt="Slider for bandwidths" class="align-center" src="https://raw.githubusercontent.com/JoaoDell/gsoc_assets/main/images/slider.gif" /&gt;
&lt;p&gt;&lt;em&gt;Pull Requests&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UI intensity slider for the KDE rendering API (draft)&lt;/strong&gt;: &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/849"&gt;fury-gl/fury#849&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Post-processing effects for FURY Effects API (draft)&lt;/strong&gt;: &lt;a class="github reference external" href="https://github.com/fury-gl/fury/pull/850"&gt;fury-gl/fury#850&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="gsoc-weekly-blogs"&gt;
&lt;h2&gt;GSoC Weekly Blogs&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;My blog posts can be found at &lt;a class="reference external" href="https://fury.gl/latest/blog/author/joao-victor-dell-agli-floriano.html"&gt;FURY website&lt;/a&gt; and &lt;a class="reference external" href="https://blogs.python-gsoc.org/en/joaodellaglis-blog/"&gt;Python GSoC blog&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="timeline"&gt;
&lt;h2&gt;Timeline&lt;/h2&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;/home/runner/work/fury/fury/docs/source/posts/2023/2023-08-21-joaodellagli-final-report.rst&lt;/span&gt;, line 332)&lt;/p&gt;
&lt;p&gt;Malformed table.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Date                | Description                                        | Blog Post Link                                                                                                                                                                                            |
+=====================+====================================================+===========================================================================================================================================================================================================+
| Week 0 (29-05-2023) | The Beginning of Everything                        | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-05-29-week-0-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/the-beggining-of-everything-week-0/&amp;gt;`__                  |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 1 (05-06-2022) | The FBO Saga                                       | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-06-05-week-1-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/the-fbo-saga-week-1/&amp;gt;`__                                 |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 2 (12-06-2022) | The Importance of (good) Documentation             | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-06-12-week-2-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/the-importance-of-good-documentation-week-2/&amp;gt;`__         |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 3 (19-06-2022) | Watch Your Expectations                            | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-06-19-week-3-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-3-watch-your-expectations/&amp;gt;`__                      |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 4 (26-06-2022) | Nothing is Ever Lost                               | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-06-26-week-4-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-4-nothing-is-ever-lost/&amp;gt;`__                         |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 5 (03-07-2022) | All Roads Lead to Rome                             | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-03-week-5-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-5-all-roads-lead-to-rome/&amp;gt;`__                       |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 6 (10-07-2022) | Things are Starting to Build Up                    | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-10-week-6-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-6-things-are-starting-to-build-up/&amp;gt;`__              |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 7 (17-07-2022) | Experimentation Done                               | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-17-week-7-joaodellagli.html&amp;gt;`__ - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-7-experimentation-done/&amp;gt;`__                         |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 8 (24-07-2022) | The Birth of a Versatile API                       | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-24-week-8-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-8-the-birth-of-a-versatile-api/&amp;gt;`__                 |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 9 (31-07-2022) | It is Polishing Time!                              | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-07-31-week-9-joaodellagli.html&amp;gt;`__  - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-9-it-is-polishing-time/&amp;gt;`__                         |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 10 (07-08-2022)| Ready for Review!                                  | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-08-07-week-10-joaodellagli.html&amp;gt;`__ - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/ready-for-review/&amp;gt;`__                                    |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 11 (14-08-2022)| A Refactor is Sometimes Needed                     | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-08-14-week-11-joaodellagli.html&amp;gt;`__ - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/a-refactor-is-sometimes-needed/&amp;gt;`__                      |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Week 12 (21-08-2022)| Now That is (almost) a Wrap!                       | `FURY &amp;lt;https://fury.gl/latest/posts/2023/2023-08-21-week-12-joaodellagli.html&amp;gt;`__ - `Python &amp;lt;https://blogs.python-gsoc.org/en/joaodellaglis-blog/week-12-now-that-is-almost-a-wrap/&amp;gt;`__                   |
+---------------------+----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-21-joaodellagli-final-report.html"/>
    <summary>Name: João Victor Dell Agli Floriano</summary>
    <category term="google" label="google"/>
    <published>2023-08-21T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://fury.gl/posts/2023/2023-08-19-week-12-praneeth.html</id>
    <title>Week 12: FileDialog Quest Begins!</title>
    <updated>2023-08-19T00:00:00+00:00</updated>
    <author>
      <name>Praneeth Shetty</name>
    </author>
    <content type="html">&lt;section id="week-12-filedialog-quest-begins"&gt;

&lt;section id="what-did-you-do-this-week"&gt;
&lt;h2&gt;What did you do this week?&lt;/h2&gt;
&lt;p&gt;During this week, I initiated my work on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; PR, which had been started by Soham. The initial version of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; can be found at &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/294"&gt;#294&lt;/a&gt;. To start, I focused on rebasing the PR. Since this PR was based on an older version, there were some updates to the overall UI structure that needed to be addressed for compatibility. While handling this, I identified a set of issues that I documented in the current PR &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/832"&gt;#832&lt;/a&gt;. These mainly revolved around:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Resizing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; and related components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rectifying the text overflow problem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dealing with a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ZeroDivisionError&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixing the positioning of items in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ListBox2D&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I systematically approached each of these challenges:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resizing FileMenu and Related Components:&lt;/strong&gt; This was a fairly complex task since it involved intricate dependencies, such as the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; relying on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileMenu&lt;/span&gt;&lt;/code&gt;, which, in turn, was dependent on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ListBox2D&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Panel2D&lt;/span&gt;&lt;/code&gt; resizing. To make the process manageable, I decided to progress incrementally in a separate PR a bit later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Text Overflow Issue:&lt;/strong&gt; The problem with text overflow was rooted in our previous approach, which involved executing these actions only when the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt; had a scene property. Although this approach suited the previous version of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TextBlock2D&lt;/span&gt;&lt;/code&gt;, the recent refactoring led to the removal of this property. The scene was previously utilized to determine the text actor’s size. However, we had new methodologies to calculate these sizes, which are detailed in &lt;a class="reference external" href="https://github.com/fury-gl/fury/pull/803"&gt;#803&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="Text Overflow Before" class="align-center" src="https://github.com/fury-gl/fury/assets/64432063/b001f9d3-a5e8-45ad-8605-85df595b5654" /&gt;
&lt;img alt="Text Overflow After" class="align-center" src="https://github.com/fury-gl/fury/assets/64432063/d3c9c3a3-e601-45ab-8975-2b1e98acf1d3" /&gt;
&lt;p&gt;&lt;strong&gt;Addressing ZeroDivisionError:&lt;/strong&gt; The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ZeroDivisionError&lt;/span&gt;&lt;/code&gt; emerged when the total number of values was the same as the number of slots. The issue lay in the separation of these values for calculating the scrollbar’s height parameter. Unfortunately, this calculation error occurred when this would return us zero while updating the scrollbar. To counter this, I implemented a conditional check to ascertain whether the value is zero or not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Correcting ``ListBox2D`` Item Positioning:&lt;/strong&gt; Another challenge I encountered related to the improper positioning of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ListBox2D&lt;/span&gt;&lt;/code&gt; item’s background. When a slot was not visible, its background was resized to zero, and visibility was set to off. Consequently, during the calculation of updated positions, the height was considered zero, leading to mispositioning. I resolved this by refraining from resizing and solely toggling visibility, achieving the desired result.&lt;/p&gt;
&lt;img alt="ListBox2D mispositioning Before" class="align-center" src="https://github.com/fury-gl/fury/assets/64432063/e2805934-b037-47fd-872c-0b284b298d3c" /&gt;
&lt;img alt="Fixed ListBox2D mispositioning" class="align-center" src="https://github.com/fury-gl/fury/assets/64432063/3bc1aabb-bb79-4e26-817d-a2a2ddd20ea3" /&gt;
&lt;/section&gt;
&lt;section id="did-you-get-stuck-anywhere"&gt;
&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;
&lt;p&gt;Among the challenges I faced, one notable instance involved addressing the visibility issue in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeUI&lt;/span&gt;&lt;/code&gt;. Despite my attempts at various solutions, none yielded the desired outcome. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeUI&lt;/span&gt;&lt;/code&gt; exhibited either full visibility or no visibility at all. In this situation, I sought guidance from my mentor to find a viable solution.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-coming-up-next"&gt;
&lt;h2&gt;What is coming up next?&lt;/h2&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;FileDialog&lt;/span&gt;&lt;/code&gt; implementation is nearly finalized, and my plan is to work on any review, feedback or suggestions that might arise. Following this, I will shift my attention towards addressing the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;TreeUI&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://fury.gl/posts/2023/2023-08-19-week-12-praneeth.html"/>
    <summary>During this week, I initiated my work on the FileDialog PR, which had been started by Soham. The initial version of the FileDialog can be found at #294. To start, I focused on rebasing the PR. Since this PR was based on an older version, there were some updates to the overall UI structure that needed to be addressed for compatibility. While handling this, I identified a set of issues that I documented in the current PR #832. These mainly revolved around:</summary>
    <category term="google" label="google"/>
    <published>2023-08-19T00:00:00+00:00</published>
  </entry>
</feed>
