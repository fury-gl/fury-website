

.. _sphx_glr_auto_examples_13_shaders:

Shaders
-------

These tutorials show:

- How to use shaders in FURY actors.
- How to create new user shaders and internal conventions.



.. raw:: html

    <div class="sphx-glr-thumbnails">

.. thumbnail-parent-div-open

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="SDFs or Signed-distance functions when passed the coordinates of a point in space, return the shortest distance between that point and some surface. This property of SDFs can be used to model 3D geometry at a faster rate compared to traditional polygons based modeling.">

.. only:: html

  .. image:: /auto_examples/13_shaders/images/thumb/sphx_glr_viz_sdfactor_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_13_shaders_viz_sdfactor.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Visualize SDF Actor</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="The Principled Bidirectional Reflectance Distribution Function ([BRDF] (https://en.wikipedia.org/wiki/Bidirectional_reflectance_distribution_function) ) was introduced by Brent Burley as part of the [SIGGRAPH 2012 Physically Based Shading course] (https://blog.selfshadow.com/publications/s2012-shading-course/). Although it is not strictly physically based, it was designed so the parameters included could model materials in the [MERL 100](https://www.merl.com/brdf/) (Material Exchange and Research Library) database. Moreover, each parameter was carefully chosen and limited to be easy to use and understand, so that blending multiple layers together would give intuitive results.">

.. only:: html

  .. image:: /auto_examples/13_shaders/images/thumb/sphx_glr_viz_principled_spheres_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_13_shaders_viz_principled_spheres.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Principled BRDF shader on spheres</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This example shows how to use shaders to generate a shaded output. We will demonstrate how to load polydata then use a custom shader calls to render a custom shaded model. First, let&#x27;s import FURY">

.. only:: html

  .. image:: /auto_examples/13_shaders/images/thumb/sphx_glr_viz_shader_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_13_shaders_viz_shader.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Varying Color</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="PBR engines aim to simulate properties of light when it interacts with objects in the scene in a physically plausible way. The interaction of light with an object depends on the material the object is made of. In computer graphics, materials are usually divided in 2 main categories based on their conductive properties: dielectrics and metals.">

.. only:: html

  .. image:: /auto_examples/13_shaders/images/thumb/sphx_glr_viz_pbr_spheres_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_13_shaders_viz_pbr_spheres.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Physically-Based Rendering (PBR) on spheres</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Traditional rendering engines discretize surfaces using triangles or quadrilateral polygons. The visual quality of these elements depends on the number of polygons used to build the 3D mesh, i.e., a smoother surface will require more polygons. However, increasing the amount of rendered polygons comes at the cost of performance as it decreases the number of frames per second (FPS), which might compromise the real-time interactivity of a visualization.">

.. only:: html

  .. image:: /auto_examples/13_shaders/images/thumb/sphx_glr_viz_billboard_sdf_spheres_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_13_shaders_viz_billboard_sdf_spheres.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">SDF Impostors on Billboards</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="For the cylinder representation with polygons, we will use cylinder actor implementation on FURY, and for the visualization using SDFs, we will implement shader code to create the cylinder and use a box actor to put our implementation inside.">

.. only:: html

  .. image:: /auto_examples/13_shaders/images/thumb/sphx_glr_viz_sdf_cylinder_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_13_shaders_viz_sdf_cylinder.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Make a Cylinder using polygons vs SDF</div>
    </div>


.. thumbnail-parent-div-close

.. raw:: html

    </div>


.. toctree::
   :hidden:

   /auto_examples/13_shaders/viz_sdfactor
   /auto_examples/13_shaders/viz_principled_spheres
   /auto_examples/13_shaders/viz_shader
   /auto_examples/13_shaders/viz_pbr_spheres
   /auto_examples/13_shaders/viz_billboard_sdf_spheres
   /auto_examples/13_shaders/viz_sdf_cylinder

